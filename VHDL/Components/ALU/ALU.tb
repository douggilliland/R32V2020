-- Master State Machine for ALU
-- Runs at 50 MHz FPGA clock speed

library IEEE;
use IEEE.std_logic_1164.all;

entity testbench is
end entity testbench;

architecture BENCH of testbench is

signal	i_regDataA		: std_logic_vector(31 downto 0);
signal	i_regDataB		: std_logic_vector(31 downto 0);
signal	i_Op_ADS		: std_logic;
signal	i_Op_MUL		: std_logic;
signal	i_Op_CMP		: std_logic;
signal	i_Op_ARS		: std_logic;
signal	i_Op_XRS		: std_logic;
signal	i_Op_ORS		: std_logic;
signal	i_Op_LS1		: std_logic;
signal	i_Op_RS1		: std_logic;
signal	i_Op_LR1		: std_logic;
signal	i_Op_RR1		: std_logic;
signal	i_Op_RA1		: std_logic;
signal	o_ALUDataOut	: std_logic_vector(31 downto 0);
signal	o_CondCodeBits	: std_logic_vector(31 downto 0);
signal Stop : BOOLEAN;

----------------------------------------
  
  -- the component instantiated below

  component ALU is
	port (
		i_regDataA		: in std_logic_vector(31 downto 0) := x"00000000";
		i_regDataB		: in std_logic_vector(31 downto 0) := x"00000000";
		i_Op_ADS		: in std_logic := '0';
		i_Op_MUL		: in std_logic := '0';
		i_Op_CMP		: in std_logic := '0';
		i_Op_ARS		: in std_logic := '0';
		i_Op_XRS		: in std_logic := '0';
		i_Op_ORS		: in std_logic := '0';
		i_Op_LS1		: in std_logic := '0';
		i_Op_RS1		: in std_logic := '0';
		i_Op_LR1		: in std_logic := '0';
		i_Op_RR1		: in std_logic := '0';
		i_Op_RA1		: in std_logic := '0';
 		o_ALUDataOut	: out std_logic_vector(31 downto 0);
		o_CondCodeBits	: out std_logic_vector(31 downto 0)
	);
end component;

----------------------------------------
begin

	ALU_Ops: process
    	begin
        	i_regDataA <= x"00000000";
        	i_regDataB <= x"00000000";
            i_Op_ADS <= '0';
            i_Op_MUL <= '0';
            i_Op_CMP <= '0';
            i_Op_ARS <= '0';
            i_Op_XRS <= '0';
            i_Op_ORS <= '0';
            i_Op_LS1 <= '0';
            i_Op_RS1 <= '0';
            i_Op_LR1 <= '0';
            i_Op_RR1 <= '0';
            i_Op_RA1 <= '0';
            wait for 20 NS;
        	i_regDataA <= x"00000001";
        	i_regDataB <= x"00000002";
            i_Op_ADS <= '1';	-- Add
            wait for 20 NS;
            i_Op_ADS <= '0';
            wait for 20 NS;
        	i_regDataA <= x"00000002";
        	i_regDataB <= x"00000004";
            i_Op_MUL <= '1';	-- Multiply
            wait for 20 NS;
            i_Op_MUL <= '0';
            wait for 20 NS;
        	i_regDataA <= x"00000001";
        	i_regDataB <= x"00000002";
            i_Op_CMP <= '1';	-- Compare
            wait for 20 NS;
            i_Op_CMP <= '0';
            wait for 20 NS;
        	i_regDataA <= x"00000002";
        	i_regDataB <= x"00000002";
            i_Op_CMP <= '1';	-- Compare
            wait for 20 NS;
            i_Op_CMP <= '0';
            wait for 20 NS;
            
        	i_regDataA <= x"FFFFFFFF";
        	i_regDataB <= x"55555555";
            i_Op_ARS <= '1';	-- AND
            wait for 20 NS;
            i_Op_ARS <= '0';
			wait for 20 NS;
            
        	i_regDataA <= x"FFFFFFFF";
        	i_regDataB <= x"55555555";
			i_Op_XRS <= '1';	-- XOR
			wait for 20 NS;
			i_Op_XRS <= '0';
			wait for 20 NS;
            
        	i_regDataA <= x"0000AAAA";
        	i_regDataB <= x"55555555";
			i_Op_ORS <= '1';	-- OR
			wait for 20 NS;
			i_Op_ORS <= '0';
			wait for 20 NS;
            
        	i_regDataA <= x"00000004";
			i_Op_LS1 <= '1';	-- LS1
			wait for 20 NS;
			i_Op_LS1 <= '0';
			wait for 20 NS;
            
        	i_regDataA <= x"00000004";
			i_Op_RS1 <= '1';	-- RS1
			wait for 20 NS;
			i_Op_RS1 <= '0';
			wait for 20 NS;
            
        	i_regDataA <= x"00000004";
			i_Op_RR1 <= '1';	-- RR1
			wait for 20 NS;
			i_Op_RR1 <= '0';
			wait for 20 NS;
            
        	i_regDataA <= x"00000004";
			i_Op_LR1 <= '1';	-- LR1
			wait for 20 NS;
			i_Op_LR1 <= '0';
			wait for 20 NS;
            
        	i_regDataA <= x"00000004";
			i_Op_RA1 <= '1';	-- RA1
			wait for 20 NS;
			i_Op_RA1 <= '0';
			wait for 20 NS;
            
			wait for 20 NS;
			Stop <= TRUE;
			wait;
          end process ALU_Ops;

 STATES: ALU port map (
		i_regDataA	=> i_regDataA,
		i_regDataB	=> i_regDataB,
		i_Op_ADS	=> i_Op_ADS,
		i_Op_MUL	=> i_Op_MUL,
		i_Op_CMP	=> i_Op_CMP,
		i_Op_ARS	=> i_Op_ARS,
		i_Op_XRS	=> i_Op_XRS,
		i_Op_ORS	=> i_Op_ORS,
		i_Op_LS1	=> i_Op_LS1,
		i_Op_RS1	=> i_Op_RS1,
		i_Op_LR1	=> i_Op_LR1,
		i_Op_RR1	=> i_Op_RR1,
		i_Op_RA1	=> i_Op_RA1,
 		o_ALUDataOut	=> o_ALUDataOut,
		o_CondCodeBits	=> o_CondCodeBits
    );
  
----------------------------------------
end architecture BENCH;
