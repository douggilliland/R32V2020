R32V2020String:	.string "R32v2020"
; Read UART character and put it to the SVGA Display
start:
00000000	20400000		add	SAR,r0,r0	; Initialize Stack Pointer (used for return address)
00000001	A2407000		sss	r7			; push the call address -1
00000002	C000002B		bra	clearScreen
00000003	20500000		add	par,r0,r0	; start of screen
readDataMemory:
00000004	20600000		add	dar,r0,r0	; clear the data memory addr pointer
00000005	64806000		ldl	r8			; get the long again
00000006	31808000		ens r8,r8		; endian swap for right byte order
00000007	A2407000		sss	r7			; store PC on the stack
00000008	C0000037		bra	putChar
00000009	28808000		sr8	r8,r8
0000000a	A2407000		sss	r7
0000000b	C0000034		bra	putChar
0000000c	28808000		sr8	r8,r8
0000000d	A2407000		sss	r7
0000000e	C0000031		bra	putChar
0000000f	28808000		sr8	r8,r8
00000010	A2407000		sss	r7
00000011	C000002E		bra	putChar
00000012	20661000		add	dar,dar,r1	; increment the data pointer
00000013	64806000		ldl	r8			; get the long again
00000014	31808000		ens r8,r8		; endian swap for right byte order
00000015	A2407000		sss	r7			; store PC on the stack
00000016	C0000029		bra	putChar
00000017	28808000		sr8	r8,r8
00000018	A2407000		sss	r7
00000019	C0000026		bra	putChar
0000001a	28808000		sr8	r8,r8
0000001b	A2407000		sss	r7
0000001c	C0000023		bra	putChar
0000001d	28808000		sr8	r8,r8
0000001e	A2407000		sss	r7
0000001f	C0000020		bra	putChar
screenStuff:
00000020	20B50000		add	r11,par,r0	; save the screen pointer in r11
readUartStatus:
00000021	40501800		lil	par,0x1800	; UART Status
waitUartRxChar:
00000022	84905000		lpl	r9			; Read Status into r9
00000023	23991000		and r9,r9,r1
00000024	C3FFFFFE		bez waitUartRxChar
getCharFromUart:
00000025	40501801		lil par,0x1801
00000026	84805000		lpl	r8
00000027	85508000		spl	r8			; echo the character
putCharToScreen:
00000028	205B0000		add	par,r11,r0	; get the screen pointer
00000029	A2407000		sss	r7			; return address
0000002a	C0000015		bra	putChar		; put the character to the screen
0000002b	20B50000		add	r11,par,r0	; save the screen pointer in r11
0000002c	C0FFFFF5		bra	readUartStatus

;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
;

clearScreen:
0000002d	20441000		add	sar,sar,ONE	; make room for the return address that was stored
0000002e	A0408000		pss	r8			; save r8 on stack
0000002f	A0409000		pss	r9			; save r9 
00000030	20500000		add par,r0,r0	; start of screen character memory
00000031	20800000		add r8,r0,r0	; clear the character
00000032	40800020		lil	r8,0x0020	; fill with spaces
00000033	20900000		add r9,r0,r0	; screen count
00000034	409007FE		lil r9,0x7FE	; loopCount	(1K minus 1)
looper:
00000035	81508000		spb r8			; put the character to the screen
00000036	20551000		add	par,par,r1	; Increment screen pointer
00000037	20992000		add r9,r9,r2	; decrement character counter
00000038	D2FFFFFD		bne	looper		; loop until complete
00000039	A1904000		pus	r9			; pull r9 off stack
0000003a	A1804000		pus	r8			; pull r8 off stack
0000003b	20442000		add	sar,sar,MINUS1
0000003c	A3A04000		lss	r10			; get the return address off the stack
0000003d	20AA1000		add	r10,r10,r1	; skip the call
0000003e	207A1000		add	r7,r10,r1	; jump to the next address (rts)

;
; putChar - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putChar:
0000003f	81508000		spb	r8			; write character to peripheral bus
00000040	20551000		add	par,par,r1	; Go to the next character position	
00000041	A3A04000		lss	r10			; load calling address
00000042	20AA1000		add	r10,r10,r1	; inc by 1 to skip the call
00000043	207A1000		add	r7,r10,r1	; jump to the next address (rts)
	