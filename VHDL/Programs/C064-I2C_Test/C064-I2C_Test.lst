prompt:			.string "R32V2020> "
i2c_addr_wr:	.byte 0x40
i2c_addr_rd:	.byte 0x41
i2c_reg_addr:	.byte 0x00
i2c_wr_val:		.byte 0x00

;
; main
; Read UART character and put it to the ANSI VGA Display
;

main:
00000000	D4000094		bsr		clearScreen
00000001	42800000		lix		r8,prompt.lower
00000002	D4000073		bsr		printString
00000003	D400000B		bsr		initDir_I2CIO8
loopMain:
00000004	42800055		lix		r8,0x055
00000005	D4000024		bsr		writeI2CAdrDat_MCP23008
00000006	428001F4		lix		r8,500
00000007	D40000CE		bsr		delay_mS
00000008	428000AA		lix		r8,0xAA
00000009	D4000020		bsr		writeI2CAdrDat_MCP23008
0000000a	428001F4		lix		r8,500
0000000b	D40000CA		bsr		delay_mS
0000000c	C0FFFFF8		bra		loopMain
	
loopForever:
0000000d	C0000000		bra		loopForever
	
;
; initDir_I2CIO8 - Set IO Dir
;

initDir_I2CIO8:
0000000e	A0408000		push	r8
	; Write 0x22 to IOCON register (not sequential operations)
0000000f	42800001		lix		r8,0x01		; START
00000010	D400002F		bsr		write_I2C_Ctrl_Reg
00000011	42800040		lix		r8,0x40		; I2C Slave address
00000012	D4000025		bsr		write_I2C_Data_Address_Reg
00000013	42800000		lix		r8,0x00		; IDLE
00000014	D400002B		bsr		write_I2C_Ctrl_Reg
00000015	42800005		lix		r8,0x05		; IO control register
00000016	D4000021		bsr		write_I2C_Data_Address_Reg
00000017	42800003		lix		r8,0x03		; STOP
00000018	D4000027		bsr		write_I2C_Ctrl_Reg	
00000019	42800022		lix		r8,0x22		; Disable sequential operation
0000001a	D400001D		bsr		write_I2C_Data_Address_Reg
	; Write 0xF0 to Direction Control register
0000001b	42800001		lix		r8,0x01		; START
0000001c	D4000023		bsr		write_I2C_Ctrl_Reg
0000001d	42800040		lix		r8,0x40
0000001e	D4000019		bsr		write_I2C_Data_Address_Reg
0000001f	42800000		lix		r8,0x00		; IDLE
00000020	D400001F		bsr		write_I2C_Ctrl_Reg
00000021	42800000		lix		r8,0x00		; direction control register
00000022	D4000015		bsr		write_I2C_Data_Address_Reg
00000023	42800003		lix		r8,0x03		; STOP
00000024	D400001B		bsr		write_I2C_Ctrl_Reg
00000025	428000F0		lix		r8,0xF0		; Input and output bits
00000026	D4000011		bsr		write_I2C_Data_Address_Reg
00000027	A1804000		pull	r8
00000028	A1704000		pull	PC

; writeI2CAdrDat_MCP23008 - Write address to the I2C bus
; Address 0x5800 -> DATA (write/read) or SLAVE ADDRESS (write)  
; Address 0x5801 -> Command/Status Register (write/read)
; r8 is the value to write

writeI2CAdrDat_MCP23008:
00000029	A0408000		push	r8
0000002a	42800001		lix		r8,0x01		; START
0000002b	D4000014		bsr		write_I2C_Ctrl_Reg
0000002c	42800040		lix		r8,0x40
0000002d	D400000A		bsr		write_I2C_Data_Address_Reg
0000002e	42800000		lix		r8,0x00		; nSTART
0000002f	D4000010		bsr		write_I2C_Ctrl_Reg	
00000030	4280000A		lix		r8,0x0A		; GPIO register address
00000031	D4000006		bsr		write_I2C_Data_Address_Reg
00000032	42800003		lix		r8,0x03		; IDLE
00000033	D400000C		bsr		write_I2C_Ctrl_Reg	
00000034	A1804000		pull	r8
00000035	D4000002		bsr		write_I2C_Data_Address_Reg
00000036	A1704000		pull	PC
	
;
; write_I2C_Data_Address_Reg
;

write_I2C_Data_Address_Reg:
00000037	A0405000		push	PAR
00000038	42505800		lix		PAR,0x5800	; I2C Address/Data register
00000039	85508000		spl		r8			; Write control register
0000003a	D400000A		bsr		i2c_ack
0000003b	42800014		lix		r8,20
0000003c	D40000A4		bsr		delay_uS
0000003d	A1504000		pull	PAR
0000003e	A1704000		pull	PC

;
; write_I2C_Ctrl_Reg
; Command Register (write):
;	bit 7-2	= Reserved
;	bit 1-0	= 
;		00: IDLE
;		01: START
;		10: nSTART
;		11: STOP
;

write_I2C_Ctrl_Reg:
0000003f	A0405000		push	PAR
00000040	42505801		lix		PAR,0x5801	; I2C Control register
00000041	85508000		spl		r8			; Write control register
00000042	A1504000		pull	PAR
00000043	A1704000		pull	PC
;
; i2c_ack - wait for transfer to complete
; Status Register (read):
;	bit 7-2	= Reserved
;	bit 1 	= ERROR 	(I2C transaction error)
;	bit 0 	= BUSY 	(I2C bus busy)
;

i2c_ack:
00000044	A0405000		push	PAR
00000045	42505801		lix		PAR,0x5801	; Control register
i2c_ack_loop:
00000046	84805000		lpl		r8
00000047	23881000		and		r8,r8,r1	; busy bit is least significant bit
00000048	C4FFFFFE		be1		i2c_ack_loop
00000049	A1504000		pull	PAR
0000004a	A1704000		pull	PC
	
; readI2CData - Read I2C data into r8

readI2CData:
0000004b	A0405000		push	PAR
0000004c	42505800		lix		PAR,0x5800	; I2C Address
0000004d	84805000		lpl		r8
0000004e	A1504000		pull	PAR
0000004f	A1704000		pull	PC
	
; readI2CStatus - Read I2C status into r8
; Command/Status Register (write/read)
; Command/Status Register (read):
;	bit 7-2	= Reserved
;	bit 1 	= ERROR (I2C transaction error)
;	bit 0 	= BUSY  (I2C bus busy)

readI2CStatus:
00000050	A0405000		push	PAR
00000051	42505801		lix		PAR,0x5801	; I2C Command Status Address
00000052	84805000		lpl		r8
00000053	A1504000		pull	PAR
00000054	A1704000		pull	PC
	
; writeI2CCommand - write data from r8 to the I2C command register
; Write to the command register before writing to the data register
; Command/Status Register (write):
; 	bit 7-2	= Reserved
;	bit 1-0	= Mode
;		00: IDLE; 
;		01: START
;		10: nSTART
;		11: STOP

writeI2CCommand:
00000055	A0405000		push	PAR
00000056	42505801		lix		PAR,0x5801	; I2C Command Status Address
00000057	85508000		spl		r8
00000058	A1504000		pull	PAR
00000059	A1704000		pull	PC
	
;
; readUartStatus
;
	
readUartStatus:
0000005a	D4000004		bsr		waitGetCharFromUART
putCharToANSIScreenAndUART:
0000005b	D4000044		bsr		putCharToANSIScreen	; put the character to the screen
0000005c	D400000B		bsr		putCharToUART
0000005d	C0FFFFFD		bra		readUartStatus

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
0000005e	A0405000		push	PAR
0000005f	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
00000060	84805000		lpl		r8			; Read Status into r8
00000061	23881000		and 	r8,r8,ONE
00000062	C3FFFFFE		bez 	waitUartRxStat
00000063	42501801		lix 	PAR,0x1801
00000064	84805000		lpl		r8
00000065	A1504000		pull	PAR
00000066	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
00000067	A0409000		push	r9
00000068	A0405000		push	PAR
00000069	A040A000		push	r10
0000006a	42A00002		lix		r10,0x2
0000006b	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
0000006c	84905000		lpl		r9			; Read Status into r9
0000006d	2399A000		and 	r9,r9,r10
0000006e	C3FFFFFE		bez 	waitUartTxStat
0000006f	42501801		lix 	PAR,0x1801
00000070	85508000		spl		r8			; echo the character
00000071	A1A04000		pull	r10
00000072	A1504000		pull	PAR
00000073	A1904000		pull	r9
00000074	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
00000075	A0408000		push	r8				; save r8
00000076	A0409000		push	r9				; save r9
00000077	A0406000		push	DAR
00000078	20680000		add		DAR,r8,ZERO		; set the start of the string
nextLong:
00000079	64806000		ldl		r8				; get the string
0000007a	31808000		ens		r8,r8			; swap the endian
0000007b	429000FF		lix		r9,0xff			; mask for null termination check
0000007c	23998000		and		r9,r9,r8
0000007d	C3000013		bez		donePrStr
0000007e	D4000021		bsr		putCharToANSIScreen	; write out the character
0000007f	28808000		sr8		r8,r8
00000080	429000FF		lix		r9,0xff			; mask for null termination check
00000081	23998000		and		r9,r9,r8
00000082	C300000E		bez		donePrStr
00000083	D400001C		bsr		putCharToANSIScreen	; write out the character
00000084	28808000		sr8		r8,r8
00000085	429000FF		lix		r9,0xff			; mask for null termination check
00000086	23998000		and		r9,r9,r8
00000087	C3000009		bez		donePrStr
00000088	D4000017		bsr		putCharToANSIScreen	; write out the character
00000089	28808000		sr8		r8,r8
0000008a	429000FF		lix		r9,0xff			; mask for null termination check
0000008b	23998000		and		r9,r9,r8
0000008c	C3000004		bez		donePrStr
0000008d	D4000012		bsr		putCharToANSIScreen	; write out the character
lastOfLong:
0000008e	20661000		add		DAR,DAR,ONE
0000008f	C0FFFFEA		bra		nextLong
donePrStr:
00000090	A1604000		pull	DAR				; restore DAR
00000091	A1904000		pull	r9				; restore r9
00000092	A1804000		pull	r8				; restore r8
00000093	A1704000		pull	PC				; rts
	
;
; clearScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen:
00000094	A0408000		push	r8				; save r8
00000095	4280001B		lix		r8,0x1b			; ESC
00000096	D4000009		bsr		putCharToANSIScreen
00000097	4280005B		lix		r8,0x5b			; [
00000098	D4000007		bsr		putCharToANSIScreen
00000099	42800032		lix		r8,0x32			; 2
0000009a	D4000005		bsr		putCharToANSIScreen
0000009b	4280004A		lix		r8,0x4A			; J
0000009c	D4000003		bsr		putCharToANSIScreen
0000009d	A1804000		pull	r8
0000009e	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToANSIScreen:
0000009f	A0409000		push	r9
000000a0	A0405000		push	PAR
000000a1	A040A000		push	r10
000000a2	42A00002		lix		r10,0x2		; TxReady bit
000000a3	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
000000a4	84905000		lpl		r9			; Read Status into r9
000000a5	2399A000		and 	r9,r9,r10
000000a6	C3FFFFFE		bez 	waitScreenTxStat
000000a7	42500001		lix 	PAR,0x1
000000a8	85508000		spl		r8			; echo the character
000000a9	A1A04000		pull	r10
000000aa	A1504000		pull	PAR
000000ab	A1904000		pull	r9
000000ac	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
000000ad	A0408000		push	r8
000000ae	42800000		lix		r8,0			; first note is 0
000000af	D4000007		bsr 	setNote
000000b0	D400000D		bsr		enableBuzzer
000000b1	428000FA		lix		r8,250			; count for 1 Sec
000000b2	D4000023		bsr		delay_mS		; call delay_ms
000000b3	D4000016		bsr		disableBuzzer
000000b4	A1804000		pull	r8
000000b5	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
000000b6	A0408000		push	r8
000000b7	A0405000		push	PAR
000000b8	42504000		lix		PAR,0x4000
000000b9	85508000		spl		r8
000000ba	A1504000		pull	PAR
000000bb	A1804000		pull	r8
000000bc	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
000000bd	A0409000		push	r9
000000be	A0408000		push	r8
000000bf	A0405000		push	PAR
000000c0	42900010		lix		r9,0x0010		; Buzzer Enable line
000000c1	42502800		lix		PAR,0x2800
000000c2	84805000		lpl		r8
000000c3	22889000		or		r8,r8,r9
000000c4	85508000		spl		r8
000000c5	A1504000		pull	PAR
000000c6	A1804000		pull	r8
000000c7	A1904000		pull	r9
000000c8	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
000000c9	A0409000		push	r9
000000ca	A0408000		push	r8
000000cb	A0405000		push	PAR
000000cc	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
000000cd	42502800		lix		PAR,0x2800
000000ce	84805000		lpl		r8
000000cf	23889000		and		r8,r8,r9
000000d0	85508000		spl		r8
000000d1	A1504000		pull	PAR
000000d2	A1804000		pull	r8
000000d3	A1904000		pull	r9
000000d4	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
000000d5	A0409000		push	r9
000000d6	A0405000		push	PAR
000000d7	42503802		lix		PAR,0x3802		; address of the mSec counter
000000d8	84905000		lpl		r9				; read the peripheral counter into r9
000000d9	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000da	84905000		lpl		r9				; check the elapsed time counter
000000db	30389000		cmp		r8,r9
000000dc	CCFFFFFE		blt		loop_delay_mS
000000dd	A1504000		pull	PAR
000000de	A1904000		pull	r9
000000df	A1704000		pull	PC

;	
; delay_uS - delay for the number of uSecs
; pass mSec delay in r8
; Uses routine uses r9 (saved and restored)
;

delay_uS:
000000e0	A0409000		push	r9
000000e1	A0405000		push	PAR
000000e2	42503801		lix		PAR,0x3801		; address of the uSec counter
000000e3	84905000		lpl		r9				; read the peripheral counter into r9
000000e4	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_uS:
000000e5	84905000		lpl		r9				; check the elapsed time counter
000000e6	30389000		cmp		r8,r9
000000e7	CCFFFFFE		blt		loop_delay_uS
000000e8	A1504000		pull	PAR
000000e9	A1904000		pull	r9
000000ea	A1704000		pull	PC
