hello:	.string "R32V2020> "
screenPtr:	.long 0x0000
screenBase:	.long 0x0

;
; Read UART character and put it to the XVGA Display
;

main:
00000000	D4000042		bsr		clearScreen
00000001	42800000		lix		r8,0x0			; Move cursor to home position
00000002	D4000077		bsr		setCharPos
readDataMemory:
00000003	41800000		liu		r8,hello.upper
00000004	40800000		lil		r8,hello.lower
00000005	D400001E		bsr		printString
readUartStatus:
00000006	D4000004		bsr		getCharFromUART
putCharToScreenAndUART:
00000007	D4000047		bsr		putCharToScreen	; put the character to the screen
00000008	D400000D		bsr		putCharToUART
00000009	C0FFFFFD		bra		readUartStatus

;
; getCharFromUART
; returns character received in r8
;

getCharFromUART:
0000000a	A0409000		push	r9
0000000b	A0405000		push	PAR
0000000c	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
0000000d	84905000		lpl		r9			; Read Status into r9
0000000e	23991000		and 	r9,r9,ONE
0000000f	C3FFFFFE		bez 	waitUartRxStat
getCharFromUart:
00000010	42501801		lix 	PAR,0x1801
00000011	84805000		lpl		r8
00000012	A1504000		pull	PAR
00000013	A1904000		pull	r9
00000014	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
00000015	A0409000		push	r9
00000016	A0405000		push	PAR
00000017	A040A000		push	r10
00000018	42A00002		lix		r10,0x2
00000019	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
0000001a	84905000		lpl		r9			; Read Status into r9
0000001b	2399A000		and 	r9,r9,r10
0000001c	C3FFFFFE		bez 	waitUartTxStat
0000001d	42501801		lix 	PAR,0x1801
0000001e	85508000		spl		r8			; echo the character
0000001f	A1A04000		pull	r10
00000020	A1504000		pull	PAR
00000021	A1904000		pull	r9
00000022	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string
; strings are null terminated
; strings are bytes packed into long words
;

printString:
00000023	A0408000		push	r8				; save r8
00000024	A0409000		push	r9				; save r9
00000025	A0406000		push	DAR
00000026	20680000		add		DAR,r8,ZERO		; set the start of the string
nextLong:
00000027	64806000		ldl		r8				; get the string
00000028	31808000		ens		r8,r8			; swap the endian
00000029	429000FF		lix		r9,0xff			; mask for null termination check
0000002a	23998000		and		r9,r9,r8
0000002b	C3000013		bez		donePrStr
0000002c	D4000022		bsr		putCharToScreen	; write out the character
0000002d	28808000		sr8		r8,r8
0000002e	429000FF		lix		r9,0xff			; mask for null termination check
0000002f	23998000		and		r9,r9,r8
00000030	C300000E		bez		donePrStr
00000031	D400001D		bsr		putCharToScreen	; write out the character
00000032	28808000		sr8		r8,r8
00000033	429000FF		lix		r9,0xff			; mask for null termination check
00000034	23998000		and		r9,r9,r8
00000035	C3000009		bez		donePrStr
00000036	D4000018		bsr		putCharToScreen	; write out the character
00000037	28808000		sr8		r8,r8
00000038	429000FF		lix		r9,0xff			; mask for null termination check
00000039	23998000		and		r9,r9,r8
0000003a	C3000004		bez		donePrStr
0000003b	D4000013		bsr		putCharToScreen	; write out the character
lastOfLong:
0000003c	20661000		add		DAR,DAR,ONE
0000003d	C0FFFFEA		bra		nextLong
donePrStr:
0000003e	A1604000		pull	DAR				; restore DAR
0000003f	A1904000		pull	r9				; restore r9
00000040	A1804000		pull	r8				; restore r8
00000041	A1704000		pull	PC				; rts
	
;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
;

clearScreen:
00000042	A0409000		push	r9				; save r9
00000043	A0408000		push	r8				; save r8
00000044	42800000		lix		r8,0x0			; set screen position to home
00000045	D4000034		bsr	setCharPos
00000046	42800020		lix		r8,0x0020		; fill with spaces
00000047	429007FE		lix 	r9,0x7FE		; loopCount	(1K minus 1)
looper:
00000048	D4000006		bsr		putCharToScreen
00000049	20992000		add 	r9,r9,MINUS1	; decrement character counter
0000004a	D2FFFFFE		bne		looper			; loop until complete
0000004b	A1804000		pull	r8
0000004c	A1904000		pull	r9
0000004d	A1704000		pull	PC				; rts

;
; putCharToScreen - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToScreen:
0000004e	A040B000		push	r11					; save r11
0000004f	A040A000		push	r10					; save r10
00000050	A0409000		push	r9					; save r9
00000051	A0406000		push	DAR
00000052	A0405000		push	PAR
00000053	42900003		lix		r9,screenPtr.lower	; r9 is the ptr to screenPtr
00000054	20690000		add		DAR,r9,ZERO			; DAR points to screenPtr
00000055	64A06000		ldl		r10					; r10 has screenPtr value
; look for specific characters
00000056	40B0007F		lil		r11,0x7F			; RUBOUT key
00000057	3038B000		cmp		r8,r11
00000058	D100000C		beq		gotBS
00000059	40B000E0		lil		r11,0xe0			; 0x0-0x1f are ctrl chars
0000005a	23BB8000		and		r11,r11,r8
0000005b	C7000014		bnz		notCtlChar
	
0000005c	40B0000D		lil		r11,0x0d			; CR
0000005d	3038B000		cmp		r8,r11
0000005e	D100000B		beq		gotCR
	
0000005f	40B00007		lil		r11,0x07			; BELL
00000060	3038B000		cmp		r8,r11
00000061	D2000011		bne		skipPrintChar
00000062	D4000025		bsr		makeBuzz

00000063	C000000F		bra		skipPrintChar
gotBS:
00000064	20AA2000		add		r10,r10,MINUS1
00000065	205A0000		add		PAR,r10,ZERO
00000066	40800020		lil		r8,0x20
00000067	81508000		spb		r8
00000068	C000000A		bra		skipPrintChar
gotCR:
00000069	40B0FFC0		lil		r11,0xffc0			; Go to the start of the line
0000006a	23AAB000		and		r10,r10,r11
0000006b	40B00040		lil		r11,0x40			; Go down a line
0000006c	20AAB000		add		r10,r10,r11
0000006d	205A1000		add		PAR,r10,ONE			; Set PAR to screenPtr
0000006e	C0000004		bra		skipPrintChar
notCtlChar:
0000006f	205A0000		add		PAR,r10,ZERO		; Set PAR to screenPtr
00000070	81508000		spb		r8					; write character to screen
00000071	20AA1000		add		r10,r10,ONE			; increment screen pointer
skipPrintChar:
00000072	6560A000		sdl		r10					; save new pointer
00000073	A1504000		pull 	PAR					; restore PAR
00000074	A1604000		pull 	DAR					; restore DAR
00000075	A1904000		pull 	r9					; restore r9
00000076	A1A04000		pull 	r10					; restore r10
00000077	A1B04000		pull 	r11					; restore r11
00000078	A1704000		pull	PC					; rts

;
; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; screenBase has the base address of the screen memory
; screenPtr contains the address of the current char position
;

setCharPos:
00000079	A0409000		push	r9						; save r9
0000007a	A040A000		push	r10						; save r10
0000007b	A0406000		push	DAR						; save DAR
0000007c	42A00004		lix		r10,screenBase.lower
0000007d	206A0000		add		DAR,r10,ZERO			; DAR points to the screenBase
0000007e	64A06000		ldl		r10						; r10 has the screen base address
0000007f	20A80000		add		r10,r8,ZERO				; add passed position to base
00000080	42900003		lix		r9,screenPtr.lower		; r9 is the ptr to screenPtr
00000081	20690000		add		DAR,r9,ZERO				; DAR points to screenPtr
00000082	6560A000		sdl		r10						; store new screen address
00000083	A1604000		pull	DAR						; restore DAR
00000084	A1A04000		pull	r10						; restore r10
00000085	A1904000		pull	r9						; restore r9
00000086	A1704000		pull	PC						; rts

makeBuzz:
00000087	A0408000		push	r8
00000088	42800000		lix		r8,0			; first note is 0
00000089	D4000007		bsr 	setNote
0000008a	D400000D		bsr		enableBuzzer
0000008b	428000FA		lix		r8,250			; count for 1 Sec
0000008c	D4000023		bsr		delay_mS		; call delay_ms
0000008d	D4000016		bsr		disableBuzzer
0000008e	A1804000		pull	r8
0000008f	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
00000090	A0408000		push	r8
00000091	A0405000		push	PAR
00000092	42504000		lix		PAR,0x4000
00000093	85508000		spl		r8
00000094	A1504000		pull	PAR
00000095	A1804000		pull	r8
00000096	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
00000097	A0409000		push	r9
00000098	A0408000		push	r8
00000099	A0405000		push	PAR
0000009a	42900010		lix		r9,0x0010		; Buzzer Enable line
0000009b	42502800		lix		PAR,0x2800
0000009c	84805000		lpl		r8
0000009d	22889000		or		r8,r8,r9
0000009e	85508000		spl		r8
0000009f	A1504000		pull	PAR
000000a0	A1804000		pull	r8
000000a1	A1904000		pull	r9
000000a2	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
000000a3	A0409000		push	r9
000000a4	A0408000		push	r8
000000a5	A0405000		push	PAR
000000a6	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
000000a7	42502800		lix		PAR,0x2800
000000a8	84805000		lpl		r8
000000a9	23889000		and		r8,r8,r9
000000aa	85508000		spl		r8
000000ab	A1504000		pull	PAR
000000ac	A1804000		pull	r8
000000ad	A1904000		pull	r9
000000ae	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Uses routine uses r9

delay_mS:
000000af	A0409000		push	r9
000000b0	42503802		lix		PAR,0x3802		; address of the mSec counter
000000b1	84905000		lpl		r9				; read the peripheral counter into r9
000000b2	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000b3	84905000		lpl		r9				; check the elapsed time counter
000000b4	30389000		cmp		r8,r9
000000b5	CCFFFFFE		blt		loop_delay_mS
000000b6	A1904000		pull	r9
000000b7	A1704000		pull	PC
