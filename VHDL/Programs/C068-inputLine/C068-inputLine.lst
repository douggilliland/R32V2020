;
; I/O Peek/Poke Code
; Read a line from the Serial Port
; Parse the line that was read
; Perform the operation that was parsed out
;
; Commands are
; 	RL 00005000 - Read a long from address 0x00005000
; 	WL 00005000,12345678 - Write a long at address 0x00005000 with value 0x12345678
;

prompt:			.string "R32V2020> "
; lineBuff is 80 characters long
lineBuff:		.string "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
syntaxError:	.string "Syntax error"

;
; Read UART character and put it to the ANSI VGA Display
;

main:
00000000	D400005E		bsr		clearScreen
00000001	42800000		lix		r8,prompt.lower
00000002	D4000050		bsr		printString
loopRead:
00000003	D400000C		bsr		getLine
00000004	42800003		lix		r8,lineBuff.lower	; DAR pointer = start of line buffer
00000005	25808000		sl1		r8,r8				; Need to shift by 2 to get true address (assembler needs fixed)
00000006	25808000		sl1		r8,r8
00000007	D400004B		bsr		printString			; Echo the line
00000008	4280000A		lix		r8,0x0A				; Line Feed
00000009	D4000064		bsr		putCharToANSIScreen	; Put the character to the screen
0000000a	4280000D		lix		r8,0x0D				; Carriage Return
0000000b	D4000062		bsr		putCharToANSIScreen	; Put the character to the screen
0000000c	D4000038		bsr		putCharToUART		; Echo character back to the UART
0000000d	D400002D		bsr		parseLine
0000000e	C0FFFFF5		bra		loopRead

;
; getLine - Reads the UART and fills a buffer with the characters received
; r8 received character - Character received from the UART
; r9 is constant - ENTER key on keyboard
; r10 is the input buffer length
; r11 is the BACK key on keyboard
; r12 used to test the backspace doesn't go past the start of the buffer
; DAR points to lineBuff current character position
;

getLine:
0000000f	A0408000		push	r8
00000010	A0409000		push	r9
00000011	A040A000		push	r10
00000012	A040B000		push	r11
00000013	A040C000		push	r12
00000014	A0406000		push	DAR
00000015	42600003		lix		DAR,lineBuff.lower	; DAR pointer = start of line buffer
00000016	25606000		sl1		DAR,DAR				; Need to shift by 2 to get true address (assembler needs fixed)
00000017	25606000		sl1		DAR,DAR				
00000018	42B0007F		lix		r11,0x7F			; BACK key - rubout
00000019	42A0004F		lix		r10,79				; number of chars in the line buffer
0000001a	4290000D		lix		r9,0x0D				; ENTER key - ends the line
loopReadLine:
0000001b	D4000020		bsr		waitGetCharFromUART	; Get a character from the UART
0000001c	D4000051		bsr		putCharToANSIScreen	; Put the character to the screen
0000001d	D4000027		bsr		putCharToUART		; Echo character back to the UART
0000001e	30389000		cmp		r8,r9				; check if received char was end of line
0000001f	D1000007		beq		gotEOL
00000020	3038B000		cmp		r8,r11
00000021	D100000A		beq		gotBackspace
00000022	61608000		sdb		r8
00000023	20661000		add		DAR,DAR,ONE			; increment to next long in buffer
00000024	20AA2000		add		r10,r10,MINUS1
00000025	C7FFFFF6		bnz		loopReadLine		; Next char would overflow
	; tbd add code for line too long	
gotEOL:
00000026	4280000A		lix		r8,0x0A				; Echo line feed after CR
00000027	D4000046		bsr		putCharToANSIScreen	; Put the character to the screen
00000028	D400001C		bsr		putCharToUART		; Echo character back to the UART
00000029	61600000		sdb		r0					; null at end of line read
0000002a	C0000009		bra		doneHandlingLine
gotBackspace:
0000002b	20662000		add		DAR,DAR,MINUS1
0000002c	42C00003		lix		r12,lineBuff.lower	; r12 pointer = start of line buffer
0000002d	25C0C000		sl1		r12,r12				; Need to shift by 2 to get true address (assembler needs fixed)
0000002e	25C0C000		sl1		r12,r12				
0000002f	303C6000		cmp		r12,DAR
00000030	CFFFFFEB		bgt		loopReadLine
00000031	206C0000		add		DAR,r12,r0
00000032	C0FFFFE9		bra		loopReadLine
doneHandlingLine:
00000033	A1604000		pull	DAR
00000034	A1C04000		pull	r12
00000035	A1B04000		pull	r11
00000036	A1A04000		pull	r10
00000037	A1904000		pull	r9
00000038	A1804000		pull	r8
00000039	A1704000		pull	PC

;
;
;
	
parseLine:
0000003a	A1704000		pull	PC
	
;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
0000003b	A0405000		push	PAR
0000003c	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
0000003d	84805000		lpl		r8			; Read Status into r8
0000003e	23881000		and 	r8,r8,ONE
0000003f	C3FFFFFE		bez 	waitUartRxStat
00000040	42501801		lix 	PAR,0x1801
00000041	84805000		lpl		r8
00000042	A1504000		pull	PAR
00000043	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
00000044	A0409000		push	r9
00000045	A0405000		push	PAR
00000046	A040A000		push	r10
00000047	42A00002		lix		r10,0x2
00000048	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
00000049	84905000		lpl		r9			; Read Status into r9
0000004a	2399A000		and 	r9,r9,r10
0000004b	C3FFFFFE		bez 	waitUartTxStat
0000004c	42501801		lix 	PAR,0x1801
0000004d	85508000		spl		r8			; echo the character
0000004e	A1A04000		pull	r10
0000004f	A1504000		pull	PAR
00000050	A1904000		pull	r9
00000051	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
00000052	A0408000		push	r8				; save r8
00000053	A0406000		push	DAR
00000054	20680000		add		DAR,r8,ZERO		; set the start of the string
nextChar:
00000055	60806000		ldb		r8				; get the character
00000056	30380000		cmp		r8,ZERO			; Null terminated string
00000057	D1000004		beq		donePrStr		; done if null
00000058	D4000015		bsr		putCharToANSIScreen	; write out the character
00000059	20661000		add		DAR,DAR,r1		; Point to next character
0000005a	C0FFFFFB		bra		nextChar
donePrStr:
0000005b	A1604000		pull	DAR				; restore DAR
0000005c	A1804000		pull	r8				; restore r8
0000005d	A1704000		pull	PC				; rts
	
;
; clearScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen:
0000005e	A0408000		push	r8				; save r8
0000005f	4280001B		lix		r8,0x1b			; ESC
00000060	D400000D		bsr		putCharToANSIScreen
00000061	D4FFFFE3		bsr		putCharToUART
00000062	4280005B		lix		r8,0x5b			; [
00000063	D400000A		bsr		putCharToANSIScreen
00000064	D4FFFFE0		bsr		putCharToUART
00000065	42800032		lix		r8,0x32			; 2
00000066	D4000007		bsr		putCharToANSIScreen
00000067	D4FFFFDD		bsr		putCharToUART
00000068	4280004A		lix		r8,0x4A			; J
00000069	D4000004		bsr		putCharToANSIScreen
0000006a	D4FFFFDA		bsr		putCharToUART
0000006b	A1804000		pull	r8
0000006c	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
0000006d	A0409000		push	r9
0000006e	A0405000		push	PAR
0000006f	A040A000		push	r10
00000070	42A00002		lix		r10,0x2		; TxReady bit
00000071	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
00000072	84905000		lpl		r9			; Read Status into r9
00000073	2399A000		and 	r9,r9,r10
00000074	C3FFFFFE		bez 	waitScreenTxStat
00000075	42500001		lix 	PAR,0x1
00000076	85508000		spl		r8			; echo the character
00000077	A1A04000		pull	r10
00000078	A1504000		pull	PAR
00000079	A1904000		pull	r9
0000007a	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
0000007b	A0408000		push	r8
0000007c	42800000		lix		r8,0			; first note is 0
0000007d	D4000007		bsr 	setNote
0000007e	D400000D		bsr		enableBuzzer
0000007f	428000FA		lix		r8,250			; count for 1 Sec
00000080	D4000023		bsr		delay_mS		; call delay_ms
00000081	D4000016		bsr		disableBuzzer
00000082	A1804000		pull	r8
00000083	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
00000084	A0408000		push	r8
00000085	A0405000		push	PAR
00000086	42504000		lix		PAR,0x4000
00000087	85508000		spl		r8
00000088	A1504000		pull	PAR
00000089	A1804000		pull	r8
0000008a	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
0000008b	A0409000		push	r9
0000008c	A0408000		push	r8
0000008d	A0405000		push	PAR
0000008e	42900010		lix		r9,0x0010		; Buzzer Enable line
0000008f	42502800		lix		PAR,0x2800
00000090	84805000		lpl		r8
00000091	22889000		or		r8,r8,r9
00000092	85508000		spl		r8
00000093	A1504000		pull	PAR
00000094	A1804000		pull	r8
00000095	A1904000		pull	r9
00000096	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
00000097	A0409000		push	r9
00000098	A0408000		push	r8
00000099	A0405000		push	PAR
0000009a	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
0000009b	42502800		lix		PAR,0x2800
0000009c	84805000		lpl		r8
0000009d	23889000		and		r8,r8,r9
0000009e	85508000		spl		r8
0000009f	A1504000		pull	PAR
000000a0	A1804000		pull	r8
000000a1	A1904000		pull	r9
000000a2	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
000000a3	A0409000		push	r9
000000a4	42503802		lix		PAR,0x3802		; address of the mSec counter
000000a5	84905000		lpl		r9				; read the peripheral counter into r9
000000a6	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000a7	84905000		lpl		r9				; check the elapsed time counter
000000a8	30389000		cmp		r8,r9
000000a9	CCFFFFFE		blt		loop_delay_mS
000000aa	A1904000		pull	r9
000000ab	A1704000		pull	PC

; wr7Seg8Dig
; passed r8 - value to send to the 7 seg display

wr7Seg8Dig:
000000ac	A0405000		push	PAR
000000ad	42503000		lix		PAR,0x3000		; Seven Segment LED lines
000000ae	85508000		spl		r8				; Write out LED bits
000000af	A1504000		pull	PAR
000000b0	A1704000		pull	PC
