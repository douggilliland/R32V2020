; Read PS/2 keyboard character and put it to the Screen
; Requires V002 build with ANSI screen support
hello:	.string "R32V2020> "
screenPtr:	.long 0x0000
screenBase:	.long 0x0

;
; Read PS/2 character and put it to the SVGA Display
;

main:
00000000	D4000045		bsr	clearANSIScreen
readDataMemory:
00000001	42800000		lix	r8,hello.lower
00000002	D4000024		bsr	printString
loopPS2Read_ScreenWrite:
00000003	D4000004		bsr	getPS2Char
putCharToANSIScreen:
00000004	D400004C		bsr	putCharToANSIScreen	; put the character to the screen
00000005	D4000011		bsr	putUARTChar
00000006	C0FFFFFD		bra	loopPS2Read_ScreenWrite

;
; getPS2Char
; returns character received in r8
;

getPS2Char:
00000007	A0409000		push	r9
00000008	A0405000		push	PAR
00000009	41500000		liu	PAR,0x0000
0000000a	40501000		lil	PAR,0x1000	; PS/2 Status
waitPS2RxStat:
0000000b	84905000		lpl	r9			; Read Status into r9
0000000c	23991000		and r9,r9,r1
0000000d	C3FFFFFE		bez waitPS2RxStat
getCharFromPS2:
0000000e	41500000		liu	PAR,0x0000
0000000f	40500800		lil PAR,0x0800
00000010	84805000		lpl	r8
00000011	41500000		liu	PAR,0x0000
00000012	40501000		lil	PAR,0x1000	; PS/2 Status
whilePS2RxStat:
00000013	A1504000		pull	PAR
00000014	A1904000		pull	r9
00000015	A1704000		pull	PC

;
; putUARTChar - Put a character to the UART
; passed character in r8 is sent out the UART
;

putUARTChar:
00000016	A0408000		push	r8
00000017	A0409000		push	r9
00000018	A040A000		push	r10
00000019	A0405000		push	PAR
0000001a	40A00002		lil	r10,0x2
0000001b	40501800		lil	PAR,0x1800	; UART Status
waitUartTxStat:
0000001c	84905000		lpl	r9			; Read Status into r9
0000001d	2399A000		and r9,r9,r10
0000001e	C3FFFFFE		bez waitUartTxStat
0000001f	40501801		lil PAR,0x1801
00000020	85508000		spl	r8			; echo the character
00000021	A1504000		pull	PAR
00000022	A1A04000		pull	r10
00000023	A1904000		pull	r9
00000024	A1804000		pull	r8
00000025	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string
; strings are null terminated
; strings are bytes packed into long words
;

printString:
00000026	A0408000		push	r8				; save r8
00000027	A0409000		push	r9				; save r9
00000028	A0406000		push	DAR
00000029	20680000		add	DAR,r8,ZERO		; set the start of the string
nextLong:
0000002a	64806000		ldl	r8				; get the string
0000002b	31808000		ens	r8,r8			; swap the endian
0000002c	429000FF		lix	r9,0xff			; mask for null termination check
0000002d	23998000		and	r9,r9,r8
0000002e	C3000013		bez	donePrStr
0000002f	D4000021		bsr	putCharToANSIScreen			; write out the character
00000030	28808000		sr8	r8,r8
00000031	429000FF		lix	r9,0xff			; mask for null termination check
00000032	23998000		and	r9,r9,r8
00000033	C300000E		bez	donePrStr
00000034	D400001C		bsr	putCharToANSIScreen			; write out the character
00000035	28808000		sr8	r8,r8
00000036	429000FF		lix	r9,0xff			; mask for null termination check
00000037	23998000		and	r9,r9,r8
00000038	C3000009		bez	donePrStr
00000039	D4000017		bsr	putCharToANSIScreen			; write out the character
0000003a	28808000		sr8	r8,r8
0000003b	429000FF		lix	r9,0xff			; mask for null termination check
0000003c	23998000		and	r9,r9,r8
0000003d	C3000004		bez	donePrStr
0000003e	D4000012		bsr	putCharToANSIScreen			; write out the character
lastOfLong:
0000003f	20661000		add	DAR,DAR,ONE
00000040	C0FFFFEA		bra	nextLong
donePrStr:
00000041	A1604000		pull	DAR				; restore DAR
00000042	A1904000		pull	r9				; restore r9
00000043	A1804000		pull	r8				; restore r8
00000044	A1704000		pull	PC				; rts
	
;
; clearANSIScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearANSIScreen:
00000045	A0408000		push	r8				; save r8
00000046	4280001B		lix		r8,0x1b			; ESC
00000047	D4000009		bsr		putCharToANSIScreen
00000048	4280005B		lix		r8,0x5b			; [
00000049	D4000007		bsr		putCharToANSIScreen
0000004a	42800032		lix		r8,0x32			; 2
0000004b	D4000005		bsr		putCharToANSIScreen
0000004c	4280004A		lix		r8,0x4A			; J
0000004d	D4000003		bsr		putCharToANSIScreen
0000004e	A1804000		pull	r8
0000004f	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToANSIScreen:
00000050	A0409000		push	r9
00000051	A0405000		push	PAR
00000052	A040A000		push	r10
00000053	42A00002		lix		r10,0x2		; TxReady bit
00000054	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
00000055	84905000		lpl		r9			; Read Status into r9
00000056	2399A000		and 	r9,r9,r10
00000057	C3FFFFFE		bez 	waitScreenTxStat
00000058	42500001		lix 	PAR,0x1
00000059	85508000		spl		r8			; echo the character
0000005a	A1A04000		pull	r10
0000005b	A1504000		pull	PAR
0000005c	A1904000		pull	r9
0000005d	A1704000		pull	PC
	
;
; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; screenBase has the base address of the screen memory
; screenPtr contains the address of the current char position
;

setCharPos:
0000005e	A0409000		push	r9						; save r9
0000005f	A040A000		push	r10						; save r10
00000060	A0406000		push	DAR						; save DAR
00000061	41A00000		liu	r10,screenBase.upper
00000062	40A00004		lil	r10,screenBase.lower
00000063	206A0000		add	DAR,r10,ZERO			; DAR points to the screenBase
00000064	64A06000		ldl	r10						; r10 has the screen base address
00000065	20A80000		add	r10,r8,ZERO				; add passed position to base
00000066	41900000		liu	r9,screenPtr.upper
00000067	40900003		lil	r9,screenPtr.lower		; r9 is the ptr to screenPtr
00000068	20690000		add	DAR,r9,ZERO				; DAR points to screenPtr
00000069	6560A000		sdl	r10						; store new screen address
0000006a	A1604000		pull DAR						; restore DAR
0000006b	A1A04000		pull r10						; restore r10
0000006c	A1904000		pull r9						; restore r9
0000006d	A1704000		pull	PC						; rts
