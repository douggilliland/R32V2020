hello:	.string "R32V2020> "
screenPtr:	.long 0x0000
screenBase:	.long 0x0

;
; Read UART character and put it to the SVGA Display
;

main:
00000000	D4000044		bsr	clearScreen
00000001	42800080		lix	r8,128			; Move cursor to home position
00000002	D400005E		bsr	setCharPos
readDataMemory:
00000003	42800000		lix	r8,hello.lower
00000004	D4000021		bsr	printString
;readUartStatus:
;	bsr	getUARTChar
;putCharToScreen:
;	bsr	putChar		; put the character to the screen
00000005	42500080		lix	PAR,128
00000006	84805000		lpl	r8
00000007	D4000010		bsr	putUARTChar
00000008	42500081		lix	PAR,129
00000009	84805000		lpl	r8
0000000a	D400000D		bsr	putUARTChar
loopPosition:
0000000b	C0000000		bra	loopPosition

;
; getUARTChar
; returns character received in r8
;

getUARTChar:
0000000c	A0409000		pss	r9
0000000d	A0405000		pss	PAR
0000000e	42501800		lix	PAR,0x1800	; UART Status
waitUartRxStat:
0000000f	84905000		lpl	r9			; Read Status into r9
00000010	23991000		and r9,r9,ONE
00000011	C3FFFFFE		bez waitUartRxStat
getCharFromUart:
00000012	42501801		lix PAR,0x1801
00000013	84805000		lpl	r8
00000014	A1504000		pus	PAR
00000015	A1904000		pus	r9
00000016	A1704000		pus	PC

;
; putUARTChar - Put a character to the UART
; passed character in r8 is sent out the UART
;

putUARTChar:
00000017	A0409000		pss	r9
00000018	A0405000		pss	PAR
00000019	A040A000		pss	r10
0000001a	42A00002		lix	r10,0x2
0000001b	42501800		lix	PAR,0x1800	; UART Status
waitUartTxStat:
0000001c	84905000		lpl	r9			; Read Status into r9
0000001d	2399A000		and r9,r9,r10
0000001e	C3FFFFFE		bez waitUartTxStat
0000001f	42501801		lix PAR,0x1801
00000020	85508000		spl	r8			; echo the character
00000021	A1A04000		pus	r10
00000022	A1504000		pus	PAR
00000023	A1904000		pus	r9
00000024	A1704000		pus	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string
; strings are null terminated
; strings are bytes packed into long words
;

printString:
00000025	A0408000		pss	r8				; save r8
00000026	A0409000		pss	r9				; save r9
00000027	A0406000		pss	DAR
00000028	20680000		add	DAR,r8,ZERO		; set the start of the string
nextLong:
00000029	64806000		ldl	r8				; get the string
0000002a	31808000		ens	r8,r8			; swap the endian
0000002b	429000FF		lix	r9,0xff			; mask for null termination check
0000002c	23998000		and	r9,r9,r8
0000002d	C3000013		bez	donePrStr
0000002e	D4000022		bsr	putChar			; write out the character
0000002f	28808000		sr8	r8,r8
00000030	429000FF		lix	r9,0xff			; mask for null termination check
00000031	23998000		and	r9,r9,r8
00000032	C300000E		bez	donePrStr
00000033	D400001D		bsr	putChar			; write out the character
00000034	28808000		sr8	r8,r8
00000035	429000FF		lix	r9,0xff			; mask for null termination check
00000036	23998000		and	r9,r9,r8
00000037	C3000009		bez	donePrStr
00000038	D4000018		bsr	putChar			; write out the character
00000039	28808000		sr8	r8,r8
0000003a	429000FF		lix	r9,0xff			; mask for null termination check
0000003b	23998000		and	r9,r9,r8
0000003c	C3000004		bez	donePrStr
0000003d	D4000013		bsr	putChar			; write out the character
lastOfLong:
0000003e	20661000		add	DAR,DAR,ONE
0000003f	C0FFFFEA		bra	nextLong
donePrStr:
00000040	A1604000		pus	DAR				; restore DAR
00000041	A1904000		pus	r9				; restore r9
00000042	A1804000		pus	r8				; restore r8
00000043	A1704000		pus	PC				; rts
	
;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
;

clearScreen:
00000044	A0409000		pss	r9				; save r9
00000045	A0408000		pss	r8				; save r8
00000046	42800000		lix	r8,0x0			; set screen position to home
00000047	D4000019		bsr	setCharPos
00000048	42800020		lix	r8,0x0020		; fill with spaces
00000049	429007FE		lix r9,0x7FE		; loopCount	(1K minus 1)
looper:
0000004a	D4000006		bsr	putChar
0000004b	20992000		add r9,r9,MINUS1	; decrement character counter
0000004c	D2FFFFFE		bne	looper			; loop until complete
0000004d	A1804000		pus	r8
0000004e	A1904000		pus	r9
0000004f	A1704000		pus	PC				; rts

;
; putChar - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putChar:
00000050	A040A000		pss	r10					; save r10
00000051	A0409000		pss	r9					; save r9
00000052	A0406000		pss	DAR
00000053	A0405000		pss	PAR
00000054	42900003		lix	r9,screenPtr.lower	; r9 is the ptr to screenPtr
00000055	20690000		add	DAR,r9,ZERO			; DAR points to screenPtr
00000056	64A06000		ldl	r10					; r10 has screenPtr value
00000057	205A0000		add	PAR,r10,ZERO		; Set PAR to screenPtr
00000058	81508000		spb	r8					; write character to screen
00000059	20AA1000		add	r10,r10,ONE			; increment screen pointer
0000005a	6560A000		sdl	r10					; save new pointer
0000005b	A1504000		pus PAR					; restore PAR
0000005c	A1604000		pus DAR					; restore DAR
0000005d	A1904000		pus r9					; restore r9
0000005e	A1A04000		pus r10					; restore r10
0000005f	A1704000		pus	PC					; rts

;
; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; screenBase has the base address of the screen memory
; screenPtr contains the address of the current char position
;

setCharPos:
00000060	A0409000		pss	r9						; save r9
00000061	A040A000		pss	r10						; save r10
00000062	A0406000		pss	DAR						; save DAR
00000063	42A00004		lix	r10,screenBase.lower
00000064	206A0000		add	DAR,r10,ZERO			; DAR points to the screenBase
00000065	64A06000		ldl	r10						; r10 has the screen base address
00000066	20A80000		add	r10,r8,ZERO				; add passed position to base
00000067	42900003		lix	r9,screenPtr.lower		; r9 is the ptr to screenPtr
00000068	20690000		add	DAR,r9,ZERO				; DAR points to screenPtr
00000069	6560A000		sdl	r10						; store new screen address
0000006a	A1604000		pus DAR						; restore DAR
0000006b	A1A04000		pus r10						; restore r10
0000006c	A1904000		pus r9						; restore r9
0000006d	A1704000		pus	PC						; rts
