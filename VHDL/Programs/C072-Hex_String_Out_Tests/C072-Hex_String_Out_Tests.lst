;
; C072-Hex_String_Out_Tests - Send out a hex long as a string of 8 hex digitsRead
;

prompt:			.string "R32V2020> "
; lineBuff is 80 characters long
lineBuff:		.string "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
lineEnd:		.long 0x00
syntaxError:	.string "Syntax error... "

;
; Read UART character and put it to the ANSI VGA Display
; Turn the first two characters into a hex 8-bit value
;

main:
00000000	D40000CB		bsr		clearScreen
00000001	42800000		lix		r8,prompt.lower
00000002	25808000		sl1		r8,r8				; Need to shift by 2 to get true address (assembler needs fixed)
00000003	25808000		sl1		r8,r8
00000004	D40000BB		bsr		printString
00000005	4180DEAD		liu		r8,0xDEAD
00000006	4080BABA		lil		r8,0xBABA
00000007	D4000005		bsr		hexToScreen
00000008	41801234		liu		r8,0x1234
00000009	4080ABCD		lil		r8,0xABCD
0000000a	D4000002		bsr		hexToScreen
0000000b	01000000		hcf

;
; hexToScreen - Print hex value to screen
; r8 - value passed to routine in r8
;

hexToScreen:
0000000c	A0408000		push	r8
0000000d	A0409000		push	r9
0000000e	A040A000		push	r10
0000000f	A040B000		push	r11
00000010	A0405000		push	PAR
00000011	42B00008		lix		r11,0x8		; digits to send out
00000012	42A0000F		lix		r10,0xF		; bottom nibble mask
00000013	20980000		add		r9,r8,ZERO	; copy r8 to r9
anotherDigit:
00000014	29909000		rol1	r9,r9
00000015	29909000		rol1	r9,r9
00000016	29909000		rol1	r9,r9
00000017	29909000		rol1	r9,r9
00000018	2389A000		and		r8,r9,r10
00000019	D4000009		bsr		outHexCharToScreen
0000001a	20BB2000		add		r11,r11,MINUS1
0000001b	C7FFFFF9		bnz		anotherDigit
0000001c	A1504000		pull	PAR
0000001d	A1B04000		pull	r11
0000001e	A1A04000		pull	r10
0000001f	A1904000		pull	r9
00000020	A1804000		pull	r8
00000021	A1704000		pull	PC

;
; outHexCharToScreen
; hex digit to print is in the bottom nibble of r8
;

outHexCharToScreen:
00000022	A0408000		push	r8
00000023	A0409000		push	r9
00000024	42503000		lix		PAR,0x3000	; seven seg display
00000025	85508000		spl		r8
00000026	4290000A		lix		r9,0x0A
00000027	30398000		cmp		r9,r8
00000028	CC000005		blt		nibbleIsNumber
00000029	42900037		lix		r9,55
0000002a	20898000		add		r8,r9,r8
0000002b	D40000AF		bsr		putCharToANSIScreen
0000002c	C0000004		bra		doneHexChar
nibbleIsNumber:
0000002d	42900030		lix		r9,0x30
0000002e	20898000		add		r8,r9,r8
0000002f	D40000AB		bsr		putCharToANSIScreen
doneHexChar:
00000030	A1904000		pull	r9
00000031	A1804000		pull	r8
00000032	A1704000		pull	PC
	
;
; hexToSevenSeg - Convert a two ASCII digit value into a hex byte
; r8 points to the start of the hex string
;

hexToSevenSeg:
00000033	A0408000		push	r8
00000034	A0409000		push	r9
00000035	A040A000		push	r10
00000036	A0406000		push	DAR
00000037	A0405000		push	PAR
00000038	42900000		lix		r9,0
00000039	20680000		add		DAR,r8,ZERO
0000003a	60806000		ldb		r8
0000003b	D4000012		bsr		asciiToHex
0000003c	22998000		or		r9,r9,r8
0000003d	25909000		sl1		r9,r9
0000003e	25909000		sl1		r9,r9
0000003f	25909000		sl1		r9,r9
00000040	25909000		sl1		r9,r9
00000041	20661000		add		DAR,DAR,ONE
00000042	60806000		ldb		r8
00000043	D400000A		bsr		asciiToHex
00000044	22998000		or		r9,r9,r8
00000045	42503000		lix		PAR,0x3000		; seven segment display
00000046	85509000		spl		r9
00000047	A1504000		pull	PAR
00000048	A1604000		pull	DAR
00000049	A1A04000		pull	r10
0000004a	A1904000		pull	r9
0000004b	A1804000		pull	r8
0000004c	A1704000		pull	PC

;
; asciiToHex - Convert a single ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
; Result is returned in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
;

asciiToHex:
0000004d	A0409000		push	r9
0000004e	42900066		lix		r9,0x66		; check if letter is > 'f'
0000004f	30398000		cmp		r9,r8
00000050	CF000025		bgt		a2h_Error
00000051	42900030		lix		r9,0x30		; check if letter is < '0'
00000052	30398000		cmp		r9,r8	
00000053	CC000022		blt		a2h_Error
00000054	4290003A		lix		r9,0x3A		; check if letter is between '0' and '9' inclusively
00000055	30398000		cmp		r9,r8
00000056	CC000011		blt		gotDigit
00000057	42900041		lix		r9,0x41		; check if letter is between '9' and 'A' exclusively
00000058	30398000		cmp		r9,r8
00000059	CC00001C		blt		a2h_Error
0000005a	42900047		lix		r9,0x47		; check if letter is between 'A' and F' inclusively
0000005b	30398000		cmp		r9,r8
0000005c	CC000012		blt		gotUpperLetter
0000005d	42900061		lix		r9,0x61		; check if between 'F' and 'a' exclusively
0000005e	30398000		cmp		r9,r8
0000005f	CC000016		blt		a2h_Error
; Lower case letter
00000060	42900057		lix		r9,0x57
00000061	24992000		xor		r9,r9,MINUS1
00000062	20991000		add		r9,r9,ONE
00000063	20889000		add		r8,r8,r9
00000064	4290000F		lix		r9,0x0F
00000065	23889000		and		r8,r8,r9
00000066	C0000014		bra		doneConvA2H
gotDigit:
00000067	42900030		lix		r9,0x30
00000068	24992000		xor		r9,r9,MINUS1
00000069	20991000		add		r9,r9,ONE
0000006a	20889000		add		r8,r8,r9
0000006b	4290000F		lix		r9,0x0F
0000006c	23889000		and		r8,r8,r9
0000006d	C000000D		bra		doneConvA2H
gotUpperLetter:
0000006e	42900037		lix		r9,0x37
0000006f	24992000		xor		r9,r9,MINUS1
00000070	20991000		add		r9,r9,ONE
00000071	20889000		add		r8,r8,r9
00000072	4290000F		lix		r9,0x0F
00000073	23889000		and		r8,r8,r9
00000074	C0000006		bra		doneConvA2H
a2h_Error:
00000075	42800019		lix		r8,syntaxError.lower
00000076	25808000		sl1		r8,r8				; Need to shift by 2 to get true address (assembler needs fixed)
00000077	25808000		sl1		r8,r8
00000078	D4000047		bsr		printString
00000079	4280DEAD		lix		r8,0xDEAD
doneConvA2H:
0000007a	A1904000		pull	r9
0000007b	A1704000		pull	PC
;
; getLine - Reads the UART and fills a buffer with the characters received
; r8 received character - Character received from the UART
; r9 is constant - ENTER key on keyboard
; r10 is the input buffer length
; r11 is the BACK key on keyboard
; r12 used to test the backspace doesn't go past the start of the buffer
; DAR points to lineBuff current character position
;

getLine:
0000007c	A0408000		push	r8
0000007d	A0409000		push	r9
0000007e	A040A000		push	r10
0000007f	A040B000		push	r11
00000080	A040C000		push	r12
00000081	A0406000		push	DAR
00000082	42600003		lix		DAR,lineBuff.lower	; DAR pointer = start of line buffer
00000083	25606000		sl1		DAR,DAR				; Need to shift by 2 to get true address (assembler needs fixed)
00000084	25606000		sl1		DAR,DAR				
00000085	42B0007F		lix		r11,0x7F			; BACK key - rubout
00000086	42A0004F		lix		r10,79				; number of chars in the line buffer
00000087	4290000D		lix		r9,0x0D				; ENTER key - ends the line
loopReadLine:
00000088	D4000020		bsr		waitGetCharFromUART	; Get a character from the UART
00000089	D4000051		bsr		putCharToANSIScreen	; Put the character to the screen
0000008a	D4000027		bsr		putCharToUART		; Echo character back to the UART
0000008b	30389000		cmp		r8,r9				; check if received char was end of line
0000008c	D1000007		beq		gotEOL
0000008d	3038B000		cmp		r8,r11
0000008e	D100000A		beq		gotBackspace
0000008f	61608000		sdb		r8
00000090	20661000		add		DAR,DAR,ONE			; increment to next long in buffer
00000091	20AA2000		add		r10,r10,MINUS1
00000092	C7FFFFF6		bnz		loopReadLine		; Next char would overflow
	; tbd add code for line too long	
gotEOL:
00000093	4280000A		lix		r8,0x0A				; Echo line feed after CR
00000094	D4000046		bsr		putCharToANSIScreen	; Put the character to the screen
00000095	D400001C		bsr		putCharToUART		; Echo character back to the UART
00000096	61600000		sdb		r0					; null at end of line read
00000097	C0000009		bra		doneHandlingLine
gotBackspace:
00000098	20662000		add		DAR,DAR,MINUS1
00000099	42C00003		lix		r12,lineBuff.lower	; r12 pointer = start of line buffer
0000009a	25C0C000		sl1		r12,r12				; Need to shift by 2 to get true address (assembler needs fixed)
0000009b	25C0C000		sl1		r12,r12				
0000009c	303C6000		cmp		r12,DAR
0000009d	CFFFFFEB		bgt		loopReadLine
0000009e	206C0000		add		DAR,r12,r0
0000009f	C0FFFFE9		bra		loopReadLine
doneHandlingLine:
000000a0	A1604000		pull	DAR
000000a1	A1C04000		pull	r12
000000a2	A1B04000		pull	r11
000000a3	A1A04000		pull	r10
000000a4	A1904000		pull	r9
000000a5	A1804000		pull	r8
000000a6	A1704000		pull	PC

;
;
;
	
parseLine:
000000a7	A1704000		pull	PC
	
;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
000000a8	A0405000		push	PAR
000000a9	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
000000aa	84805000		lpl		r8			; Read Status into r8
000000ab	23881000		and 	r8,r8,ONE
000000ac	C3FFFFFE		bez 	waitUartRxStat
000000ad	42501801		lix 	PAR,0x1801
000000ae	84805000		lpl		r8
000000af	A1504000		pull	PAR
000000b0	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
000000b1	A0409000		push	r9
000000b2	A0405000		push	PAR
000000b3	A040A000		push	r10
000000b4	42A00002		lix		r10,0x2
000000b5	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
000000b6	84905000		lpl		r9			; Read Status into r9
000000b7	2399A000		and 	r9,r9,r10
000000b8	C3FFFFFE		bez 	waitUartTxStat
000000b9	42501801		lix 	PAR,0x1801
000000ba	85508000		spl		r8			; echo the character
000000bb	A1A04000		pull	r10
000000bc	A1504000		pull	PAR
000000bd	A1904000		pull	r9
000000be	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
000000bf	A0408000		push	r8				; save r8
000000c0	A0406000		push	DAR
000000c1	20680000		add		DAR,r8,ZERO		; set the start of the string
nextChar:
000000c2	60806000		ldb		r8				; get the character
000000c3	30380000		cmp		r8,ZERO			; Null terminated string
000000c4	D1000004		beq		donePrStr		; done if null
000000c5	D4000015		bsr		putCharToANSIScreen	; write out the character
000000c6	20661000		add		DAR,DAR,r1		; Point to next character
000000c7	C0FFFFFB		bra		nextChar
donePrStr:
000000c8	A1604000		pull	DAR				; restore DAR
000000c9	A1804000		pull	r8				; restore r8
000000ca	A1704000		pull	PC				; rts
	
;
; clearScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen:
000000cb	A0408000		push	r8				; save r8
000000cc	4280001B		lix		r8,0x1b			; ESC
000000cd	D400000D		bsr		putCharToANSIScreen
000000ce	D4FFFFE3		bsr		putCharToUART
000000cf	4280005B		lix		r8,0x5b			; [
000000d0	D400000A		bsr		putCharToANSIScreen
000000d1	D4FFFFE0		bsr		putCharToUART
000000d2	42800032		lix		r8,0x32			; 2
000000d3	D4000007		bsr		putCharToANSIScreen
000000d4	D4FFFFDD		bsr		putCharToUART
000000d5	4280004A		lix		r8,0x4A			; J
000000d6	D4000004		bsr		putCharToANSIScreen
000000d7	D4FFFFDA		bsr		putCharToUART
000000d8	A1804000		pull	r8
000000d9	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
000000da	A0409000		push	r9
000000db	A0405000		push	PAR
000000dc	A040A000		push	r10
000000dd	42A00002		lix		r10,0x2		; TxReady bit
000000de	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
000000df	84905000		lpl		r9			; Read Status into r9
000000e0	2399A000		and 	r9,r9,r10
000000e1	C3FFFFFE		bez 	waitScreenTxStat
000000e2	42500001		lix 	PAR,0x1
000000e3	85508000		spl		r8			; echo the character
000000e4	A1A04000		pull	r10
000000e5	A1504000		pull	PAR
000000e6	A1904000		pull	r9
000000e7	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
000000e8	A0408000		push	r8
000000e9	42800000		lix		r8,0			; first note is 0
000000ea	D4000007		bsr 	setNote
000000eb	D400000D		bsr		enableBuzzer
000000ec	428000FA		lix		r8,250			; count for 1 Sec
000000ed	D4000023		bsr		delay_mS		; call delay_ms
000000ee	D4000016		bsr		disableBuzzer
000000ef	A1804000		pull	r8
000000f0	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
000000f1	A0408000		push	r8
000000f2	A0405000		push	PAR
000000f3	42504000		lix		PAR,0x4000
000000f4	85508000		spl		r8
000000f5	A1504000		pull	PAR
000000f6	A1804000		pull	r8
000000f7	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
000000f8	A0409000		push	r9
000000f9	A0408000		push	r8
000000fa	A0405000		push	PAR
000000fb	42900010		lix		r9,0x0010		; Buzzer Enable line
000000fc	42502800		lix		PAR,0x2800
000000fd	84805000		lpl		r8
000000fe	22889000		or		r8,r8,r9
000000ff	85508000		spl		r8
00000100	A1504000		pull	PAR
00000101	A1804000		pull	r8
00000102	A1904000		pull	r9
00000103	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
00000104	A0409000		push	r9
00000105	A0408000		push	r8
00000106	A0405000		push	PAR
00000107	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
00000108	42502800		lix		PAR,0x2800
00000109	84805000		lpl		r8
0000010a	23889000		and		r8,r8,r9
0000010b	85508000		spl		r8
0000010c	A1504000		pull	PAR
0000010d	A1804000		pull	r8
0000010e	A1904000		pull	r9
0000010f	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
00000110	A0409000		push	r9
00000111	42503802		lix		PAR,0x3802		; address of the mSec counter
00000112	84905000		lpl		r9				; read the peripheral counter into r9
00000113	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
00000114	84905000		lpl		r9				; check the elapsed time counter
00000115	30389000		cmp		r8,r9
00000116	CCFFFFFE		blt		loop_delay_mS
00000117	A1904000		pull	r9
00000118	A1704000		pull	PC

; wr7Seg8Dig
; passed r8 - value to send to the 7 seg display

wr7Seg8Dig:
00000119	A0405000		push	PAR
0000011a	42503000		lix		PAR,0x3000		; Seven Segment LED lines
0000011b	85508000		spl		r8				; Write out LED bits
0000011c	A1504000		pull	PAR
0000011d	A1704000		pull	PC
