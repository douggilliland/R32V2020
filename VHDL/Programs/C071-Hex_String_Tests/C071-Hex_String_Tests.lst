;
; inputLine - Read a line from the UART serial input and echo it
;

prompt:			.string "R32V2020> "
; lineBuff is 80 characters long
lineBuff:		.string "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
syntaxError:	.string "Syntax error"

;
; Read UART character and put it to the ANSI VGA Display
;

main:
00000000	D40000A7		bsr		clearScreen
00000001	42800000		lix		r8,prompt.lower
00000002	25808000		sl1		r8,r8				; Need to shift by 2 to get true address (assembler needs fixed)
00000003	25808000		sl1		r8,r8
00000004	D4000097		bsr		printString
loopRead:
00000005	D4000053		bsr		getLine
00000006	42800003		lix		r8,lineBuff.lower	; DAR pointer = start of line buffer
00000007	25808000		sl1		r8,r8				; Need to shift by 2 to get true address (assembler needs fixed)
00000008	25808000		sl1		r8,r8
00000009	D4000002		bsr		hexToSevenSeg		; 
0000000a	C0FFFFFB		bra		loopRead

;
; hexToSevenSeg - Convert a two ASCII digit value into a hex byte
; r8 points to the start of the hex string
;

hexToSevenSeg:
0000000b	A0408000		push	r8
0000000c	A0409000		push	r9
0000000d	A040A000		push	r10
0000000e	A040B000		push	r11
0000000f	A040C000		push	r12
00000010	A0406000		push	DAR
00000011	A0405000		push	PAR
00000012	42900000		lix		r9,0
00000013	20680000		add		DAR,r8,ZERO
00000014	60806000		ldb		r8
00000015	D4000014		bsr		asciiToHex
00000016	22998000		or		r9,r9,r8
00000017	25909000		sl1		r9,r9
00000018	25909000		sl1		r9,r9
00000019	25909000		sl1		r9,r9
0000001a	25909000		sl1		r9,r9
0000001b	20661000		add		DAR,DAR,ONE
0000001c	60806000		ldb		r8
0000001d	D400000C		bsr		asciiToHex
0000001e	22998000		or		r9,r9,r8
0000001f	42503000		lix		PAR,0x3000		; seven segment display
00000020	85509000		spl		r9
00000021	A1504000		pull	PAR
00000022	A1604000		pull	DAR
00000023	A1C04000		pull	r12
00000024	A1B04000		pull	r11
00000025	A1A04000		pull	r10
00000026	A1904000		pull	r9
00000027	A1804000		pull	r8
00000028	A1704000		pull	PC

;
; asciiToHex - Convert a single ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
; Result is returned in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
;

asciiToHex:
00000029	A0409000		push	r9
0000002a	42900066		lix		r9,0x66		; check if letter is > 'f'
0000002b	30398000		cmp		r9,r8
0000002c	CF000025		bgt		a2h_Error
0000002d	42900030		lix		r9,0x30		; check if letter is < '0'
0000002e	30398000		cmp		r9,r8	
0000002f	CC000022		blt		a2h_Error
00000030	4290003A		lix		r9,0x3A		; check if letter is between '0' and '9' inclusively
00000031	30398000		cmp		r9,r8
00000032	CC000011		blt		gotDigit
00000033	42900041		lix		r9,0x41		; check if letter is between '9' and 'A' exclusively
00000034	30398000		cmp		r9,r8
00000035	CC00001C		blt		a2h_Error
00000036	42900047		lix		r9,0x47		; check if letter is between 'A' and F' inclusively
00000037	30398000		cmp		r9,r8
00000038	CC000012		blt		gotUpperLetter
00000039	42900061		lix		r9,0x61		; check if between 'F' and 'a' exclusively
0000003a	30398000		cmp		r9,r8
0000003b	CC000016		blt		a2h_Error
; Lower case letter
0000003c	42900057		lix		r9,0x57
0000003d	24992000		xor		r9,r9,MINUS1
0000003e	20991000		add		r9,r9,ONE
0000003f	20889000		add		r8,r8,r9
00000040	4290000F		lix		r9,0x0F
00000041	23889000		and		r8,r8,r9
00000042	C0000014		bra		doneConvA2H
gotDigit:
00000043	42900030		lix		r9,0x30
00000044	24992000		xor		r9,r9,MINUS1
00000045	20991000		add		r9,r9,ONE
00000046	20889000		add		r8,r8,r9
00000047	4290000F		lix		r9,0x0F
00000048	23889000		and		r8,r8,r9
00000049	C000000D		bra		doneConvA2H
gotUpperLetter:
0000004a	42900037		lix		r9,0x37
0000004b	24992000		xor		r9,r9,MINUS1
0000004c	20991000		add		r9,r9,ONE
0000004d	20889000		add		r8,r8,r9
0000004e	4290000F		lix		r9,0x0F
0000004f	23889000		and		r8,r8,r9
00000050	C0000006		bra		doneConvA2H
a2h_Error:
00000051	42800018		lix		r8,syntaxError.lower
00000052	25808000		sl1		r8,r8				; Need to shift by 2 to get true address (assembler needs fixed)
00000053	25808000		sl1		r8,r8
00000054	D4000047		bsr		printString
00000055	4280DEAD		lix		r8,0xDEAD
doneConvA2H:
00000056	A1904000		pull	r9
00000057	A1704000		pull	PC
;
; getLine - Reads the UART and fills a buffer with the characters received
; r8 received character - Character received from the UART
; r9 is constant - ENTER key on keyboard
; r10 is the input buffer length
; r11 is the BACK key on keyboard
; r12 used to test the backspace doesn't go past the start of the buffer
; DAR points to lineBuff current character position
;

getLine:
00000058	A0408000		push	r8
00000059	A0409000		push	r9
0000005a	A040A000		push	r10
0000005b	A040B000		push	r11
0000005c	A040C000		push	r12
0000005d	A0406000		push	DAR
0000005e	42600003		lix		DAR,lineBuff.lower	; DAR pointer = start of line buffer
0000005f	25606000		sl1		DAR,DAR				; Need to shift by 2 to get true address (assembler needs fixed)
00000060	25606000		sl1		DAR,DAR				
00000061	42B0007F		lix		r11,0x7F			; BACK key - rubout
00000062	42A0004F		lix		r10,79				; number of chars in the line buffer
00000063	4290000D		lix		r9,0x0D				; ENTER key - ends the line
loopReadLine:
00000064	D4000020		bsr		waitGetCharFromUART	; Get a character from the UART
00000065	D4000051		bsr		putCharToANSIScreen	; Put the character to the screen
00000066	D4000027		bsr		putCharToUART		; Echo character back to the UART
00000067	30389000		cmp		r8,r9				; check if received char was end of line
00000068	D1000007		beq		gotEOL
00000069	3038B000		cmp		r8,r11
0000006a	D100000A		beq		gotBackspace
0000006b	61608000		sdb		r8
0000006c	20661000		add		DAR,DAR,ONE			; increment to next long in buffer
0000006d	20AA2000		add		r10,r10,MINUS1
0000006e	C7FFFFF6		bnz		loopReadLine		; Next char would overflow
	; tbd add code for line too long	
gotEOL:
0000006f	4280000A		lix		r8,0x0A				; Echo line feed after CR
00000070	D4000046		bsr		putCharToANSIScreen	; Put the character to the screen
00000071	D400001C		bsr		putCharToUART		; Echo character back to the UART
00000072	61600000		sdb		r0					; null at end of line read
00000073	C0000009		bra		doneHandlingLine
gotBackspace:
00000074	20662000		add		DAR,DAR,MINUS1
00000075	42C00003		lix		r12,lineBuff.lower	; r12 pointer = start of line buffer
00000076	25C0C000		sl1		r12,r12				; Need to shift by 2 to get true address (assembler needs fixed)
00000077	25C0C000		sl1		r12,r12				
00000078	303C6000		cmp		r12,DAR
00000079	CFFFFFEB		bgt		loopReadLine
0000007a	206C0000		add		DAR,r12,r0
0000007b	C0FFFFE9		bra		loopReadLine
doneHandlingLine:
0000007c	A1604000		pull	DAR
0000007d	A1C04000		pull	r12
0000007e	A1B04000		pull	r11
0000007f	A1A04000		pull	r10
00000080	A1904000		pull	r9
00000081	A1804000		pull	r8
00000082	A1704000		pull	PC

;
;
;
	
parseLine:
00000083	A1704000		pull	PC
	
;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
00000084	A0405000		push	PAR
00000085	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
00000086	84805000		lpl		r8			; Read Status into r8
00000087	23881000		and 	r8,r8,ONE
00000088	C3FFFFFE		bez 	waitUartRxStat
00000089	42501801		lix 	PAR,0x1801
0000008a	84805000		lpl		r8
0000008b	A1504000		pull	PAR
0000008c	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
0000008d	A0409000		push	r9
0000008e	A0405000		push	PAR
0000008f	A040A000		push	r10
00000090	42A00002		lix		r10,0x2
00000091	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
00000092	84905000		lpl		r9			; Read Status into r9
00000093	2399A000		and 	r9,r9,r10
00000094	C3FFFFFE		bez 	waitUartTxStat
00000095	42501801		lix 	PAR,0x1801
00000096	85508000		spl		r8			; echo the character
00000097	A1A04000		pull	r10
00000098	A1504000		pull	PAR
00000099	A1904000		pull	r9
0000009a	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
0000009b	A0408000		push	r8				; save r8
0000009c	A0406000		push	DAR
0000009d	20680000		add		DAR,r8,ZERO		; set the start of the string
nextChar:
0000009e	60806000		ldb		r8				; get the character
0000009f	30380000		cmp		r8,ZERO			; Null terminated string
000000a0	D1000004		beq		donePrStr		; done if null
000000a1	D4000015		bsr		putCharToANSIScreen	; write out the character
000000a2	20661000		add		DAR,DAR,r1		; Point to next character
000000a3	C0FFFFFB		bra		nextChar
donePrStr:
000000a4	A1604000		pull	DAR				; restore DAR
000000a5	A1804000		pull	r8				; restore r8
000000a6	A1704000		pull	PC				; rts
	
;
; clearScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen:
000000a7	A0408000		push	r8				; save r8
000000a8	4280001B		lix		r8,0x1b			; ESC
000000a9	D400000D		bsr		putCharToANSIScreen
000000aa	D4FFFFE3		bsr		putCharToUART
000000ab	4280005B		lix		r8,0x5b			; [
000000ac	D400000A		bsr		putCharToANSIScreen
000000ad	D4FFFFE0		bsr		putCharToUART
000000ae	42800032		lix		r8,0x32			; 2
000000af	D4000007		bsr		putCharToANSIScreen
000000b0	D4FFFFDD		bsr		putCharToUART
000000b1	4280004A		lix		r8,0x4A			; J
000000b2	D4000004		bsr		putCharToANSIScreen
000000b3	D4FFFFDA		bsr		putCharToUART
000000b4	A1804000		pull	r8
000000b5	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
000000b6	A0409000		push	r9
000000b7	A0405000		push	PAR
000000b8	A040A000		push	r10
000000b9	42A00002		lix		r10,0x2		; TxReady bit
000000ba	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
000000bb	84905000		lpl		r9			; Read Status into r9
000000bc	2399A000		and 	r9,r9,r10
000000bd	C3FFFFFE		bez 	waitScreenTxStat
000000be	42500001		lix 	PAR,0x1
000000bf	85508000		spl		r8			; echo the character
000000c0	A1A04000		pull	r10
000000c1	A1504000		pull	PAR
000000c2	A1904000		pull	r9
000000c3	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
000000c4	A0408000		push	r8
000000c5	42800000		lix		r8,0			; first note is 0
000000c6	D4000007		bsr 	setNote
000000c7	D400000D		bsr		enableBuzzer
000000c8	428000FA		lix		r8,250			; count for 1 Sec
000000c9	D4000023		bsr		delay_mS		; call delay_ms
000000ca	D4000016		bsr		disableBuzzer
000000cb	A1804000		pull	r8
000000cc	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
000000cd	A0408000		push	r8
000000ce	A0405000		push	PAR
000000cf	42504000		lix		PAR,0x4000
000000d0	85508000		spl		r8
000000d1	A1504000		pull	PAR
000000d2	A1804000		pull	r8
000000d3	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
000000d4	A0409000		push	r9
000000d5	A0408000		push	r8
000000d6	A0405000		push	PAR
000000d7	42900010		lix		r9,0x0010		; Buzzer Enable line
000000d8	42502800		lix		PAR,0x2800
000000d9	84805000		lpl		r8
000000da	22889000		or		r8,r8,r9
000000db	85508000		spl		r8
000000dc	A1504000		pull	PAR
000000dd	A1804000		pull	r8
000000de	A1904000		pull	r9
000000df	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
000000e0	A0409000		push	r9
000000e1	A0408000		push	r8
000000e2	A0405000		push	PAR
000000e3	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
000000e4	42502800		lix		PAR,0x2800
000000e5	84805000		lpl		r8
000000e6	23889000		and		r8,r8,r9
000000e7	85508000		spl		r8
000000e8	A1504000		pull	PAR
000000e9	A1804000		pull	r8
000000ea	A1904000		pull	r9
000000eb	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
000000ec	A0409000		push	r9
000000ed	42503802		lix		PAR,0x3802		; address of the mSec counter
000000ee	84905000		lpl		r9				; read the peripheral counter into r9
000000ef	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000f0	84905000		lpl		r9				; check the elapsed time counter
000000f1	30389000		cmp		r8,r9
000000f2	CCFFFFFE		blt		loop_delay_mS
000000f3	A1904000		pull	r9
000000f4	A1704000		pull	PC

; wr7Seg8Dig
; passed r8 - value to send to the 7 seg display

wr7Seg8Dig:
000000f5	A0405000		push	PAR
000000f6	42503000		lix		PAR,0x3000		; Seven Segment LED lines
000000f7	85508000		spl		r8				; Write out LED bits
000000f8	A1504000		pull	PAR
000000f9	A1704000		pull	PC
