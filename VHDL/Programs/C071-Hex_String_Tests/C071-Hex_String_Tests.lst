;
; inputLine - Read a line from the UART serial input and echo it
;

prompt:			.string "R32V2020> "
; lineBuff is 80 characters long
lineBuff:		.string "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
syntaxError:	.string "Syntax error"

;
; Read UART character and put it to the ANSI VGA Display
;

main:
00000000	D400008F		bsr		clearScreen
00000001	42800000		lix		r8,prompt.lower
00000002	25808000		sl1		r8,r8				; Need to shift by 2 to get true address (assembler needs fixed)
00000003	25808000		sl1		r8,r8
00000004	D400007F		bsr		printString
loopRead:
00000005	D400003B		bsr		getLine
00000006	42800003		lix		r8,lineBuff.lower	; DAR pointer = start of line buffer
00000007	25808000		sl1		r8,r8				; Need to shift by 2 to get true address (assembler needs fixed)
00000008	25808000		sl1		r8,r8
00000009	D4000002		bsr		hexToSevenSeg		; 
0000000a	C0FFFFFB		bra		loopRead

;
; hexToSevenSeg - Convert a two ASCII digit value into a hex byte
; r8 points to the start of the hex string
;

hexToSevenSeg:
0000000b	A0408000		push	r8
0000000c	A0409000		push	r9
0000000d	A040A000		push	r10
0000000e	A040B000		push	r11
0000000f	A040C000		push	r12
00000010	A0406000		push	DAR
00000011	A0405000		push	PAR
00000012	42900000		lix		r9,0
00000013	20680000		add		DAR,r8,ZERO
00000014	60806000		ldb		r8
00000015	D4000014		bsr		asciiToHex
00000016	22998000		or		r9,r9,r8
00000017	25909000		sl1		r9,r9
00000018	25909000		sl1		r9,r9
00000019	25909000		sl1		r9,r9
0000001a	25909000		sl1		r9,r9
0000001b	20661000		add		DAR,DAR,ONE
0000001c	60806000		ldb		r8
0000001d	D400000C		bsr		asciiToHex
0000001e	22998000		or		r9,r9,r8
0000001f	42503000		lix		PAR,0x3000		; seven segment display
00000020	85509000		spl		r9
00000021	A1504000		pull	PAR
00000022	A1604000		pull	DAR
00000023	A1C04000		pull	r12
00000024	A1B04000		pull	r11
00000025	A1A04000		pull	r10
00000026	A1904000		pull	r9
00000027	A1804000		pull	r8
00000028	A1704000		pull	PC

;
; asciiToHex - Convert an ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
; Result is returned in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
;

asciiToHex:
00000029	A0409000		push	r9
0000002a	42900066		lix		r9,0x66
0000002b	30398000		cmp		r9,r8
0000002c	CF00000E		bgt		a2h_Error
0000002d	42900030		lix		r9,0x30
0000002e	30398000		cmp		r9,r8
0000002f	CC00000B		blt		a2h_Error
00000030	4290003A		lix		r9,0x3A
00000031	30398000		cmp		r9,r8
00000032	CC000001		blt		gotDigit
	; deal with hex letter
gotDigit:
00000033	42900030		lix		r9,0x30
00000034	24992000		xor		r9,r9,MINUS1
00000035	20991000		add		r9,r9,ONE
00000036	20889000		add		r8,r8,r9
00000037	4290000F		lix		r9,0x0F
00000038	23889000		and		r8,r8,r9
00000039	C0000005		bra		doneConvA2H
a2h_Error:
0000003a	42800018		lix		r8,syntaxError.lower
0000003b	25808000		sl1		r8,r8				; Need to shift by 2 to get true address (assembler needs fixed)
0000003c	25808000		sl1		r8,r8	
0000003d	D4000046		bsr		printString
doneConvA2H:
0000003e	A1904000		pull	r9
0000003f	A1704000		pull	PC
;
; getLine - Reads the UART and fills a buffer with the characters received
; r8 received character - Character received from the UART
; r9 is constant - ENTER key on keyboard
; r10 is the input buffer length
; r11 is the BACK key on keyboard
; r12 used to test the backspace doesn't go past the start of the buffer
; DAR points to lineBuff current character position
;

getLine:
00000040	A0408000		push	r8
00000041	A0409000		push	r9
00000042	A040A000		push	r10
00000043	A040B000		push	r11
00000044	A040C000		push	r12
00000045	A0406000		push	DAR
00000046	42600003		lix		DAR,lineBuff.lower	; DAR pointer = start of line buffer
00000047	25606000		sl1		DAR,DAR				; Need to shift by 2 to get true address (assembler needs fixed)
00000048	25606000		sl1		DAR,DAR				
00000049	42B0007F		lix		r11,0x7F			; BACK key - rubout
0000004a	42A0004F		lix		r10,79				; number of chars in the line buffer
0000004b	4290000D		lix		r9,0x0D				; ENTER key - ends the line
loopReadLine:
0000004c	D4000020		bsr		waitGetCharFromUART	; Get a character from the UART
0000004d	D4000051		bsr		putCharToANSIScreen	; Put the character to the screen
0000004e	D4000027		bsr		putCharToUART		; Echo character back to the UART
0000004f	30389000		cmp		r8,r9				; check if received char was end of line
00000050	D1000007		beq		gotEOL
00000051	3038B000		cmp		r8,r11
00000052	D100000A		beq		gotBackspace
00000053	61608000		sdb		r8
00000054	20661000		add		DAR,DAR,ONE			; increment to next long in buffer
00000055	20AA2000		add		r10,r10,MINUS1
00000056	C7FFFFF6		bnz		loopReadLine		; Next char would overflow
	; tbd add code for line too long	
gotEOL:
00000057	4280000A		lix		r8,0x0A				; Echo line feed after CR
00000058	D4000046		bsr		putCharToANSIScreen	; Put the character to the screen
00000059	D400001C		bsr		putCharToUART		; Echo character back to the UART
0000005a	61600000		sdb		r0					; null at end of line read
0000005b	C0000009		bra		doneHandlingLine
gotBackspace:
0000005c	20662000		add		DAR,DAR,MINUS1
0000005d	42C00003		lix		r12,lineBuff.lower	; r12 pointer = start of line buffer
0000005e	25C0C000		sl1		r12,r12				; Need to shift by 2 to get true address (assembler needs fixed)
0000005f	25C0C000		sl1		r12,r12				
00000060	303C6000		cmp		r12,DAR
00000061	CFFFFFEB		bgt		loopReadLine
00000062	206C0000		add		DAR,r12,r0
00000063	C0FFFFE9		bra		loopReadLine
doneHandlingLine:
00000064	A1604000		pull	DAR
00000065	A1C04000		pull	r12
00000066	A1B04000		pull	r11
00000067	A1A04000		pull	r10
00000068	A1904000		pull	r9
00000069	A1804000		pull	r8
0000006a	A1704000		pull	PC

;
;
;
	
parseLine:
0000006b	A1704000		pull	PC
	
;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
0000006c	A0405000		push	PAR
0000006d	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
0000006e	84805000		lpl		r8			; Read Status into r8
0000006f	23881000		and 	r8,r8,ONE
00000070	C3FFFFFE		bez 	waitUartRxStat
00000071	42501801		lix 	PAR,0x1801
00000072	84805000		lpl		r8
00000073	A1504000		pull	PAR
00000074	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
00000075	A0409000		push	r9
00000076	A0405000		push	PAR
00000077	A040A000		push	r10
00000078	42A00002		lix		r10,0x2
00000079	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
0000007a	84905000		lpl		r9			; Read Status into r9
0000007b	2399A000		and 	r9,r9,r10
0000007c	C3FFFFFE		bez 	waitUartTxStat
0000007d	42501801		lix 	PAR,0x1801
0000007e	85508000		spl		r8			; echo the character
0000007f	A1A04000		pull	r10
00000080	A1504000		pull	PAR
00000081	A1904000		pull	r9
00000082	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
00000083	A0408000		push	r8				; save r8
00000084	A0406000		push	DAR
00000085	20680000		add		DAR,r8,ZERO		; set the start of the string
nextChar:
00000086	60806000		ldb		r8				; get the character
00000087	30380000		cmp		r8,ZERO			; Null terminated string
00000088	D1000004		beq		donePrStr		; done if null
00000089	D4000015		bsr		putCharToANSIScreen	; write out the character
0000008a	20661000		add		DAR,DAR,r1		; Point to next character
0000008b	C0FFFFFB		bra		nextChar
donePrStr:
0000008c	A1604000		pull	DAR				; restore DAR
0000008d	A1804000		pull	r8				; restore r8
0000008e	A1704000		pull	PC				; rts
	
;
; clearScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen:
0000008f	A0408000		push	r8				; save r8
00000090	4280001B		lix		r8,0x1b			; ESC
00000091	D400000D		bsr		putCharToANSIScreen
00000092	D4FFFFE3		bsr		putCharToUART
00000093	4280005B		lix		r8,0x5b			; [
00000094	D400000A		bsr		putCharToANSIScreen
00000095	D4FFFFE0		bsr		putCharToUART
00000096	42800032		lix		r8,0x32			; 2
00000097	D4000007		bsr		putCharToANSIScreen
00000098	D4FFFFDD		bsr		putCharToUART
00000099	4280004A		lix		r8,0x4A			; J
0000009a	D4000004		bsr		putCharToANSIScreen
0000009b	D4FFFFDA		bsr		putCharToUART
0000009c	A1804000		pull	r8
0000009d	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
0000009e	A0409000		push	r9
0000009f	A0405000		push	PAR
000000a0	A040A000		push	r10
000000a1	42A00002		lix		r10,0x2		; TxReady bit
000000a2	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
000000a3	84905000		lpl		r9			; Read Status into r9
000000a4	2399A000		and 	r9,r9,r10
000000a5	C3FFFFFE		bez 	waitScreenTxStat
000000a6	42500001		lix 	PAR,0x1
000000a7	85508000		spl		r8			; echo the character
000000a8	A1A04000		pull	r10
000000a9	A1504000		pull	PAR
000000aa	A1904000		pull	r9
000000ab	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
000000ac	A0408000		push	r8
000000ad	42800000		lix		r8,0			; first note is 0
000000ae	D4000007		bsr 	setNote
000000af	D400000D		bsr		enableBuzzer
000000b0	428000FA		lix		r8,250			; count for 1 Sec
000000b1	D4000023		bsr		delay_mS		; call delay_ms
000000b2	D4000016		bsr		disableBuzzer
000000b3	A1804000		pull	r8
000000b4	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
000000b5	A0408000		push	r8
000000b6	A0405000		push	PAR
000000b7	42504000		lix		PAR,0x4000
000000b8	85508000		spl		r8
000000b9	A1504000		pull	PAR
000000ba	A1804000		pull	r8
000000bb	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
000000bc	A0409000		push	r9
000000bd	A0408000		push	r8
000000be	A0405000		push	PAR
000000bf	42900010		lix		r9,0x0010		; Buzzer Enable line
000000c0	42502800		lix		PAR,0x2800
000000c1	84805000		lpl		r8
000000c2	22889000		or		r8,r8,r9
000000c3	85508000		spl		r8
000000c4	A1504000		pull	PAR
000000c5	A1804000		pull	r8
000000c6	A1904000		pull	r9
000000c7	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
000000c8	A0409000		push	r9
000000c9	A0408000		push	r8
000000ca	A0405000		push	PAR
000000cb	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
000000cc	42502800		lix		PAR,0x2800
000000cd	84805000		lpl		r8
000000ce	23889000		and		r8,r8,r9
000000cf	85508000		spl		r8
000000d0	A1504000		pull	PAR
000000d1	A1804000		pull	r8
000000d2	A1904000		pull	r9
000000d3	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
000000d4	A0409000		push	r9
000000d5	42503802		lix		PAR,0x3802		; address of the mSec counter
000000d6	84905000		lpl		r9				; read the peripheral counter into r9
000000d7	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000d8	84905000		lpl		r9				; check the elapsed time counter
000000d9	30389000		cmp		r8,r9
000000da	CCFFFFFE		blt		loop_delay_mS
000000db	A1904000		pull	r9
000000dc	A1704000		pull	PC

; wr7Seg8Dig
; passed r8 - value to send to the 7 seg display

wr7Seg8Dig:
000000dd	A0405000		push	PAR
000000de	42503000		lix		PAR,0x3000		; Seven Segment LED lines
000000df	85508000		spl		r8				; Write out LED bits
000000e0	A1504000		pull	PAR
000000e1	A1704000		pull	PC
