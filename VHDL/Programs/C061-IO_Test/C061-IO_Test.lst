hello:	.string "R32V2020> "
screenPtr:	.long 0x0
currCharLocPtr:	.long 0x0

;
; Read UART character and put it to the XVGA Display
;

main:
00000000	42800000		lix		r8,0x0			; set screen position to home
00000001	D4000088		bsr		setCharPos
00000002	D4000050		bsr		clearScreen
readDataMemory:
00000003	42800000		lix		r8,hello.lower
00000004	D400002F		bsr		printString
loopWriteDigIO:
00000005	42800001		lix		r8,0x1
00000006	D4000013		bsr		writeIOPort
00000007	428001F4		lix		r8,500
00000008	D40000B7		bsr		delay_mS
00000009	42800000		lix		r8,0x0
0000000a	D400000F		bsr		writeIOPort
0000000b	428001F4		lix		r8,500
0000000c	D40000B3		bsr		delay_mS
0000000d	C0FFFFF8		bra		loopWriteDigIO

readUartStatus:
0000000e	D400000E		bsr		waitGetCharFromUART
putCharToScreenAndUART:
0000000f	D400004F		bsr		putCharToScreen	; put the character to the screen
00000010	4290000D		lix		r9,0x0d
00000011	30389000		cmp		r8,r9
00000012	D2000005		bne		putOutChar
00000013	A0408000		push	r8
00000014	4280000A		lix		r8,0x0a
00000015	D4000010		bsr		putCharToUART
00000016	A1804000		pull	r8
putOutChar:
00000017	D400000E		bsr		putCharToUART
00000018	C0FFFFF6		bra		readUartStatus

;
; writeIOPort
;

writeIOPort:
00000019	42505000		lix		PAR,0x5000
0000001a	85508000		spl		r8
0000001b	A1704000		pull	r7

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
0000001c	A0405000		push	PAR
0000001d	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
0000001e	84805000		lpl		r8			; Read Status into r8
0000001f	23881000		and 	r8,r8,ONE
00000020	C3FFFFFE		bez 	waitUartRxStat
00000021	42501801		lix 	PAR,0x1801
00000022	84805000		lpl		r8
00000023	A1504000		pull	PAR
00000024	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
00000025	A0409000		push	r9
00000026	A0405000		push	PAR
00000027	A040A000		push	r10
00000028	42A00002		lix		r10,0x2
00000029	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
0000002a	84905000		lpl		r9			; Read Status into r9
0000002b	2399A000		and 	r9,r9,r10
0000002c	C3FFFFFE		bez 	waitUartTxStat
0000002d	42501801		lix 	PAR,0x1801
0000002e	85508000		spl		r8			; echo the character
0000002f	A1A04000		pull	r10
00000030	A1504000		pull	PAR
00000031	A1904000		pull	r9
00000032	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string
; strings are null terminated
; strings are bytes packed into long words
;

printString:
00000033	A0408000		push	r8				; save r8
00000034	A0409000		push	r9				; save r9
00000035	A0406000		push	DAR
00000036	20680000		add		DAR,r8,ZERO		; set the start of the string
nextLong:
00000037	64806000		ldl		r8				; get the string
00000038	31808000		ens		r8,r8			; swap the endian
00000039	429000FF		lix		r9,0xff			; mask for null termination check
0000003a	23998000		and		r9,r9,r8
0000003b	C3000013		bez		donePrStr
0000003c	D4000022		bsr		putCharToScreen	; write out the character
0000003d	28808000		sr8		r8,r8
0000003e	429000FF		lix		r9,0xff			; mask for null termination check
0000003f	23998000		and		r9,r9,r8
00000040	C300000E		bez		donePrStr
00000041	D400001D		bsr		putCharToScreen	; write out the character
00000042	28808000		sr8		r8,r8
00000043	429000FF		lix		r9,0xff			; mask for null termination check
00000044	23998000		and		r9,r9,r8
00000045	C3000009		bez		donePrStr
00000046	D4000018		bsr		putCharToScreen	; write out the character
00000047	28808000		sr8		r8,r8
00000048	429000FF		lix		r9,0xff			; mask for null termination check
00000049	23998000		and		r9,r9,r8
0000004a	C3000004		bez		donePrStr
0000004b	D4000013		bsr		putCharToScreen	; write out the character
lastOfLong:
0000004c	20661000		add		DAR,DAR,ONE
0000004d	C0FFFFEA		bra		nextLong
donePrStr:
0000004e	A1604000		pull	DAR				; restore DAR
0000004f	A1904000		pull	r9				; restore r9
00000050	A1804000		pull	r8				; restore r8
00000051	A1704000		pull	PC				; rts
	
;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
; Sets the pointer to the screen to the first location
;

clearScreen:
00000052	A0409000		push	r9				; save r9
00000053	A0408000		push	r8				; save r8
00000054	42800020		lix		r8,0x0020		; fill with spaces
00000055	429007FE		lix 	r9,0x7FE		; loopCount	(1K minus 1)
looper:
00000056	D4000008		bsr		putCharToScreen
00000057	20992000		add 	r9,r9,MINUS1	; decrement character counter
00000058	D2FFFFFE		bne		looper			; loop until complete
00000059	42800000		lix		r8,0x0			; Move cursor to home position
0000005a	D400002F		bsr		setCharPos
0000005b	A1804000		pull	r8
0000005c	A1904000		pull	r9
0000005d	A1704000		pull	PC				; rts

;
; putCharToScreen - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToScreen:
0000005e	A040B000		push	r11					; save r11
0000005f	A040A000		push	r10					; save r10
00000060	A0409000		push	r9					; save r9
00000061	A0406000		push	DAR
00000062	A0405000		push	PAR
00000063	42900003		lix		r9,screenPtr.lower	; r9 is the ptr to screenPtr
00000064	20690000		add		DAR,r9,ZERO			; DAR points to screenPtr
00000065	64A06000		ldl		r10					; r10 has screenPtr value
; look for specific characters
00000066	42B0007F		lix		r11,0x7F			; RUBOUT key
00000067	3038B000		cmp		r8,r11
00000068	D100000C		beq		gotBS
00000069	42B000E0		lix		r11,0xe0			; 0x0-0x1f are ctrl chars
0000006a	23BB8000		and		r11,r11,r8
0000006b	C7000014		bnz		notCtlChar
; Check for CR	
0000006c	42B0000D		lix		r11,0x0d			; CR
0000006d	3038B000		cmp		r8,r11
0000006e	D100000B		beq		gotCR
; Check for BELL
0000006f	42B00007		lix		r11,0x07			; BELL
00000070	3038B000		cmp		r8,r11
00000071	D2000011		bne		skipPrintChar
00000072	D4000025		bsr		makeBuzz
; Goes here
00000073	C000000F		bra		skipPrintChar
gotBS:
00000074	20AA2000		add		r10,r10,MINUS1
00000075	205A0000		add		PAR,r10,ZERO
00000076	42800020		lix		r8,0x20
00000077	81508000		spb		r8
00000078	C000000A		bra		skipPrintChar
gotCR:
00000079	42B0FFC0		lix		r11,0xffc0			; Go to the start of the line
0000007a	23AAB000		and		r10,r10,r11
0000007b	42B00040		lix		r11,0x40			; Go down a line
0000007c	20AAB000		add		r10,r10,r11
0000007d	205A1000		add		PAR,r10,ONE			; Set PAR to screenPtr
0000007e	C0000004		bra		skipPrintChar
notCtlChar:
0000007f	205A0000		add		PAR,r10,ZERO		; Set PAR to screenPtr
00000080	81508000		spb		r8					; write character to screen
00000081	20AA1000		add		r10,r10,ONE			; increment screen pointer
skipPrintChar:
00000082	6560A000		sdl		r10					; save new pointer
00000083	A1504000		pull 	PAR					; restore PAR
00000084	A1604000		pull 	DAR					; restore DAR
00000085	A1904000		pull 	r9					; restore r9
00000086	A1A04000		pull 	r10					; restore r10
00000087	A1B04000		pull 	r11					; restore r11
00000088	A1704000		pull	PC					; rts

;
; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; currCharLocPtr has the base address of the screen memory
; screenPtr contains the address of the current char position
;

setCharPos:
00000089	A0409000		push	r9						; save r9
0000008a	A040A000		push	r10						; save r10
0000008b	A0406000		push	DAR						; save DAR
0000008c	42A00004		lix		r10,currCharLocPtr.lower
0000008d	206A0000		add		DAR,r10,ZERO			; DAR points to the currCharLocPtr
0000008e	64A06000		ldl		r10						; r10 has the screen base address
0000008f	20A80000		add		r10,r8,ZERO				; add passed position to base
00000090	42900003		lix		r9,screenPtr.lower		; r9 is the ptr to screenPtr
00000091	20690000		add		DAR,r9,ZERO				; DAR points to screenPtr
00000092	6560A000		sdl		r10						; store new screen address
00000093	A1604000		pull	DAR						; restore DAR
00000094	A1A04000		pull	r10						; restore r10
00000095	A1904000		pull	r9						; restore r9
00000096	A1704000		pull	PC						; rts

makeBuzz:
00000097	A0408000		push	r8
00000098	42800000		lix		r8,0			; first note is 0
00000099	D4000007		bsr 	setNote
0000009a	D400000D		bsr		enableBuzzer
0000009b	428000FA		lix		r8,250			; count for 1 Sec
0000009c	D4000023		bsr		delay_mS		; call delay_ms
0000009d	D4000016		bsr		disableBuzzer
0000009e	A1804000		pull	r8
0000009f	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
000000a0	A0408000		push	r8
000000a1	A0405000		push	PAR
000000a2	42504000		lix		PAR,0x4000
000000a3	85508000		spl		r8
000000a4	A1504000		pull	PAR
000000a5	A1804000		pull	r8
000000a6	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
000000a7	A0409000		push	r9
000000a8	A0408000		push	r8
000000a9	A0405000		push	PAR
000000aa	42900010		lix		r9,0x0010		; Buzzer Enable line
000000ab	42502800		lix		PAR,0x2800
000000ac	84805000		lpl		r8
000000ad	22889000		or		r8,r8,r9
000000ae	85508000		spl		r8
000000af	A1504000		pull	PAR
000000b0	A1804000		pull	r8
000000b1	A1904000		pull	r9
000000b2	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
000000b3	A0409000		push	r9
000000b4	A0408000		push	r8
000000b5	A0405000		push	PAR
000000b6	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
000000b7	42502800		lix		PAR,0x2800
000000b8	84805000		lpl		r8
000000b9	23889000		and		r8,r8,r9
000000ba	85508000		spl		r8
000000bb	A1504000		pull	PAR
000000bc	A1804000		pull	r8
000000bd	A1904000		pull	r9
000000be	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Uses routine uses r9

delay_mS:
000000bf	A0409000		push	r9
000000c0	42503802		lix		PAR,0x3802		; address of the mSec counter
000000c1	84905000		lpl		r9				; read the peripheral counter into r9
000000c2	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000c3	84905000		lpl		r9				; check the elapsed time counter
000000c4	30389000		cmp		r8,r9
000000c5	CCFFFFFE		blt		loop_delay_mS
000000c6	A1904000		pull	r9
000000c7	A1704000		pull	PC
