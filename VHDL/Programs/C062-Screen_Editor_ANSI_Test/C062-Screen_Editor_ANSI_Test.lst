hello:	.string "R32V2020> "
screenPtr:	.long 0x0
currCharLocPtr:	.long 0x0

;
; Read UART character and put it to the XVGA Display
;

main:
00000000	42800000		lix		r8,hello.lower
00000001	D400001C		bsr		printString
readUartStatus:
00000002	D4000004		bsr		waitGetCharFromUART
putCharToScreenAndUART:
00000003	D4000045		bsr		putCharToScreen	; put the character to the screen
00000004	D400000B		bsr		putCharToUART
00000005	C0FFFFFD		bra		readUartStatus

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
00000006	A0405000		push	PAR
00000007	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
00000008	84805000		lpl		r8			; Read Status into r8
00000009	23881000		and 	r8,r8,ONE
0000000a	C3FFFFFE		bez 	waitUartRxStat
0000000b	42501801		lix 	PAR,0x1801
0000000c	84805000		lpl		r8
0000000d	A1504000		pull	PAR
0000000e	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
0000000f	A0409000		push	r9
00000010	A0405000		push	PAR
00000011	A040A000		push	r10
00000012	42A00002		lix		r10,0x2
00000013	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
00000014	84905000		lpl		r9			; Read Status into r9
00000015	2399A000		and 	r9,r9,r10
00000016	C3FFFFFE		bez 	waitUartTxStat
00000017	42501801		lix 	PAR,0x1801
00000018	85508000		spl		r8			; echo the character
00000019	A1A04000		pull	r10
0000001a	A1504000		pull	PAR
0000001b	A1904000		pull	r9
0000001c	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string
; strings are null terminated
; strings are bytes packed into long words
;

printString:
0000001d	A0408000		push	r8				; save r8
0000001e	A0409000		push	r9				; save r9
0000001f	A0406000		push	DAR
00000020	20680000		add		DAR,r8,ZERO		; set the start of the string
nextLong:
00000021	64806000		ldl		r8				; get the string
00000022	31808000		ens		r8,r8			; swap the endian
00000023	429000FF		lix		r9,0xff			; mask for null termination check
00000024	23998000		and		r9,r9,r8
00000025	C3000013		bez		donePrStr
00000026	D4000022		bsr		putCharToScreen	; write out the character
00000027	28808000		sr8		r8,r8
00000028	429000FF		lix		r9,0xff			; mask for null termination check
00000029	23998000		and		r9,r9,r8
0000002a	C300000E		bez		donePrStr
0000002b	D400001D		bsr		putCharToScreen	; write out the character
0000002c	28808000		sr8		r8,r8
0000002d	429000FF		lix		r9,0xff			; mask for null termination check
0000002e	23998000		and		r9,r9,r8
0000002f	C3000009		bez		donePrStr
00000030	D4000018		bsr		putCharToScreen	; write out the character
00000031	28808000		sr8		r8,r8
00000032	429000FF		lix		r9,0xff			; mask for null termination check
00000033	23998000		and		r9,r9,r8
00000034	C3000004		bez		donePrStr
00000035	D4000013		bsr		putCharToScreen	; write out the character
lastOfLong:
00000036	20661000		add		DAR,DAR,ONE
00000037	C0FFFFEA		bra		nextLong
donePrStr:
00000038	A1604000		pull	DAR				; restore DAR
00000039	A1904000		pull	r9				; restore r9
0000003a	A1804000		pull	r8				; restore r8
0000003b	A1704000		pull	PC				; rts
	
;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
; Sets the pointer to the screen to the first location
;

clearScreen:
0000003c	A0409000		push	r9				; save r9
0000003d	A0408000		push	r8				; save r8
0000003e	42800020		lix		r8,0x0020		; fill with spaces
0000003f	429007FE		lix 	r9,0x7FE		; loopCount	(1K minus 1)
looper:
00000040	D4000008		bsr		putCharToScreen
00000041	20992000		add 	r9,r9,MINUS1	; decrement character counter
00000042	D2FFFFFE		bne		looper			; loop until complete
00000043	42800000		lix		r8,0x0			; Move cursor to home position
00000044	D4000009		bsr		setCharPos
00000045	A1804000		pull	r8
00000046	A1904000		pull	r9
00000047	A1704000		pull	PC				; rts

;
; putCharToScreen - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToScreen:
00000048	A0405000		push	PAR
00000049	42500001		lix		PAR,0x1
0000004a	85508000		spl		r8
0000004b	A1504000		pull 	PAR					; restore PAR
0000004c	A1704000		pull	PC					; rts

;
; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; currCharLocPtr has the base address of the screen memory
; screenPtr contains the address of the current char position
;

setCharPos:
0000004d	A0409000		push	r9						; save r9
0000004e	A040A000		push	r10						; save r10
0000004f	A0406000		push	DAR						; save DAR
00000050	42A00004		lix		r10,currCharLocPtr.lower
00000051	206A0000		add		DAR,r10,ZERO			; DAR points to the currCharLocPtr
00000052	64A06000		ldl		r10						; r10 has the screen base address
00000053	20A80000		add		r10,r8,ZERO				; add passed position to base
00000054	42900003		lix		r9,screenPtr.lower		; r9 is the ptr to screenPtr
00000055	20690000		add		DAR,r9,ZERO				; DAR points to screenPtr
00000056	6560A000		sdl		r10						; store new screen address
00000057	A1604000		pull	DAR						; restore DAR
00000058	A1A04000		pull	r10						; restore r10
00000059	A1904000		pull	r9						; restore r9
0000005a	A1704000		pull	PC						; rts

makeBuzz:
0000005b	A0408000		push	r8
0000005c	42800000		lix		r8,0			; first note is 0
0000005d	D4000007		bsr 	setNote
0000005e	D400000D		bsr		enableBuzzer
0000005f	428000FA		lix		r8,250			; count for 1 Sec
00000060	D4000023		bsr		delay_mS		; call delay_ms
00000061	D4000016		bsr		disableBuzzer
00000062	A1804000		pull	r8
00000063	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
00000064	A0408000		push	r8
00000065	A0405000		push	PAR
00000066	42504000		lix		PAR,0x4000
00000067	85508000		spl		r8
00000068	A1504000		pull	PAR
00000069	A1804000		pull	r8
0000006a	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
0000006b	A0409000		push	r9
0000006c	A0408000		push	r8
0000006d	A0405000		push	PAR
0000006e	42900010		lix		r9,0x0010		; Buzzer Enable line
0000006f	42502800		lix		PAR,0x2800
00000070	84805000		lpl		r8
00000071	22889000		or		r8,r8,r9
00000072	85508000		spl		r8
00000073	A1504000		pull	PAR
00000074	A1804000		pull	r8
00000075	A1904000		pull	r9
00000076	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
00000077	A0409000		push	r9
00000078	A0408000		push	r8
00000079	A0405000		push	PAR
0000007a	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
0000007b	42502800		lix		PAR,0x2800
0000007c	84805000		lpl		r8
0000007d	23889000		and		r8,r8,r9
0000007e	85508000		spl		r8
0000007f	A1504000		pull	PAR
00000080	A1804000		pull	r8
00000081	A1904000		pull	r9
00000082	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Uses routine uses r9

delay_mS:
00000083	A0409000		push	r9
00000084	42503802		lix		PAR,0x3802		; address of the mSec counter
00000085	84905000		lpl		r9				; read the peripheral counter into r9
00000086	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
00000087	84905000		lpl		r9				; check the elapsed time counter
00000088	30389000		cmp		r8,r9
00000089	CCFFFFFE		blt		loop_delay_mS
0000008a	A1904000		pull	r9
0000008b	A1704000		pull	PC
