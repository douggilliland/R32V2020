prompt:			.string "R32V2020> "
i2c_addr_wr:	.byte 0x40
i2c_addr_rd:	.byte 0x41
i2c_reg_addr:	.byte 0x00
i2c_wr_val:		.byte 0x00

;
; main
; Read I2C and write it back out
;

main:
00000000	D40000AA		bsr		clearScreen
00000001	42800000		lix		r8,prompt.lower
00000002	D4000089		bsr		printString
00000003	D400000B		bsr		initDir_I2CIO8
loopMain:
	;lix		r8,0x50
00000004	D4000033		bsr		readI2CDat_MCP23008
00000005	27808000		sr1		r8,r8
00000006	27808000		sr1		r8,r8
00000007	27808000		sr1		r8,r8
00000008	27808000		sr1		r8,r8
00000009	D4000020		bsr		writeI2CAdrDat_MCP23008
0000000a	4280000A		lix		r8,10
0000000b	D40000E0		bsr		delay_mS
0000000c	C0FFFFF8		bra		loopMain
	
loopForever:
0000000d	C0000000		bra		loopForever
	
;
; initDir_I2CIO8 - Set IO Dir
;

initDir_I2CIO8:
0000000e	A0408000		push	r8
	; Write 0x22 to IOCON register (not sequential operations)
0000000f	42800001		lix		r8,0x01		; I2C_Ctrl = START
00000010	D400004A		bsr		write_I2C_Ctrl_Reg
00000011	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
00000012	D4000039		bsr		write_I2C_Data_Address_Reg
00000013	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
00000014	D4000046		bsr		write_I2C_Ctrl_Reg
00000015	42800005		lix		r8,0x05		; MCP23008 IOCON
00000016	D4000035		bsr		write_I2C_Data_Address_Reg
00000017	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
00000018	D4000042		bsr		write_I2C_Ctrl_Reg	
00000019	42800022		lix		r8,0x22		; SEQOP = Disabled, INTPOL = Active-high
0000001a	D4000031		bsr		write_I2C_Data_Address_Reg
	; Write 0xF0 to Direction Control register
0000001b	42800001		lix		r8,0x01		; I2C_Ctrl = START
0000001c	D400003E		bsr		write_I2C_Ctrl_Reg
0000001d	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
0000001e	D400002D		bsr		write_I2C_Data_Address_Reg
0000001f	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
00000020	D400003A		bsr		write_I2C_Ctrl_Reg
00000021	42800000		lix		r8,0x00		; MCP23008 IODIR
00000022	D4000029		bsr		write_I2C_Data_Address_Reg
00000023	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
00000024	D4000036		bsr		write_I2C_Ctrl_Reg
00000025	428000F0		lix		r8,0xF0		; Input and output bits
00000026	D4000025		bsr		write_I2C_Data_Address_Reg
00000027	A1804000		pull	r8
00000028	A1704000		pull	PC

; writeI2CAdrDat_MCP23008 - Write address to the I2C bus
; Address 0x5800 -> DATA (write/read) or SLAVE ADDRESS (write)  
; Address 0x5801 -> Command/Status Register (write/read)
; r8 is the value to write

writeI2CAdrDat_MCP23008:
00000029	A0408000		push	r8
0000002a	42800001		lix		r8,0x01		; I2C_Ctrl = START
0000002b	D400002F		bsr		write_I2C_Ctrl_Reg
0000002c	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
0000002d	D400001E		bsr		write_I2C_Data_Address_Reg
0000002e	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
0000002f	D400002B		bsr		write_I2C_Ctrl_Reg	
00000030	4280000A		lix		r8,0x0A		; MCP23008 OLAT
00000031	D400001A		bsr		write_I2C_Data_Address_Reg
00000032	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
00000033	D4000027		bsr		write_I2C_Ctrl_Reg	
00000034	A1804000		pull	r8			; Data to write is in r8
00000035	D4000016		bsr		write_I2C_Data_Address_Reg
00000036	A1704000		pull	PC
	
; readI2CDat_MCP23008 - Read data from the I2C bus
; Address 0x5800 -> DATA (write/read) or SLAVE ADDRESS (write)  
; Address 0x5801 -> Command/Status Register (write/read)
; r8 is the value to write

readI2CDat_MCP23008:
	; write the GPIO address register
00000037	42800001		lix		r8,0x01		; I2C_Ctrl = START
00000038	D4000022		bsr		write_I2C_Ctrl_Reg
00000039	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
0000003a	D4000011		bsr		write_I2C_Data_Address_Reg
0000003b	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
0000003c	D400001E		bsr		write_I2C_Ctrl_Reg	
0000003d	42800009		lix		r8,0x09		; MCP23008 - GPIO register address
0000003e	D400000D		bsr		write_I2C_Data_Address_Reg
	; Read the GPIO line value
0000003f	42800001		lix		r8,0x01		; I2C_Ctrl = START
00000040	D400001A		bsr		write_I2C_Ctrl_Reg
00000041	42800041		lix		r8,0x41		; I2C read command at slave address = 0x20
00000042	D4000009		bsr		write_I2C_Data_Address_Reg
00000043	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
00000044	D4000016		bsr		write_I2C_Ctrl_Reg	
00000045	D400000C		bsr		read_I2C_Data_Reg
00000046	A0408000		push	r8
00000047	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
00000048	D4000012		bsr		write_I2C_Ctrl_Reg	
00000049	A1804000		pull	r8
0000004a	A1704000		pull	PC
	
;
; write_I2C_Data_Address_Reg
;

write_I2C_Data_Address_Reg:
0000004b	A0405000		push	PAR
0000004c	42505800		lix		PAR,0x5800	; I2C Address/register
0000004d	85508000		spl		r8			; Write control register
0000004e	D4000011		bsr		i2c_ack
;	lix		r8,20
;	bsr		delay_uS
0000004f	A1504000		pull	PAR
00000050	A1704000		pull	PC

;
; read_I2C_Data_Reg - Read I2C data into r8
;

read_I2C_Data_Reg:
00000051	A0405000		push	PAR
00000052	42505800		lix		PAR,0x5800	; I2C Data Address
00000053	42800054		lix		r8,0x54
00000054	85508000		spl		r8
00000055	D400000A		bsr		i2c_ack
00000056	42505800		lix		PAR,0x5800	; I2C Data Address
00000057	84805000		lpl		r8
00000058	A1504000		pull	PAR
00000059	A1704000		pull	PC
	
;
; write_I2C_Ctrl_Reg
; Command Register (write):
;	bit 7-2	= Reserved
;	bit 1-0	= 
;		00: IDLE
;		01: START
;		10: nSTART
;		11: STOP
;

write_I2C_Ctrl_Reg:
0000005a	A0405000		push	PAR
0000005b	42505801		lix		PAR,0x5801	; I2C Control register
0000005c	85508000		spl		r8			; Write control register
0000005d	A1504000		pull	PAR
0000005e	A1704000		pull	PC

;
; i2c_ack - wait for transfer to complete
; Status Register (read):
;	bit 7-2	= Reserved
;	bit 1 	= ERROR 	(I2C transaction error)
;	bit 0 	= BUSY 	(I2C bus busy)
;

i2c_ack:
0000005f	A0405000		push	PAR
00000060	42505801		lix		PAR,0x5801	; Control register
i2c_ack_loop:
00000061	84805000		lpl		r8
00000062	23881000		and		r8,r8,r1	; busy bit is least significant bit
00000063	C4FFFFFE		be1		i2c_ack_loop
00000064	A1504000		pull	PAR
00000065	A1704000		pull	PC

; readI2CStatus - Read I2C status into r8
; Command/Status Register (write/read)
; Command/Status Register (read):
;	bit 7-2	= Reserved
;	bit 1 	= ERROR (I2C transaction error)
;	bit 0 	= BUSY  (I2C bus busy)

readI2CStatus:
00000066	A0405000		push	PAR
00000067	42505801		lix		PAR,0x5801	; I2C Command Status Address
00000068	84805000		lpl		r8
00000069	A1504000		pull	PAR
0000006a	A1704000		pull	PC
	
; writeI2CCommand - write data from r8 to the I2C command register
; Write to the command register before writing to the data register
; Command/Status Register (write):
; 	bit 7-2	= Reserved
;	bit 1-0	= Mode
;		00: IDLE; 
;		01: START
;		10: nSTART
;		11: STOP

writeI2CCommand:
0000006b	A0405000		push	PAR
0000006c	42505801		lix		PAR,0x5801	; I2C Command Status Address
0000006d	85508000		spl		r8
0000006e	A1504000		pull	PAR
0000006f	A1704000		pull	PC
	
;
; readUartStatus
;
	
readUartStatus:
00000070	D4000004		bsr		waitGetCharFromUART
putCharToANSIScreenAndUART:
00000071	D4000044		bsr		putCharToANSIScreen	; put the character to the screen
00000072	D400000B		bsr		putCharToUART
00000073	C0FFFFFD		bra		readUartStatus

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
00000074	A0405000		push	PAR
00000075	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
00000076	84805000		lpl		r8			; Read Status into r8
00000077	23881000		and 	r8,r8,ONE
00000078	C3FFFFFE		bez 	waitUartRxStat
00000079	42501801		lix 	PAR,0x1801
0000007a	84805000		lpl		r8
0000007b	A1504000		pull	PAR
0000007c	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
0000007d	A0409000		push	r9
0000007e	A0405000		push	PAR
0000007f	A040A000		push	r10
00000080	42A00002		lix		r10,0x2
00000081	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
00000082	84905000		lpl		r9			; Read Status into r9
00000083	2399A000		and 	r9,r9,r10
00000084	C3FFFFFE		bez 	waitUartTxStat
00000085	42501801		lix 	PAR,0x1801
00000086	85508000		spl		r8			; echo the character
00000087	A1A04000		pull	r10
00000088	A1504000		pull	PAR
00000089	A1904000		pull	r9
0000008a	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
0000008b	A0408000		push	r8				; save r8
0000008c	A0409000		push	r9				; save r9
0000008d	A0406000		push	DAR
0000008e	20680000		add		DAR,r8,ZERO		; set the start of the string
nextLong:
0000008f	64806000		ldl		r8				; get the string
00000090	31808000		ens		r8,r8			; swap the endian
00000091	429000FF		lix		r9,0xff			; mask for null termination check
00000092	23998000		and		r9,r9,r8
00000093	C3000013		bez		donePrStr
00000094	D4000021		bsr		putCharToANSIScreen	; write out the character
00000095	28808000		sr8		r8,r8
00000096	429000FF		lix		r9,0xff			; mask for null termination check
00000097	23998000		and		r9,r9,r8
00000098	C300000E		bez		donePrStr
00000099	D400001C		bsr		putCharToANSIScreen	; write out the character
0000009a	28808000		sr8		r8,r8
0000009b	429000FF		lix		r9,0xff			; mask for null termination check
0000009c	23998000		and		r9,r9,r8
0000009d	C3000009		bez		donePrStr
0000009e	D4000017		bsr		putCharToANSIScreen	; write out the character
0000009f	28808000		sr8		r8,r8
000000a0	429000FF		lix		r9,0xff			; mask for null termination check
000000a1	23998000		and		r9,r9,r8
000000a2	C3000004		bez		donePrStr
000000a3	D4000012		bsr		putCharToANSIScreen	; write out the character
lastOfLong:
000000a4	20661000		add		DAR,DAR,ONE
000000a5	C0FFFFEA		bra		nextLong
donePrStr:
000000a6	A1604000		pull	DAR				; restore DAR
000000a7	A1904000		pull	r9				; restore r9
000000a8	A1804000		pull	r8				; restore r8
000000a9	A1704000		pull	PC				; rts
	
;
; clearScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen:
000000aa	A0408000		push	r8				; save r8
000000ab	4280001B		lix		r8,0x1b			; ESC
000000ac	D4000009		bsr		putCharToANSIScreen
000000ad	4280005B		lix		r8,0x5b			; [
000000ae	D4000007		bsr		putCharToANSIScreen
000000af	42800032		lix		r8,0x32			; 2
000000b0	D4000005		bsr		putCharToANSIScreen
000000b1	4280004A		lix		r8,0x4A			; J
000000b2	D4000003		bsr		putCharToANSIScreen
000000b3	A1804000		pull	r8
000000b4	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToANSIScreen:
000000b5	A0409000		push	r9
000000b6	A0405000		push	PAR
000000b7	A040A000		push	r10
000000b8	42A00002		lix		r10,0x2		; TxReady bit
000000b9	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
000000ba	84905000		lpl		r9			; Read Status into r9
000000bb	2399A000		and 	r9,r9,r10
000000bc	C3FFFFFE		bez 	waitScreenTxStat
000000bd	42500001		lix 	PAR,0x1
000000be	85508000		spl		r8			; echo the character
000000bf	A1A04000		pull	r10
000000c0	A1504000		pull	PAR
000000c1	A1904000		pull	r9
000000c2	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
000000c3	A0408000		push	r8
000000c4	42800000		lix		r8,0			; first note is 0
000000c5	D4000007		bsr 	setNote
000000c6	D400000D		bsr		enableBuzzer
000000c7	428000FA		lix		r8,250			; count for 1 Sec
000000c8	D4000023		bsr		delay_mS		; call delay_ms
000000c9	D4000016		bsr		disableBuzzer
000000ca	A1804000		pull	r8
000000cb	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
000000cc	A0408000		push	r8
000000cd	A0405000		push	PAR
000000ce	42504000		lix		PAR,0x4000
000000cf	85508000		spl		r8
000000d0	A1504000		pull	PAR
000000d1	A1804000		pull	r8
000000d2	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
000000d3	A0409000		push	r9
000000d4	A0408000		push	r8
000000d5	A0405000		push	PAR
000000d6	42900010		lix		r9,0x0010		; Buzzer Enable line
000000d7	42502800		lix		PAR,0x2800
000000d8	84805000		lpl		r8
000000d9	22889000		or		r8,r8,r9
000000da	85508000		spl		r8
000000db	A1504000		pull	PAR
000000dc	A1804000		pull	r8
000000dd	A1904000		pull	r9
000000de	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
000000df	A0409000		push	r9
000000e0	A0408000		push	r8
000000e1	A0405000		push	PAR
000000e2	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
000000e3	42502800		lix		PAR,0x2800
000000e4	84805000		lpl		r8
000000e5	23889000		and		r8,r8,r9
000000e6	85508000		spl		r8
000000e7	A1504000		pull	PAR
000000e8	A1804000		pull	r8
000000e9	A1904000		pull	r9
000000ea	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
000000eb	A0409000		push	r9
000000ec	A0405000		push	PAR
000000ed	42503802		lix		PAR,0x3802		; address of the mSec counter
000000ee	84905000		lpl		r9				; read the peripheral counter into r9
000000ef	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000f0	84905000		lpl		r9				; check the elapsed time counter
000000f1	30389000		cmp		r8,r9
000000f2	CCFFFFFE		blt		loop_delay_mS
000000f3	A1504000		pull	PAR
000000f4	A1904000		pull	r9
000000f5	A1704000		pull	PC

;	
; delay_uS - delay for the number of uSecs
; pass mSec delay in r8
; Uses routine uses r9 (saved and restored)
;

delay_uS:
000000f6	A0409000		push	r9
000000f7	A0405000		push	PAR
000000f8	42503801		lix		PAR,0x3801		; address of the uSec counter
000000f9	84905000		lpl		r9				; read the peripheral counter into r9
000000fa	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_uS:
000000fb	84905000		lpl		r9				; check the elapsed time counter
000000fc	30389000		cmp		r8,r9
000000fd	CCFFFFFE		blt		loop_delay_uS
000000fe	A1504000		pull	PAR
000000ff	A1904000		pull	r9
00000100	A1704000		pull	PC
