; 
; Uses I2CIO-8 card
;	http://land-boards.com/blwiki/index.php?title=I2CIO-8
;	Card has an MCP23008 I/O Expander IC
;	d0-d3 = LEDs
;	d4-d7 = Headers
; 

prompt:			.string "R32V2020> "
; Not using the following data values but included for future use
i2c_addr_wr:	.byte 0x40
i2c_addr_rd:	.byte 0x41
i2c_reg_addr:	.byte 0x00
i2c_wr_val:		.byte 0x00

;
; main
; Read I2C and write it back out
;

main:
00000000	D40000A1		bsr		clearScreen			; Not required for this example
00000001	42800000		lix		r8,prompt.lower
00000002	D4000080		bsr		printString
; Code to initialize I2CIO8 card then read/write loop
00000003	D400000C		bsr		init_Regs_I2CIO8	; initialize the MCP23008 on the I2CIO8
loopMain:
00000004	D4000034		bsr		readI2CDat_MCP23008	; read headers
00000005	27808000		sr1		r8,r8				; shift header data down to LEDs
00000006	27808000		sr1		r8,r8
00000007	27808000		sr1		r8,r8
00000008	27808000		sr1		r8,r8
00000009	24882000		xor		r8,r8,MINUS1		; invert headers
0000000a	D4000020		bsr		wrI2CAdrDat_MCP23008	; write to LEDs
0000000b	4280000A		lix		r8,10
0000000c	D40000D6		bsr		delay_mS
0000000d	C0FFFFF7		bra		loopMain
loopForever:
0000000e	C0000000		bra		loopForever
	
;
; init_Regs_I2CIO8 - Set IO Dir
;

init_Regs_I2CIO8:
0000000f	A0408000		push	r8
	; Write 0x22 to IOCON register (not sequential operations)
00000010	42800001		lix		r8,0x01		; I2C_Ctrl = START
00000011	D400004A		bsr		write_I2C_Ctrl_Reg
00000012	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
00000013	D4000039		bsr		write_I2C_Data_Address_Reg
00000014	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
00000015	D4000046		bsr		write_I2C_Ctrl_Reg
00000016	42800005		lix		r8,0x05		; MCP23008 IOCON
00000017	D4000035		bsr		write_I2C_Data_Address_Reg
00000018	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
00000019	D4000042		bsr		write_I2C_Ctrl_Reg	
0000001a	42800022		lix		r8,0x22		; SEQOP = Disabled, INTPOL = Active-high
0000001b	D4000031		bsr		write_I2C_Data_Address_Reg
	; Write 0xF0 to Direction Control register
0000001c	42800001		lix		r8,0x01		; I2C_Ctrl = START
0000001d	D400003E		bsr		write_I2C_Ctrl_Reg
0000001e	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
0000001f	D400002D		bsr		write_I2C_Data_Address_Reg
00000020	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
00000021	D400003A		bsr		write_I2C_Ctrl_Reg
00000022	42800000		lix		r8,0x00		; MCP23008 IODIR
00000023	D4000029		bsr		write_I2C_Data_Address_Reg
00000024	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
00000025	D4000036		bsr		write_I2C_Ctrl_Reg
00000026	428000F0		lix		r8,0xF0		; Input and output bits
00000027	D4000025		bsr		write_I2C_Data_Address_Reg
00000028	A1804000		pull	r8
00000029	A1704000		pull	PC

;
; wrI2CAdrDat_MCP23008 - Write address to the I2C bus
; Address 0x5800 -> DATA (write/read) or SLAVE ADDRESS (write)  
; Address 0x5801 -> Command/Status Register (write/read)
; r8 is the value to write
;

wrI2CAdrDat_MCP23008:
0000002a	A0408000		push	r8
0000002b	42800001		lix		r8,0x01		; I2C_Ctrl = START
0000002c	D400002F		bsr		write_I2C_Ctrl_Reg
0000002d	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
0000002e	D400001E		bsr		write_I2C_Data_Address_Reg
0000002f	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
00000030	D400002B		bsr		write_I2C_Ctrl_Reg	
00000031	4280000A		lix		r8,0x0A		; MCP23008 OLAT
00000032	D400001A		bsr		write_I2C_Data_Address_Reg
00000033	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
00000034	D4000027		bsr		write_I2C_Ctrl_Reg	
00000035	A1804000		pull	r8			; Data to write is in r8
00000036	D4000016		bsr		write_I2C_Data_Address_Reg
00000037	A1704000		pull	PC
	
;
; readI2CDat_MCP23008 - Read data from the I2C bus
; Address 0x5800 -> DATA (write/read) or SLAVE ADDRESS (write)  
; Address 0x5801 -> Command/Status Register (write/read)
; r8 is the value to write
;

readI2CDat_MCP23008:
	; write the GPIO address register
00000038	42800001		lix		r8,0x01		; I2C_Ctrl = START
00000039	D4000022		bsr		write_I2C_Ctrl_Reg
0000003a	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
0000003b	D4000011		bsr		write_I2C_Data_Address_Reg
0000003c	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
0000003d	D400001E		bsr		write_I2C_Ctrl_Reg	
0000003e	42800009		lix		r8,0x09		; MCP23008 - GPIO register address
0000003f	D400000D		bsr		write_I2C_Data_Address_Reg
	; Read the GPIO line value
00000040	42800001		lix		r8,0x01		; I2C_Ctrl = START
00000041	D400001A		bsr		write_I2C_Ctrl_Reg
00000042	42800041		lix		r8,0x41		; I2C read command at slave address = 0x20
00000043	D4000009		bsr		write_I2C_Data_Address_Reg
00000044	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
00000045	D4000016		bsr		write_I2C_Ctrl_Reg	
00000046	D400000C		bsr		read_I2C_Data_Reg
00000047	A0408000		push	r8
00000048	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
00000049	D4000012		bsr		write_I2C_Ctrl_Reg	
0000004a	A1804000		pull	r8
0000004b	A1704000		pull	PC
	
;
; write_I2C_Data_Address_Reg
;

write_I2C_Data_Address_Reg:
0000004c	A0405000		push	PAR
0000004d	42505800		lix		PAR,0x5800	; I2C Address/register
0000004e	85508000		spl		r8			; Write control register
0000004f	D4000011		bsr		i2c_ack
;	lix		r8,20
;	bsr		delay_uS
00000050	A1504000		pull	PAR
00000051	A1704000		pull	PC

;
; read_I2C_Data_Reg - Read I2C data into r8
;

read_I2C_Data_Reg:
00000052	A0405000		push	PAR
00000053	42505800		lix		PAR,0x5800	; I2C Data Address
00000054	42800054		lix		r8,0x54
00000055	85508000		spl		r8
00000056	D400000A		bsr		i2c_ack
00000057	42505800		lix		PAR,0x5800	; I2C Data Address
00000058	84805000		lpl		r8
00000059	A1504000		pull	PAR
0000005a	A1704000		pull	PC
	
;
; write_I2C_Ctrl_Reg
; Command Register (write):
;	bit 7-2	= Reserved
;	bit 1-0	= 
;		00: IDLE
;		01: START
;		10: nSTART
;		11: STOP
;

write_I2C_Ctrl_Reg:
0000005b	A0405000		push	PAR
0000005c	42505801		lix		PAR,0x5801	; I2C Control register
0000005d	85508000		spl		r8			; Write control register
0000005e	A1504000		pull	PAR
0000005f	A1704000		pull	PC

;
; i2c_ack - wait for transfer to complete
; Status Register (read):
;	bit 7-2	= Reserved
;	bit 1 	= ERROR 	(I2C transaction error)
;	bit 0 	= BUSY 	(I2C bus busy)
;

i2c_ack:
00000060	A0405000		push	PAR
00000061	42505801		lix		PAR,0x5801	; Control register
i2c_ack_loop:
00000062	84805000		lpl		r8
00000063	23881000		and		r8,r8,r1	; busy bit is least significant bit
00000064	C4FFFFFE		be1		i2c_ack_loop
00000065	A1504000		pull	PAR
00000066	A1704000		pull	PC

;
; readUartStatus
;
	
readUartStatus:
00000067	D4000004		bsr		waitGetCharFromUART
putCharToANSIScreenAndUART:
00000068	D4000044		bsr		putCharToANSIScreen	; put the character to the screen
00000069	D400000B		bsr		putCharToUART
0000006a	C0FFFFFD		bra		readUartStatus

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
0000006b	A0405000		push	PAR
0000006c	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
0000006d	84805000		lpl		r8			; Read Status into r8
0000006e	23881000		and 	r8,r8,ONE
0000006f	C3FFFFFE		bez 	waitUartRxStat
00000070	42501801		lix 	PAR,0x1801
00000071	84805000		lpl		r8
00000072	A1504000		pull	PAR
00000073	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
00000074	A0409000		push	r9
00000075	A0405000		push	PAR
00000076	A040A000		push	r10
00000077	42A00002		lix		r10,0x2
00000078	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
00000079	84905000		lpl		r9			; Read Status into r9
0000007a	2399A000		and 	r9,r9,r10
0000007b	C3FFFFFE		bez 	waitUartTxStat
0000007c	42501801		lix 	PAR,0x1801
0000007d	85508000		spl		r8			; echo the character
0000007e	A1A04000		pull	r10
0000007f	A1504000		pull	PAR
00000080	A1904000		pull	r9
00000081	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
00000082	A0408000		push	r8				; save r8
00000083	A0409000		push	r9				; save r9
00000084	A0406000		push	DAR
00000085	20680000		add		DAR,r8,ZERO		; set the start of the string
nextLong:
00000086	64806000		ldl		r8				; get the string
00000087	31808000		ens		r8,r8			; swap the endian
00000088	429000FF		lix		r9,0xff			; mask for null termination check
00000089	23998000		and		r9,r9,r8
0000008a	C3000013		bez		donePrStr
0000008b	D4000021		bsr		putCharToANSIScreen	; write out the character
0000008c	28808000		sr8		r8,r8
0000008d	429000FF		lix		r9,0xff			; mask for null termination check
0000008e	23998000		and		r9,r9,r8
0000008f	C300000E		bez		donePrStr
00000090	D400001C		bsr		putCharToANSIScreen	; write out the character
00000091	28808000		sr8		r8,r8
00000092	429000FF		lix		r9,0xff			; mask for null termination check
00000093	23998000		and		r9,r9,r8
00000094	C3000009		bez		donePrStr
00000095	D4000017		bsr		putCharToANSIScreen	; write out the character
00000096	28808000		sr8		r8,r8
00000097	429000FF		lix		r9,0xff			; mask for null termination check
00000098	23998000		and		r9,r9,r8
00000099	C3000004		bez		donePrStr
0000009a	D4000012		bsr		putCharToANSIScreen	; write out the character
lastOfLong:
0000009b	20661000		add		DAR,DAR,ONE
0000009c	C0FFFFEA		bra		nextLong
donePrStr:
0000009d	A1604000		pull	DAR				; restore DAR
0000009e	A1904000		pull	r9				; restore r9
0000009f	A1804000		pull	r8				; restore r8
000000a0	A1704000		pull	PC				; rts
	
;
; clearScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen:
000000a1	A0408000		push	r8				; save r8
000000a2	4280001B		lix		r8,0x1b			; ESC
000000a3	D4000009		bsr		putCharToANSIScreen
000000a4	4280005B		lix		r8,0x5b			; [
000000a5	D4000007		bsr		putCharToANSIScreen
000000a6	42800032		lix		r8,0x32			; 2
000000a7	D4000005		bsr		putCharToANSIScreen
000000a8	4280004A		lix		r8,0x4A			; J
000000a9	D4000003		bsr		putCharToANSIScreen
000000aa	A1804000		pull	r8
000000ab	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToANSIScreen:
000000ac	A0409000		push	r9
000000ad	A0405000		push	PAR
000000ae	A040A000		push	r10
000000af	42A00002		lix		r10,0x2		; TxReady bit
000000b0	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
000000b1	84905000		lpl		r9			; Read Status into r9
000000b2	2399A000		and 	r9,r9,r10
000000b3	C3FFFFFE		bez 	waitScreenTxStat
000000b4	42500001		lix 	PAR,0x1
000000b5	85508000		spl		r8			; echo the character
000000b6	A1A04000		pull	r10
000000b7	A1504000		pull	PAR
000000b8	A1904000		pull	r9
000000b9	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
000000ba	A0408000		push	r8
000000bb	42800000		lix		r8,0			; first note is 0
000000bc	D4000007		bsr 	setNote
000000bd	D400000D		bsr		enableBuzzer
000000be	428000FA		lix		r8,250			; count for 1 Sec
000000bf	D4000023		bsr		delay_mS		; call delay_ms
000000c0	D4000016		bsr		disableBuzzer
000000c1	A1804000		pull	r8
000000c2	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
000000c3	A0408000		push	r8
000000c4	A0405000		push	PAR
000000c5	42504000		lix		PAR,0x4000
000000c6	85508000		spl		r8
000000c7	A1504000		pull	PAR
000000c8	A1804000		pull	r8
000000c9	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
000000ca	A0409000		push	r9
000000cb	A0408000		push	r8
000000cc	A0405000		push	PAR
000000cd	42900010		lix		r9,0x0010		; Buzzer Enable line
000000ce	42502800		lix		PAR,0x2800
000000cf	84805000		lpl		r8
000000d0	22889000		or		r8,r8,r9
000000d1	85508000		spl		r8
000000d2	A1504000		pull	PAR
000000d3	A1804000		pull	r8
000000d4	A1904000		pull	r9
000000d5	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
000000d6	A0409000		push	r9
000000d7	A0408000		push	r8
000000d8	A0405000		push	PAR
000000d9	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
000000da	42502800		lix		PAR,0x2800
000000db	84805000		lpl		r8
000000dc	23889000		and		r8,r8,r9
000000dd	85508000		spl		r8
000000de	A1504000		pull	PAR
000000df	A1804000		pull	r8
000000e0	A1904000		pull	r9
000000e1	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
000000e2	A0409000		push	r9
000000e3	A0405000		push	PAR
000000e4	42503802		lix		PAR,0x3802		; address of the mSec counter
000000e5	84905000		lpl		r9				; read the peripheral counter into r9
000000e6	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000e7	84905000		lpl		r9				; check the elapsed time counter
000000e8	30389000		cmp		r8,r9
000000e9	CCFFFFFE		blt		loop_delay_mS
000000ea	A1504000		pull	PAR
000000eb	A1904000		pull	r9
000000ec	A1704000		pull	PC

;	
; delay_uS - delay for the number of uSecs
; pass mSec delay in r8
; Uses routine uses r9 (saved and restored)
;

delay_uS:
000000ed	A0409000		push	r9
000000ee	A0405000		push	PAR
000000ef	42503801		lix		PAR,0x3801		; address of the uSec counter
000000f0	84905000		lpl		r9				; read the peripheral counter into r9
000000f1	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_uS:
000000f2	84905000		lpl		r9				; check the elapsed time counter
000000f3	30389000		cmp		r8,r9
000000f4	CCFFFFFE		blt		loop_delay_uS
000000f5	A1504000		pull	PAR
000000f6	A1904000		pull	r9
000000f7	A1704000		pull	PC
