; Read Switches and put to Seven Segment LED Display
hello:	.string "R32V2020> "
screenPtr:	.long 0x0000
screenBase:	.long 0x0

;
; Read Switches and put to the Seven Segment LED Display
;

main:
00000000	D400006E		bsr	clearScreen
00000001	42800000		lix	r8,0x0			; Move cursor to home position
00000002	D4000089		bsr	setCharPos
readDataMemory:
00000003	41800000		liu	r8,hello.upper
00000004	40800000		lil	r8,hello.lower
00000005	D400004A		bsr	printString
00000006	42901000		lix	r9,0x1000			; ring has been circled
reload:
00000007	42800001		lix	r8,1
loopReadSwitches:
00000008	D4000009		bsr	putValueToRingLEDs	; put the switches to the 7 Segment LED
00000009	A0408000		pss	r8
0000000a	428003E8		lix	r8,1000				; wait for 1 second
0000000b	D400000E		bsr	delay_mS
0000000c	A1804000		pus	r8
0000000d	25808000		ls1	r8,r8
0000000e	30389000		cmp	r8,r9
0000000f	D2FFFFF9		bne	loopReadSwitches
00000010	C0FFFFF7		bra	reload

; putValueToRingLEDs
; passed r8 - value to send to the ring LEDs

putValueToRingLEDs:
00000011	A0405000		pss	PAR
00000012	A0408000		pss	r8
00000013	41500000		liu	PAR,0x0000
00000014	40504800		lil	PAR,0x4800		; Ring LED address
00000015	85508000		spl	r8				; Write out LED bits
00000016	A1804000		pus	r8
00000017	A1504000		pus	PAR
00000018	A1704000		pus	PC

; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Uses routine uses r9

delay_mS:
00000019	A0409000		pss	r9 
0000001a	A0408000		pss	r8
0000001b	4290C350		lix	r9,50000	; Count for 50,000 counts = 1 mSec count
0000001c	21889000		mul	r8,r8,r9	; total number of clocks to count
0000001d	42503800		lix	PAR,0x3800	; address of the elapsed time counter
0000001e	84905000		lpl	r9			; read the peripheral counter into r9
0000001f	20898000		ads	r8,r9,r8	; terminal counter to wait until is in r8
loop_delay_mS:
00000020	84905000		lpl	r9			; check the elapsed time counter
00000021	30398000		cmp	r9,r8
00000022	CFFFFFFE		bgt	loop_delay_mS
00000023	A1804000		pus	r8
00000024	A1904000		pus	r9
00000025	A1704000		pus	PC
	
;
; readSws
; switches value returned in r8
; switches are high when pressed
;

readSws:
00000026	A0405000		pss	PAR
00000027	A0409000		pss	r9
00000028	42900007		lix	r9,0x7
00000029	41500000		liu	PAR,0x0000
0000002a	40502000		lil	PAR,0x2000	; Switches address
0000002b	84805000		lpl	r8			; Read switches into r9
0000002c	24889000		xrs	r8,r8,r9
0000002d	A1904000		pus	r9
0000002e	A1504000		pus	PAR
0000002f	A1704000		pus	PC

;
; getPS2Char
; returns character received in r8
;

getPS2Char:
00000030	A0409000		pss	r9
00000031	A0405000		pss	PAR
00000032	41500000		liu	PAR,0x0000
00000033	40501000		lil	PAR,0x1000	; PS/2 Status
waitPS2RxStat:
00000034	84905000		lpl	r9			; Read Status into r9
00000035	23991000		ars r9,r9,r1
00000036	C3FFFFFE		bez waitPS2RxStat
getCharFromPS2:
00000037	41500000		liu	PAR,0x0000
00000038	40500800		lil PAR,0x0800
00000039	84805000		lpl	r8
0000003a	41500000		liu	PAR,0x0000
0000003b	40501000		lil	PAR,0x1000	; PS/2 Status
whilePS2RxStat:
0000003c	A1504000		pus	PAR
0000003d	A1904000		pus	r9
0000003e	A1704000		pus	PC

;
; putUARTChar - Put a character to the UART
; passed character in r8 is sent out the UART
;

putUARTChar:
0000003f	A0408000		pss	r8
00000040	A0409000		pss	r9
00000041	A040A000		pss	r10
00000042	A0405000		pss	PAR
00000043	40A00002		lil	r10,0x2
00000044	40501800		lil	PAR,0x1800	; UART Status
waitUartTxStat:
00000045	84905000		lpl	r9			; Read Status into r9
00000046	2399A000		ars r9,r9,r10
00000047	C3FFFFFE		bez waitUartTxStat
00000048	40501801		lil PAR,0x1801
00000049	85508000		spl	r8			; echo the character
0000004a	A1504000		pus	PAR
0000004b	A1A04000		pus	r10
0000004c	A1904000		pus	r9
0000004d	A1804000		pus	r8
0000004e	A1704000		pus	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string
; strings are null terminated
; strings are bytes packed into long words
;

printString:
0000004f	A0408000		pss	r8				; save r8
00000050	A0409000		pss	r9				; save r9
00000051	A0406000		pss	DAR
00000052	20680000		ads	DAR,r8,ZERO		; set the start of the string
nextLong:
00000053	64806000		ldl	r8				; get the string
00000054	31808000		ens	r8,r8			; swap the endian
00000055	429000FF		lix	r9,0xff			; mask for null termination check
00000056	23998000		ars	r9,r9,r8
00000057	C3000013		bez	donePrStr
00000058	D4000022		bsr	putCharToScreen			; write out the character
00000059	28808000		rs8	r8,r8
0000005a	429000FF		lix	r9,0xff			; mask for null termination check
0000005b	23998000		ars	r9,r9,r8
0000005c	C300000E		bez	donePrStr
0000005d	D400001D		bsr	putCharToScreen			; write out the character
0000005e	28808000		rs8	r8,r8
0000005f	429000FF		lix	r9,0xff			; mask for null termination check
00000060	23998000		ars	r9,r9,r8
00000061	C3000009		bez	donePrStr
00000062	D4000018		bsr	putCharToScreen			; write out the character
00000063	28808000		rs8	r8,r8
00000064	429000FF		lix	r9,0xff			; mask for null termination check
00000065	23998000		ars	r9,r9,r8
00000066	C3000004		bez	donePrStr
00000067	D4000013		bsr	putCharToScreen			; write out the character
lastOfLong:
00000068	20661000		ads	DAR,DAR,ONE
00000069	C0FFFFEA		bra	nextLong
donePrStr:
0000006a	A1604000		pus	DAR				; restore DAR
0000006b	A1904000		pus	r9				; restore r9
0000006c	A1804000		pus	r8				; restore r8
0000006d	A1704000		pus	PC				; rts
	
;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
;

clearScreen:
0000006e	A0409000		pss	r9				; save r9
0000006f	A0408000		pss	r8				; save r8
00000070	42800000		lix	r8,0x0			; set screen position to home
00000071	D400001A		bsr	setCharPos
00000072	42800020		lix	r8,0x0020		; fill with spaces
00000073	429007FE		lix r9,0x7FE		; loopCount	(1K minus 1)
looper:
00000074	D4000006		bsr	putCharToScreen
00000075	20992000		ads r9,r9,MINUS1	; decrement character counter
00000076	D2FFFFFE		bne	looper			; loop until complete
00000077	A1804000		pus	r8
00000078	A1904000		pus	r9
00000079	A1704000		pus	PC				; rts

;
; putCharToScreen - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToScreen:
0000007a	A040A000		pss	r10					; save r10
0000007b	A0409000		pss	r9					; save r9
0000007c	A0406000		pss	DAR
0000007d	A0405000		pss	PAR
0000007e	41900000		liu	r9,screenPtr.upper
0000007f	40900003		lil	r9,screenPtr.lower	; r9 is the ptr to screenPtr
00000080	20690000		ads	DAR,r9,r0			; DAR points to screenPtr
00000081	64A06000		ldl	r10					; r10 has screenPtr value
00000082	205A0000		ads	PAR,r10,r0			; Set PAR to screenPtr
00000083	81508000		spb	r8					; write character to screen
00000084	20AA1000		ads	r10,r10,ONE			; increment screen pointer
00000085	6560A000		sdl	r10					; save new pointer
00000086	A1504000		pus PAR					; restore PAR
00000087	A1604000		pus DAR					; restore DAR
00000088	A1904000		pus r9					; restore r9
00000089	A1A04000		pus r10					; restore r10
0000008a	A1704000		pus	PC					; rts

;
; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; screenBase has the base address of the screen memory
; screenPtr contains the address of the current char position
;

setCharPos:
0000008b	A0409000		pss	r9						; save r9
0000008c	A040A000		pss	r10						; save r10
0000008d	A0406000		pss	DAR						; save DAR
0000008e	41A00000		liu	r10,screenBase.upper
0000008f	40A00004		lil	r10,screenBase.lower
00000090	206A0000		ads	DAR,r10,ZERO			; DAR points to the screenBase
00000091	64A06000		ldl	r10						; r10 has the screen base address
00000092	20A80000		ads	r10,r8,ZERO				; add passed position to base
00000093	41900000		liu	r9,screenPtr.upper
00000094	40900003		lil	r9,screenPtr.lower		; r9 is the ptr to screenPtr
00000095	20690000		ads	DAR,r9,ZERO				; DAR points to screenPtr
00000096	6560A000		sdl	r10						; store new screen address
00000097	A1604000		pus DAR						; restore DAR
00000098	A1A04000		pus r10						; restore r10
00000099	A1904000		pus r9						; restore r9
0000009a	A1704000		pus	PC						; rts
