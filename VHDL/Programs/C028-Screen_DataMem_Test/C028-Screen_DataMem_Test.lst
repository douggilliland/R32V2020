start:
00000000	20400000		ads	SAR,r0,r0	; Use Stack for return address
00000001	A2407000		sss	r7			; push the call address -1
00000002	C0000039		bra	clearScreen
fillDataMem:
00000003	20600000		ads	dar,r0,r0	; clear the data memory addr pointer
00000004	20500000		ads	par,r0,r0	; start of screen
00000005	41804865		liu	r8,0x4865	; ASCII 'He'
00000006	40806C6C		lil	r8,0x6C6C	; ASCII 'll'
00000007	65608000		sdl	r8			; store d8 as a long
00000008	20661000		ads	dar,dar,r1	; increment the data pointer
00000009	41806F2C		liu	r8,0x6F2C	; ASCII 'o,'
0000000a	40802057		lil	r8,0x2057	; ASCII ' W'
0000000b	65608000		sdl	r8			; store d8 as a long
0000000c	20661000		ads	dar,dar,r1	; increment the data pointer
0000000d	41806F72		liu	r8,0x6F72	; ASCII 'or'
0000000e	40806C64		lil	r8,0x6C64	; ASCII 'ld'
0000000f	65608000		sdl	r8			; store d8 as a long
readDataMemory:
00000010	20600000		ads	dar,r0,r0	; clear the data memory addr pointer
00000011	64806000		ldl	r8			; get the long again
00000012	31808000		ens r8,r8		; endian swap for right byte order
00000013	A2407000		sss	r7			; store PC on the stack
00000014	C0000033		bra	putChar
00000015	28818000		rs8	r8,r1,r8
00000016	A2407000		sss	r7
00000017	C0000030		bra	putChar
00000018	28818000		rs8	r8,r1,r8
00000019	A2407000		sss	r7
0000001a	C000002D		bra	putChar
0000001b	28818000		rs8	r8,r1,r8
0000001c	A2407000		sss	r7
0000001d	C000002A		bra	putChar
0000001e	20661000		ads	dar,dar,r1	; increment the data pointer
0000001f	64806000		ldl	r8			; get the long again
00000020	31808000		ens r8,r8		; endian swap for right byte order
00000021	A2407000		sss	r7			; store PC on the stack
00000022	C0000025		bra	putChar
00000023	28818000		rs8	r8,r1,r8
00000024	A2407000		sss	r7
00000025	C0000022		bra	putChar
00000026	28818000		rs8	r8,r1,r8
00000027	A2407000		sss	r7
00000028	C000001F		bra	putChar
00000029	28818000		rs8	r8,r1,r8
0000002a	A2407000		sss	r7
0000002b	C000001C		bra	putChar
0000002c	20661000		ads	dar,dar,r1	; increment the data pointer
0000002d	64806000		ldl	r8			; get the long again
0000002e	31808000		ens r8,r8		; endian swap for right byte order
0000002f	A2407000		sss	r7			; store PC on the stack
00000030	C0000017		bra	putChar
00000031	28818000		rs8	r8,r1,r8
00000032	A2407000		sss	r7
00000033	C0000014		bra	putChar
00000034	28818000		rs8	r8,r1,r8
00000035	A2407000		sss	r7
00000036	C0000011		bra	putChar
00000037	28818000		rs8	r8,r1,r8
00000038	A2407000		sss	r7
00000039	C000000E		bra	putChar
	
loop:
0000003a	C0000000		bra	loop
; Clear the screen routine
clearScreen:
0000003b	20500000		ads r5,r0,r0	; start of screen character memory
0000003c	20800000		ads r8,r0,r0	; clear the character
0000003d	40800020		lil	r8,0x0020	; fill with spaces
0000003e	20900000		ads r9,r0,r0	; screen count
0000003f	409007FE		lil r9,0x7FE	; loopCount	
looper:
00000040	81508000		spb r8			; put the character to the screen
00000041	20551000		ads	r5,r5,r1	; Increment screen pointer
00000042	20992000		ads r9,r9,r2	; decrement character counter
00000043	D2FFFFFD		bne	looper		; loop until complete
00000044	A3A04000		lss	r10			; load calling address
00000045	20AA1000		ads	r10,r10,r1	; skip the call
00000046	207A1000		ads	r7,r10,r1	; jump to the next address (rts)
; put a character to the screen and increment the address
putChar:
00000047	81508000		spb	r8			; write character to peripheral bus
00000048	20551000		ads	r5,r5,r1	; Go to the next character position	
00000049	A3A04000		lss	r10			; load calling address
0000004a	20AA1000		ads	r10,r10,r1	; inc by 1 to skip the call
0000004b	207A1000		ads	r7,r10,r1	; jump to the next address (rts)
	