; Read PS/2 keyboard character and put it to the Screen
hello:	.string "R32V2020> "
screenPtr:	.long 0x0000
screenBase:	.long 0x0

;
; Read PS/2 character and put it to the SVGA Display
;

main:
00000000	D4000048		bsr	clearScreen
00000001	42800000		lix	r8,0x0			; Move cursor to home position
00000002	D4000063		bsr	setCharPos
readDataMemory:
00000003	41800000		liu	r8,hello.upper
00000004	40800000		lil	r8,hello.lower
00000005	D4000024		bsr	printString
loopPS2Read_ScreenWrite:
00000006	D4000004		bsr	getPS2Char
putCharToScreen:
00000007	D400004D		bsr	putCharToScreen	; put the character to the screen
00000008	D4000011		bsr	putUARTChar
00000009	C0FFFFFD		bra	loopPS2Read_ScreenWrite

;
; getPS2Char
; returns character received in r8
;

getPS2Char:
0000000a	A0409000		pss	r9
0000000b	A0405000		pss	PAR
0000000c	41500000		liu	PAR,0x0000
0000000d	40501000		lil	PAR,0x1000	; PS/2 Status
waitPS2RxStat:
0000000e	84905000		lpl	r9			; Read Status into r9
0000000f	23991000		ars r9,r9,r1
00000010	C3FFFFFE		bez waitPS2RxStat
getCharFromPS2:
00000011	41500000		liu	PAR,0x0000
00000012	40500800		lil PAR,0x0800
00000013	84805000		lpl	r8
00000014	41500000		liu	PAR,0x0000
00000015	40501000		lil	PAR,0x1000	; PS/2 Status
whilePS2RxStat:
;	lpl	r9			; Read Status into r9
;	ars r9,r9,r1
;	bnz whilePS2RxStat
00000016	A1504000		pus	PAR
00000017	A1904000		pus	r9
00000018	A1704000		pus	PC

;
; putUARTChar - Put a character to the UART
; passed character in r8 is sent out the UART
;

putUARTChar:
00000019	A0408000		pss	r8
0000001a	A0409000		pss	r9
0000001b	A040A000		pss	r10
0000001c	A0405000		pss	PAR
0000001d	40A00002		lil	r10,0x2
0000001e	40501800		lil	PAR,0x1800	; UART Status
waitUartTxStat:
0000001f	84905000		lpl	r9			; Read Status into r9
00000020	2399A000		ars r9,r9,r10
00000021	C3FFFFFE		bez waitUartTxStat
00000022	40501801		lil PAR,0x1801
00000023	85508000		spl	r8			; echo the character
00000024	A1504000		pus	PAR
00000025	A1A04000		pus	r10
00000026	A1904000		pus	r9
00000027	A1804000		pus	r8
00000028	A1704000		pus	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string
; strings are null terminated
; strings are bytes packed into long words
;

printString:
00000029	A0408000		pss	r8				; save r8
0000002a	A0409000		pss	r9				; save r9
0000002b	A0406000		pss	DAR
0000002c	20680000		ads	DAR,r8,ZERO		; set the start of the string
nextLong:
0000002d	64806000		ldl	r8				; get the string
0000002e	31808000		ens	r8,r8			; swap the endian
0000002f	429000FF		lix	r9,0xff			; mask for null termination check
00000030	23998000		ars	r9,r9,r8
00000031	C3000013		bez	donePrStr
00000032	D4000022		bsr	putCharToScreen			; write out the character
00000033	28808000		rs8	r8,r8
00000034	429000FF		lix	r9,0xff			; mask for null termination check
00000035	23998000		ars	r9,r9,r8
00000036	C300000E		bez	donePrStr
00000037	D400001D		bsr	putCharToScreen			; write out the character
00000038	28808000		rs8	r8,r8
00000039	429000FF		lix	r9,0xff			; mask for null termination check
0000003a	23998000		ars	r9,r9,r8
0000003b	C3000009		bez	donePrStr
0000003c	D4000018		bsr	putCharToScreen			; write out the character
0000003d	28808000		rs8	r8,r8
0000003e	429000FF		lix	r9,0xff			; mask for null termination check
0000003f	23998000		ars	r9,r9,r8
00000040	C3000004		bez	donePrStr
00000041	D4000013		bsr	putCharToScreen			; write out the character
lastOfLong:
00000042	20661000		ads	DAR,DAR,ONE
00000043	C0FFFFEA		bra	nextLong
donePrStr:
00000044	A1604000		pus	DAR				; restore DAR
00000045	A1904000		pus	r9				; restore r9
00000046	A1804000		pus	r8				; restore r8
00000047	A1704000		pus	PC				; rts
	
;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
;

clearScreen:
00000048	A0409000		pss	r9				; save r9
00000049	A0408000		pss	r8				; save r8
0000004a	42800000		lix	r8,0x0			; set screen position to home
0000004b	D400001A		bsr	setCharPos
0000004c	42800020		lix	r8,0x0020		; fill with spaces
0000004d	429007FE		lix r9,0x7FE		; loopCount	(1K minus 1)
looper:
0000004e	D4000006		bsr	putCharToScreen
0000004f	20992000		ads r9,r9,MINUS1	; decrement character counter
00000050	D2FFFFFE		bne	looper			; loop until complete
00000051	A1804000		pus	r8
00000052	A1904000		pus	r9
00000053	A1704000		pus	PC				; rts

;
; putCharToScreen - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToScreen:
00000054	A040A000		pss	r10					; save r10
00000055	A0409000		pss	r9					; save r9
00000056	A0406000		pss	DAR
00000057	A0405000		pss	PAR
00000058	41900000		liu	r9,screenPtr.upper
00000059	40900003		lil	r9,screenPtr.lower	; r9 is the ptr to screenPtr
0000005a	20690000		ads	DAR,r9,r0			; DAR points to screenPtr
0000005b	64A06000		ldl	r10					; r10 has screenPtr value
0000005c	205A0000		ads	PAR,r10,r0			; Set PAR to screenPtr
0000005d	81508000		spb	r8					; write character to screen
0000005e	20AA1000		ads	r10,r10,ONE			; increment screen pointer
0000005f	6560A000		sdl	r10					; save new pointer
00000060	A1504000		pus PAR					; restore PAR
00000061	A1604000		pus DAR					; restore DAR
00000062	A1904000		pus r9					; restore r9
00000063	A1A04000		pus r10					; restore r10
00000064	A1704000		pus	PC					; rts

;
; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; screenBase has the base address of the screen memory
; screenPtr contains the address of the current char position
;

setCharPos:
00000065	A0409000		pss	r9						; save r9
00000066	A040A000		pss	r10						; save r10
00000067	A0406000		pss	DAR						; save DAR
00000068	41A00000		liu	r10,screenBase.upper
00000069	40A00004		lil	r10,screenBase.lower
0000006a	206A0000		ads	DAR,r10,ZERO			; DAR points to the screenBase
0000006b	64A06000		ldl	r10						; r10 has the screen base address
0000006c	20A80000		ads	r10,r8,ZERO				; add passed position to base
0000006d	41900000		liu	r9,screenPtr.upper
0000006e	40900003		lil	r9,screenPtr.lower		; r9 is the ptr to screenPtr
0000006f	20690000		ads	DAR,r9,ZERO				; DAR points to screenPtr
00000070	6560A000		sdl	r10						; store new screen address
00000071	A1604000		pus DAR						; restore DAR
00000072	A1A04000		pus r10						; restore r10
00000073	A1904000		pus r9						; restore r9
00000074	A1704000		pus	PC						; rts
