; This file contains a compilation of the best assembly language routines
; for the R32V2020 RISC CPU
;

hello:	.string "R32V2020> "
screenPtr:	.long 0x0
currCharLocPtr:	.long 0x0

;
; Read UART character and put it to the XVGA Display
;

main:
00000000	42400000		lix		SAR,0x0			; Initialize stack pointer
00000001	42800000		lix		r8,0x0			; set screen position to home
00000002	D400007C		bsr		setCharPos
00000003	D4000044		bsr		clearScreen
readDataMemory:
00000004	42800000		lix		r8,hello.lower	; points to hello string
00000005	D4000023		bsr		printString		; pass string pointer
readUartStatus:
00000006	D400000B		bsr		waitGetCharFromUART	; block on waiting for char
putCharToScreenAndUART:
00000007	D400004C		bsr		putCharToScreen	; put the character to the screen
00000008	4290000D		lix		r9,0x0d
00000009	30389000		cmp		r8,r9
0000000a	D2000005		bne		putOutChar
0000000b	A0408000		push	r8
0000000c	4280000A		lix		r8,0x0a
0000000d	D400000D		bsr		putCharToUART
0000000e	A1804000		pull	r8
putOutChar:
0000000f	D400000B		bsr		putCharToUART
00000010	C0FFFFF6		bra		readUartStatus

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
00000011	A0405000		push	PAR
00000012	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
00000013	84805000		lpl		r8			; Read Status into r8
00000014	23881000		and 	r8,r8,ONE
00000015	C3FFFFFE		bez 	waitUartRxStat
00000016	42501801		lix 	PAR,0x1801
00000017	84805000		lpl		r8
00000018	A1504000		pull	PAR
00000019	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
; This function is blocking but that's not usually an issue
;	since the Serial-USB interfaces is much faster than the Serial port
;

putCharToUART:
0000001a	A0409000		push	r9
0000001b	A0405000		push	PAR
0000001c	A040A000		push	r10
0000001d	42A00002		lix		r10,0x2
0000001e	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
0000001f	84905000		lpl		r9			; Read Status into r9
00000020	2399A000		and 	r9,r9,r10
00000021	C3FFFFFE		bez 	waitUartTxStat
00000022	42501801		lix 	PAR,0x1801
00000023	85508000		spl		r8			; echo the character
00000024	A1A04000		pull	r10
00000025	A1504000		pull	PAR
00000026	A1904000		pull	r9
00000027	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string
; strings are null terminated
; strings are bytes packed into long words
;

printString:
00000028	A0408000		push	r8				; save r8
00000029	A0409000		push	r9				; save r9
0000002a	A0406000		push	DAR
0000002b	20680000		add		DAR,r8,ZERO		; set the start of the string
nextLong:
0000002c	64806000		ldl		r8				; get the string
0000002d	31808000		ens		r8,r8			; swap the endian
0000002e	429000FF		lix		r9,0xff			; mask for null termination check
0000002f	23998000		and		r9,r9,r8
00000030	C3000013		bez		donePrStr
00000031	D4000022		bsr		putCharToScreen	; write out the character
00000032	28808000		sr8		r8,r8
00000033	429000FF		lix		r9,0xff			; mask for null termination check
00000034	23998000		and		r9,r9,r8
00000035	C300000E		bez		donePrStr
00000036	D400001D		bsr		putCharToScreen	; write out the character
00000037	28808000		sr8		r8,r8
00000038	429000FF		lix		r9,0xff			; mask for null termination check
00000039	23998000		and		r9,r9,r8
0000003a	C3000009		bez		donePrStr
0000003b	D4000018		bsr		putCharToScreen	; write out the character
0000003c	28808000		sr8		r8,r8
0000003d	429000FF		lix		r9,0xff			; mask for null termination check
0000003e	23998000		and		r9,r9,r8
0000003f	C3000004		bez		donePrStr
00000040	D4000013		bsr		putCharToScreen	; write out the character
lastOfLong:
00000041	20661000		add		DAR,DAR,ONE
00000042	C0FFFFEA		bra		nextLong
donePrStr:
00000043	A1604000		pull	DAR				; restore DAR
00000044	A1904000		pull	r9				; restore r9
00000045	A1804000		pull	r8				; restore r8
00000046	A1704000		pull	PC				; rts
	
;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
; Sets the pointer to the screen to the first location
;

clearScreen:
00000047	A0409000		push	r9				; save r9
00000048	A0408000		push	r8				; save r8
00000049	42800020		lix		r8,0x0020		; fill with spaces
0000004a	429007FE		lix 	r9,0x7FE		; loopCount	(1K minus 1)
looper:
0000004b	D4000008		bsr		putCharToScreen
0000004c	20992000		add 	r9,r9,MINUS1	; decrement character counter
0000004d	D2FFFFFE		bne		looper			; loop until complete
0000004e	42800000		lix		r8,0x0			; Move cursor to home position
0000004f	D400002F		bsr		setCharPos
00000050	A1804000		pull	r8
00000051	A1904000		pull	r9
00000052	A1704000		pull	PC				; rts

;
; putCharToScreen - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToScreen:
00000053	A040B000		push	r11					; save r11
00000054	A040A000		push	r10					; save r10
00000055	A0409000		push	r9					; save r9
00000056	A0406000		push	DAR
00000057	A0405000		push	PAR
00000058	42900003		lix		r9,screenPtr.lower	; r9 is the ptr to screenPtr
00000059	20690000		add		DAR,r9,ZERO			; DAR points to screenPtr
0000005a	64A06000		ldl		r10					; r10 has screenPtr value
; look for specific characters
0000005b	42B0007F		lix		r11,0x7F			; RUBOUT key
0000005c	3038B000		cmp		r8,r11
0000005d	D100000C		beq		gotBS
0000005e	42B000E0		lix		r11,0xe0			; 0x0-0x1f are ctrl chars
0000005f	23BB8000		and		r11,r11,r8
00000060	C7000014		bnz		notCtlChar
; Check for CR	
00000061	42B0000D		lix		r11,0x0d			; CR
00000062	3038B000		cmp		r8,r11
00000063	D100000B		beq		gotCR
; Check for BELL
00000064	42B00007		lix		r11,0x07			; BELL
00000065	3038B000		cmp		r8,r11
00000066	D2000011		bne		skipPrintChar
00000067	D4000040		bsr		makeBuzz
; Goes here
00000068	C000000F		bra		skipPrintChar
gotBS:
00000069	20AA2000		add		r10,r10,MINUS1
0000006a	205A0000		add		PAR,r10,ZERO
0000006b	42800020		lix		r8,0x20
0000006c	81508000		spb		r8
0000006d	C000000A		bra		skipPrintChar
gotCR:
0000006e	42B0FFC0		lix		r11,0xffc0			; Go to the start of the line
0000006f	23AAB000		and		r10,r10,r11
00000070	42B00040		lix		r11,0x40			; Go down a line
00000071	20AAB000		add		r10,r10,r11
00000072	205A1000		add		PAR,r10,ONE			; Set PAR to screenPtr
00000073	C0000004		bra		skipPrintChar
notCtlChar:
00000074	205A0000		add		PAR,r10,ZERO		; Set PAR to screenPtr
00000075	81508000		spb		r8					; write character to screen
00000076	20AA1000		add		r10,r10,ONE			; increment screen pointer
skipPrintChar:
00000077	6560A000		sdl		r10					; save new pointer
00000078	A1504000		pull 	PAR					; restore PAR
00000079	A1604000		pull 	DAR					; restore DAR
0000007a	A1904000		pull 	r9					; restore r9
0000007b	A1A04000		pull 	r10					; restore r10
0000007c	A1B04000		pull 	r11					; restore r11
0000007d	A1704000		pull	PC					; rts

;
; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; currCharLocPtr has the base address of the screen memory
; screenPtr contains the address of the current char position
;

setCharPos:
0000007e	A0409000		push	r9						; save r9
0000007f	A040A000		push	r10						; save r10
00000080	A0406000		push	DAR						; save DAR
00000081	42A00004		lix		r10,currCharLocPtr.lower
00000082	206A0000		add		DAR,r10,ZERO			; DAR points to the currCharLocPtr
00000083	64A06000		ldl		r10						; r10 has the screen base address
00000084	20A80000		add		r10,r8,ZERO				; add passed position to base
00000085	42900003		lix		r9,screenPtr.lower		; r9 is the ptr to screenPtr
00000086	20690000		add		DAR,r9,ZERO				; DAR points to screenPtr
00000087	6560A000		sdl		r10						; store new screen address
00000088	A1604000		pull	DAR						; restore DAR
00000089	A1A04000		pull	r10						; restore r10
0000008a	A1904000		pull	r9						; restore r9
0000008b	A1704000		pull	PC						; rts

;
; scrollScreen - Scroll the screen by moving every line up by one
; Screen is a 2KB array and is displayed as 64 chars per row times 32 rows
;

scrollScreen:
0000008c	A0408000		push	r8
0000008d	A0409000		push	r9
0000008e	A040A000		push	r10
0000008f	A040B000		push	r11
00000090	42800040		lix	r8,64
00000091	42900000		lix	r9,0
00000092	42B00800		lix	r11,2048
loopMove:
00000093	20580000		add	PAR,r8,ZERO		; Source
00000094	84A05000		lpl	r10
00000095	20590000		add	PAR,r9,ZERO		; destination
00000096	8550A000		spl	r10
00000097	20881000		add	r8,r8,ONE
00000098	20991000		add	r9,r9,ONE
00000099	3038B000		cmp	r8,r11
0000009a	D2FFFFF9		bne	loopMove
0000009b	42800020		lix	r8,0x20		; fill with spaces
0000009c	42900800		lix	r9,2048
0000009d	425007C0		lix PAR,1984
loopFillSpaces:
0000009e	83508000		sps	r8
0000009f	20551000		add	PAR,PAR,ONE
000000a0	30359000		cmp	PAR,r9
000000a1	D2FFFFFD		bne	loopFillSpaces
000000a2	A1B04000		pull	r11
000000a3	A1A04000		pull	r10
000000a4	A1904000		pull	r9
000000a5	A1804000		pull	r8
000000a6	A1704000		pull	PC

;
; makeBuzz - Make the buzzer sound for 1/4 second
;

makeBuzz:
000000a7	A0408000		push	r8
000000a8	42800000		lix		r8,0			; first note is 0
000000a9	D4000007		bsr 	setNote
000000aa	D400000D		bsr		enableBuzzer
000000ab	428000FA		lix		r8,250			; count for 1 Sec
000000ac	D4000033		bsr		delay_mS		; call delay_ms
000000ad	D4000016		bsr		disableBuzzer
000000ae	A1804000		pull	r8
000000af	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
000000b0	A0408000		push	r8
000000b1	A0405000		push	PAR
000000b2	42504000		lix		PAR,0x4000
000000b3	85508000		spl		r8
000000b4	A1504000		pull	PAR
000000b5	A1804000		pull	r8
000000b6	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
000000b7	A0409000		push	r9
000000b8	A0408000		push	r8
000000b9	A0405000		push	PAR
000000ba	42900010		lix		r9,0x0010		; Buzzer Enable line
000000bb	42502800		lix		PAR,0x2800
000000bc	84805000		lpl		r8
000000bd	22889000		or		r8,r8,r9
000000be	85508000		spl		r8
000000bf	A1504000		pull	PAR
000000c0	A1804000		pull	r8
000000c1	A1904000		pull	r9
000000c2	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
000000c3	A0409000		push	r9
000000c4	A0408000		push	r8
000000c5	A0405000		push	PAR
000000c6	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
000000c7	42502800		lix		PAR,0x2800
000000c8	84805000		lpl		r8
000000c9	23889000		and		r8,r8,r9
000000ca	85508000		spl		r8
000000cb	A1504000		pull	PAR
000000cc	A1804000		pull	r8
000000cd	A1904000		pull	r9
000000ce	A1704000		pull	PC
	
;
; readElapsedTimeCounter
; return timer count in r8
;

readElapsedTimeCounter:
000000cf	A0405000		push	PAR
000000d0	42503800		lix		PAR,0x3800		; address of the uSec counter
000000d1	84805000		lpl		r8				; read the peripheral counter into r8
000000d2	A1504000		pull	PAR
000000d3	A1704000		pull	PC

;	
; delay_uS - delay for the number of uSecs
; pass mSec delay in r8
; Uses routine uses r9 (saved and restored)
;

delay_uS:
000000d4	A0409000		push	r9
000000d5	A0405000		push	PAR
000000d6	42503801		lix		PAR,0x3801		; address of the uSec counter
000000d7	84905000		lpl		r9				; read the peripheral counter into r9
000000d8	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_uS:
000000d9	84905000		lpl		r9				; check the elapsed time counter
000000da	30389000		cmp		r8,r9
000000db	CCFFFFFE		blt		loop_delay_uS
000000dc	A1504000		pull	PAR
000000dd	A1904000		pull	r9
000000de	A1704000		pull	PC

;
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Uses routine uses r9
;

delay_mS:
000000df	A0409000		push	r9
000000e0	A0405000		push	PAR
000000e1	42503802		lix		PAR,0x3802		; address of the mSec counter
000000e2	84905000		lpl		r9				; read the peripheral counter into r9
000000e3	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000e4	84905000		lpl		r9				; check the elapsed time counter
000000e5	30389000		cmp		r8,r9
000000e6	CCFFFFFE		blt		loop_delay_mS
000000e7	A1504000		pull	PAR
000000e8	A1904000		pull	r9
000000e9	A1704000		pull	PC

;
; readCPUCycleCounter
; return CPU cycle counter in r8
; Useful function for counting the number of CPU cycles it take to do something
;

readCPUCycleCounter:
000000ea	A0405000		push	PAR
000000eb	42503803		lix		PAR,0x3803		; address of the uSec counter
000000ec	84805000		lpl		r8				; read the peripheral counter into r8
000000ed	A1504000		pull	PAR
000000ee	A1704000		pull	PC

;
; putValueToRingLEDs
; passed r8 - value to send to the ring LEDs
;

putValueToRingLEDs:
000000ef	A0405000		push	PAR
000000f0	A0408000		push	r8
000000f1	42504800		lix		PAR,0x4800		; Ring LED address
000000f2	85508000		spl		r8				; Write out LED bits
000000f3	A1804000		pull	r8
000000f4	A1504000		pull	PAR
000000f5	A1704000		pull	PC

;
; readSws
; switches value returned in r8
; switches are high when pressed
; Switches d0-d2 are the pushbutton switches (inverted)
; 	Pushbutton switches are debounced
; Switches d3-10 are the DIP switches (not inverted)
;

readSws:
000000f6	A0405000		push	PAR
000000f7	A0409000		push	r9
000000f8	42900007		lix		r9,0x7
000000f9	42502000		lix		PAR,0x2000	; Switches address
000000fa	84805000		lpl		r8			; Read switches into r9
000000fb	24889000		xor		r8,r8,r9
000000fc	A1904000		pull	r9
000000fd	A1504000		pull	PAR
000000fe	A1704000		pull	PC

;
; waitGetPS2Char
; blocking function - wait for character before returning
; returns character received in r8
;

waitGetPS2Char:
000000ff	A0409000		push	r9
00000100	A0405000		push	PAR
00000101	42501000		lix		PAR,0x1000	; PS/2 Status
waitPS2RxStat:
00000102	84905000		lpl		r9			; Read Status into r9
00000103	23991000		and 	r9,r9,ONE
00000104	C3000009		bez 	waitPS2RxStat
getCharFromPS2:
00000105	42500800		lix 	PAR,0x0800	; PS/2 keyboard data
00000106	84805000		lpl		r8
00000107	A1504000		pull	PAR
00000108	A1904000		pull	r9
00000109	A1704000		pull	PC

;
; getPS2StatusChar - Check the PS/2 receive data ready status bit
; Non-blocking
; return in r8 - MINUS1 means character not present
; Value other than MINUS1 is the character that was received
;

getPS2StatusChar:
0000010a	A0409000		push	r9
0000010b	A0405000		push	PAR
0000010c	42501000		lix		PAR,0x1000	; PS/2 Status
waitPS2RxStat:
0000010d	84905000		lpl		r9			; Read Status into r9
0000010e	23991000		and 	r9,r9,ONE
0000010f	C3000004		bez 	PS2NotReady
getCharFromPS2:			; character is present
00000110	42500800		lix 	PAR,0x0800	; PS/2 keyboard data
00000111	84805000		lpl		r8
00000112	C0000002		bra		PS2CharWasPresent	; skip return of MINUS1
PS2NotReady:
00000113	4280FFFF		lix		r8,0xffff
PS2CharWasPresent:
00000114	A1504000		pull	PAR
00000115	A1904000		pull	r9
00000116	A1704000		pull	PC

;
; writeDIGIO
; Write the DIGIO output lines
; value to write is passed in r8
;

writeDIGIO:
00000117	A0405000		push	PAR
00000118	42505000		lix		PAR,0x5000	; 8-bit Digital Output port
00000119	85508000		spl		r8			; Output bit
0000011a	A1504000		pull	PAR
0000011b	A1704000		pull	PC

;
; wr7Seg8Dig
; The digits of the seven segment display
; r8 is the long value to put on the display
;

wr7Seg8Dig:
0000011c	A0405000		push	PAR
0000011d	42503000		lix		PAR,0x3000	; Seven Segment Display port
0000011e	85508000		spl		r8			; Output bit
0000011f	A1504000		pull	PAR
00000120	A1704000		pull	PC
