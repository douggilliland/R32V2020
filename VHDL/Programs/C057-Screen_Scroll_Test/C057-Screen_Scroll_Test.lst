hello:	.string "R32V2020> This is a long string that I am using to test the screen functionality."
screenPtr:	.long 0x0000
screenBase:	.long 0x0

;
; Screen scroll test
;

main:
00000000	D4000051		bsr	clearScreen
00000001	42800040		lix	r8,64			; Move cursor to two rows down on the screen
00000002	D400006B		bsr	setCharPos
00000003	42800000		lix	r8,hello.lower
00000004	D400002E		bsr	printString
; second copy of the string
00000005	42800400		lix	r8,1024			; Move cursor to two rows down on the screen
00000006	D4000067		bsr	setCharPos
00000007	42800000		lix	r8,hello.lower
00000008	D400002A		bsr	printString
00000009	428009C4		lix	r8,2500			; wait 2.5 secs
0000000a	D4000071		bsr	delay_mS
0000000b	D4000002		bsr	scrollScreen
loopPosition:
0000000c	C0000000		bra	loopPosition

scrollScreen:
0000000d	42800040		lix	r8,64
0000000e	42900000		lix	r9,0
0000000f	42C00800		lix	r12,2048
loopMove:
00000010	20580000		add	PAR,r8,ZERO		; Source
00000011	84A05000		lpl	r10
00000012	20590000		add	PAR,r9,ZERO		; destination
00000013	8550A000		spl	r10
00000014	20881000		add	r8,r8,ONE
00000015	20991000		add	r9,r9,ONE
00000016	3038C000		cmp	r8,r12
00000017	D2FFFFF9		bne	loopMove
00000018	A1704000		pus	PC

;
; getUARTChar
; returns character received in r8
;

getUARTChar:
00000019	A0409000		pss	r9
0000001a	A0405000		pss	PAR
0000001b	42501800		lix	PAR,0x1800	; UART Status
waitUartRxStat:
0000001c	84905000		lpl	r9			; Read Status into r9
0000001d	23991000		and r9,r9,ONE
0000001e	C3FFFFFE		bez waitUartRxStat
getCharFromUart:
0000001f	42501801		lix PAR,0x1801
00000020	84805000		lpl	r8
00000021	A1504000		pus	PAR
00000022	A1904000		pus	r9
00000023	A1704000		pus	PC

;
; putUARTChar - Put a character to the UART
; passed character in r8 is sent out the UART
;

putUARTChar:
00000024	A0409000		pss	r9
00000025	A0405000		pss	PAR
00000026	A040A000		pss	r10
00000027	42A00002		lix	r10,0x2
00000028	42501800		lix	PAR,0x1800	; UART Status
waitUartTxStat:
00000029	84905000		lpl	r9			; Read Status into r9
0000002a	2399A000		and r9,r9,r10
0000002b	C3FFFFFE		bez waitUartTxStat
0000002c	42501801		lix PAR,0x1801
0000002d	85508000		spl	r8			; echo the character
0000002e	A1A04000		pus	r10
0000002f	A1504000		pus	PAR
00000030	A1904000		pus	r9
00000031	A1704000		pus	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string
; strings are null terminated
; strings are bytes packed into long words
;

printString:
00000032	A0408000		pss	r8				; save r8
00000033	A0409000		pss	r9				; save r9
00000034	A0406000		pss	DAR
00000035	20680000		add	DAR,r8,ZERO		; set the start of the string
nextLong:
00000036	64806000		ldl	r8				; get the string
00000037	31808000		ens	r8,r8			; swap the endian
00000038	429000FF		lix	r9,0xff			; mask for null termination check
00000039	23998000		and	r9,r9,r8
0000003a	C3000013		bez	donePrStr
0000003b	D4000022		bsr	putChar			; write out the character
0000003c	28808000		sr8	r8,r8
0000003d	429000FF		lix	r9,0xff			; mask for null termination check
0000003e	23998000		and	r9,r9,r8
0000003f	C300000E		bez	donePrStr
00000040	D400001D		bsr	putChar			; write out the character
00000041	28808000		sr8	r8,r8
00000042	429000FF		lix	r9,0xff			; mask for null termination check
00000043	23998000		and	r9,r9,r8
00000044	C3000009		bez	donePrStr
00000045	D4000018		bsr	putChar			; write out the character
00000046	28808000		sr8	r8,r8
00000047	429000FF		lix	r9,0xff			; mask for null termination check
00000048	23998000		and	r9,r9,r8
00000049	C3000004		bez	donePrStr
0000004a	D4000013		bsr	putChar			; write out the character
lastOfLong:
0000004b	20661000		add	DAR,DAR,ONE
0000004c	C0FFFFEA		bra	nextLong
donePrStr:
0000004d	A1604000		pus	DAR				; restore DAR
0000004e	A1904000		pus	r9				; restore r9
0000004f	A1804000		pus	r8				; restore r8
00000050	A1704000		pus	PC				; rts
	
;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
;

clearScreen:
00000051	A0409000		pss	r9				; save r9
00000052	A0408000		pss	r8				; save r8
00000053	42800000		lix	r8,0x0			; set screen position to home
00000054	D4000019		bsr	setCharPos
00000055	42800020		lix	r8,0x0020		; fill with spaces
00000056	429007FE		lix r9,0x7FE		; loopCount	(1K minus 1)
looper:
00000057	D4000006		bsr	putChar
00000058	20992000		add r9,r9,MINUS1	; decrement character counter
00000059	D2FFFFFE		bne	looper			; loop until complete
0000005a	A1804000		pus	r8
0000005b	A1904000		pus	r9
0000005c	A1704000		pus	PC				; rts

;
; putChar - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putChar:
0000005d	A040A000		pss	r10					; save r10
0000005e	A0409000		pss	r9					; save r9
0000005f	A0406000		pss	DAR
00000060	A0405000		pss	PAR
00000061	42900015		lix	r9,screenPtr.lower	; r9 is the ptr to screenPtr
00000062	20690000		add	DAR,r9,ZERO			; DAR points to screenPtr
00000063	64A06000		ldl	r10					; r10 has screenPtr value
00000064	205A0000		add	PAR,r10,ZERO		; Set PAR to screenPtr
00000065	81508000		spb	r8					; write character to screen
00000066	20AA1000		add	r10,r10,ONE			; increment screen pointer
00000067	6560A000		sdl	r10					; save new pointer
00000068	A1504000		pus PAR					; restore PAR
00000069	A1604000		pus DAR					; restore DAR
0000006a	A1904000		pus r9					; restore r9
0000006b	A1A04000		pus r10					; restore r10
0000006c	A1704000		pus	PC					; rts

;
; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; screenBase has the base address of the screen memory
; screenPtr contains the address of the current char position
;

setCharPos:
0000006d	A0409000		pss	r9						; save r9
0000006e	A040A000		pss	r10						; save r10
0000006f	A0406000		pss	DAR						; save DAR
00000070	42A00016		lix	r10,screenBase.lower
00000071	206A0000		add	DAR,r10,ZERO			; DAR points to the screenBase
00000072	64A06000		ldl	r10						; r10 has the screen base address
00000073	20A80000		add	r10,r8,ZERO				; add passed position to base
00000074	42900015		lix	r9,screenPtr.lower		; r9 is the ptr to screenPtr
00000075	20690000		add	DAR,r9,ZERO				; DAR points to screenPtr
00000076	6560A000		sdl	r10						; store new screen address
00000077	A1604000		pus DAR						; restore DAR
00000078	A1A04000		pus r10						; restore r10
00000079	A1904000		pus r9						; restore r9
0000007a	A1704000		pus	PC						; rts

; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Uses routine uses r9

delay_mS:
0000007b	A0409000		pss	r9
0000007c	42503802		lix	PAR,0x3802		; address of the mSec counter
0000007d	84905000		lpl	r9				; read the peripheral counter into r9
0000007e	20898000		add	r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
0000007f	84905000		lpl	r9				; check the elapsed time counter
00000080	30389000		cmp	r8,r9
00000081	CCFFFFFE		blt	loop_delay_mS
00000082	A1904000		pus	r9
00000083	A1704000		pus	r7
