;
; C074-IO_Test - Read a line from the UART serial input
; Echo line to the serial port and to the screen
; Parse the line
;

prompt:			.string "R32V2020> "
; lineBuff is 80 characters long
lineBuff:		.string "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
syntaxError:	.string "Syntax error"
runningString:	.string "Running..."
menuItem_01:	.string "01-Ring LED Test       "
menuItem_02:	.string "02-7 Segment LED Test  "
menuItem_03:	.string "03-Pushbutton Test     "
menuItem_04:	.string "04-DIP Switch Test     "
menuItem_05:	.string "05-ANSI Screen Test    "
menuItem_06:	.string "06-Serial Port Test    "
menuItem_07:	.string "07-MCP23008 I2C Test   "
menuItem_08:	.string "08-MCP4231 SPI Test    "
menuItem_09:	.string "09-PS/2 Keyboard Test  "

;
; Read a line from the UART and parse the line
;

main:
00000000	D4000181		bsr		clearScreen
00000001	D4000004		bsr		printMenu
00000002	D400001A		bsr		getLine
00000003	D4000040		bsr		parseLine
00000004	C0FFFFFC		bra		main

;
; printMenu - Print the menu
;

printMenu:
00000005	A0408000		push	r8
00000006	4280007C		lix		r8,menuItem_01.lower
00000007	D4000159		bsr		printString
00000008	42800094		lix		r8,menuItem_02.lower
00000009	D4000157		bsr		printString
0000000a	428000AC		lix		r8,menuItem_03.lower
0000000b	D4000161		bsr		printLine
0000000c	428000C4		lix		r8,menuItem_04.lower
0000000d	D4000153		bsr		printString
0000000e	428000DC		lix		r8,menuItem_05.lower
0000000f	D4000151		bsr		printString
00000010	428000F4		lix		r8,menuItem_06.lower
00000011	D400015B		bsr		printLine
00000012	4280010C		lix		r8,menuItem_07.lower
00000013	D400014D		bsr		printString
00000014	42800124		lix		r8,menuItem_08.lower
00000015	D4000157		bsr		printLine
00000016	4280013C		lix		r8,menuItem_09.lower
00000017	D4000155		bsr		printLine
00000018	42800000		lix		r8,prompt.lower
00000019	D4000147		bsr		printString
0000001a	A1804000		pull	r8
0000001b	A1704000		pull	PC

;
; getLine - Reads the UART and fills a buffer with the characters received
; r8 received character - Character received from the UART
; r9 is constant - ENTER key on keyboard
; r10 is the input buffer length
; r11 is the BACK key on keyboard
; r12 used to test the backspace doesn't go past the start of the buffer
; DAR points to lineBuff current character position
;

getLine:
0000001c	A0408000		push	r8
0000001d	A0409000		push	r9
0000001e	A040A000		push	r10
0000001f	A040B000		push	r11
00000020	A040C000		push	r12
00000021	A0406000		push	DAR
00000022	4260000C		lix		DAR,lineBuff.lower	; DAR pointer = start of line buffer
00000023	42B0007F		lix		r11,0x7F			; BACK key - rubout
00000024	42A0004F		lix		r10,79				; number of chars in the line buffer
00000025	4290000D		lix		r9,0x0D				; ENTER key - ends the line
loopReadLine:
00000026	D4000123		bsr		waitGetCharFromUART	; Get a character from the UART
00000027	D4000169		bsr		putCharToANSIScreen	; Put the character to the screen
00000028	D400012A		bsr		putCharToUART		; Echo character back to the UART
00000029	30389000		cmp		r8,r9				; check if received char was end of line
0000002a	D1000007		beq		gotEOL
0000002b	3038B000		cmp		r8,r11
0000002c	D100000A		beq		gotBackspace
0000002d	61608000		sdb		r8
0000002e	20661000		add		DAR,DAR,ONE			; increment to next long in buffer
0000002f	20AA2000		add		r10,r10,MINUS1
00000030	C7FFFFF6		bnz		loopReadLine		; Next char would overflow
	; tbd add code for line too long	
gotEOL:
00000031	4280000A		lix		r8,0x0A				; Echo line feed after CR
00000032	D400015E		bsr		putCharToANSIScreen	; Put the character to the screen
00000033	D400011F		bsr		putCharToUART		; Echo character back to the UART
00000034	61600000		sdb		r0					; null at end of line read
00000035	C0000007		bra		doneHandlingLine
gotBackspace:
00000036	20662000		add		DAR,DAR,MINUS1
00000037	42C0000C		lix		r12,lineBuff.lower	; r12 pointer = start of line buffer
00000038	303C6000		cmp		r12,DAR
00000039	CFFFFFED		bgt		loopReadLine
0000003a	206C0000		add		DAR,r12,r0
0000003b	C0FFFFEB		bra		loopReadLine
doneHandlingLine:
0000003c	A1604000		pull	DAR
0000003d	A1C04000		pull	r12
0000003e	A1B04000		pull	r11
0000003f	A1A04000		pull	r10
00000040	A1904000		pull	r9
00000041	A1804000		pull	r8
00000042	A1704000		pull	PC

;
; parseLine - 
; line is in lineBuff
;

parseLine:
00000043	A0408000		push	r8
00000044	A0409000		push	r9
00000045	A0406000		push	DAR
00000046	4280000C		lix		r8,lineBuff.lower
00000047	D40000BE		bsr		hexToSevenSeg
; Check to see if the command is 0x01
00000048	42900001		lix		r9,0x01
00000049	30389000		cmp		r8,r9
0000004a	D2000003		bne		skipTo2
0000004b	D4000034		bsr		testRoutine1
0000004c	C000002D		bra		doneTests
; Check to see if the command is 0x02
skipTo2:
0000004d	42900002		lix		r9,0x02
0000004e	30389000		cmp		r8,r9
0000004f	D2000003		bne		skipTo3
00000050	D400004B		bsr		testRoutine2
00000051	C0000028		bra		doneTests
; Check to see if the command is 0x03
skipTo3:
00000052	42900003		lix		r9,0x03
00000053	30389000		cmp		r8,r9
00000054	D2000003		bne		skipTo4
00000055	D4000061		bsr		testRoutine3
00000056	C0000023		bra		doneTests
; Check to see if the command is 0x04
skipTo4:
00000057	42900004		lix		r9,0x04
00000058	30389000		cmp		r8,r9
00000059	D2000003		bne		skipTo5
0000005a	D400007E		bsr		testRoutine4
0000005b	C000001E		bra		doneTests
; Check to see if the command is 0x05
skipTo5:
0000005c	42900005		lix		r9,0x05
0000005d	30389000		cmp		r8,r9
0000005e	D2000003		bne		skipTo6
0000005f	D400008D		bsr		testRoutine5
00000060	C0000019		bra		doneTests
skipTo6:
00000061	42900006		lix		r9,0x06
00000062	30389000		cmp		r8,r9
00000063	D2000003		bne		skipTo7
00000064	D400008D		bsr		testRoutine6
00000065	C0000014		bra		doneTests
skipTo7:
00000066	42900007		lix		r9,0x07
00000067	30389000		cmp		r8,r9
00000068	D2000003		bne		skipTo8
00000069	D400008D		bsr		testRoutine7
0000006a	C000000F		bra		doneTests
skipTo8:
0000006b	42900008		lix		r9,0x08
0000006c	30389000		cmp		r8,r9
0000006d	D2000003		bne		skipTo9
0000006e	D400008D		bsr		testRoutine8
0000006f	C000000A		bra		doneTests
skipTo9:
00000070	42900009		lix		r9,0x09
00000071	30389000		cmp		r8,r9
00000072	D2000003		bne		skipToA
00000073	D400008D		bsr		testRoutine9
00000074	C0000005		bra		doneTests
skipToA:
00000075	A0408000		push	r8
00000076	42800060		lix		r8,syntaxError.lower
00000077	D40000E9		bsr		printString
00000078	A1804000		pull	r8
doneTests:
00000079	428007D0		lix		r8,2000
0000007a	D400014C		bsr		delay_mS
0000007b	A1604000		pull	DAR
0000007c	A1904000		pull	r9
0000007d	A1804000		pull	r8
0000007e	A1704000		pull	PC
	
; Test Ring LEDs

testRoutine1:
0000007f	A0408000		push	r8
00000080	A0409000		push	r9
00000081	42800070		lix		r8,runningString.lower
00000082	D40000DE		bsr		printString
00000083	4280007C		lix		r8,menuItem_01.lower
00000084	D40000E8		bsr		printLine
00000085	42901000		lix		r9,0x1000			; ring has been circled
reload:
00000086	42800001		lix		r8,1
loopLEDRing:
00000087	D400000D		bsr		putValueToRingLEDs	; put the switches to the 7 Segment LED
00000088	A0408000		push	r8
00000089	428000FA		lix		r8,250				; wait for 1 second
0000008a	D400013C		bsr		delay_mS
0000008b	A1804000		pull	r8
0000008c	25808000		sl1		r8,r8
0000008d	30389000		cmp		r8,r9
0000008e	D2FFFFF9		bne		loopLEDRing
	;bra		reload
0000008f	42800000		lix		r8,0
00000090	D4000004		bsr		putValueToRingLEDs	; put the switches to the 7 Segment LED
00000091	A1904000		pull	r9
00000092	A1804000		pull	r8
00000093	A1704000		pull	PC
	
; putValueToRingLEDs
; passed r8 - value to send to the ring LEDs

putValueToRingLEDs:
00000094	A0405000		push	PAR
00000095	A0408000		push	r8
00000096	42504800		lix		PAR,0x4800		; Ring LED address
00000097	85508000		spl		r8				; Write out LED bits
00000098	A1804000		pull	r8
00000099	A1504000		pull	PAR
0000009a	A1704000		pull	PC

testRoutine2:
0000009b	A0408000		push	r8
0000009c	42800070		lix		r8,runningString.lower
0000009d	D40000C3		bsr		printString
0000009e	42800094		lix		r8,menuItem_02.lower
0000009f	D40000CD		bsr		printLine
000000a0	41801234		liu		r8,0x1234
000000a1	40805678		lil		r8,0x5678
000000a2	D400012D		bsr		wr7Seg8Dig
000000a3	428007D0		lix		r8,2000
000000a4	D4000122		bsr		delay_mS
000000a5	4180ABCD		liu		r8,0xABCD
000000a6	4080EF12		lil		r8,0xEF12
000000a7	D4000128		bsr		wr7Seg8Dig
000000a8	428007D0		lix		r8,2000
000000a9	D400011D		bsr		delay_mS
000000aa	42800000		lix		r8,0x0
000000ab	D4000124		bsr		wr7Seg8Dig
000000ac	A1804000		pull	r8
000000ad	A1704000		pull	PC
	
; wr7Seg8Dig
; passed r8 - value to send to the 7 seg display

wr7Seg8Dig:
000000ae	A0405000		push	PAR
000000af	A0408000		push	r8
000000b0	41500000		liu		PAR,0x0000
000000b1	40503000		lil		PAR,0x3000		; Seven Segment LED lines
000000b2	85508000		spl		r8				; Write out LED bits
000000b3	A1804000		pull	r8
000000b4	A1504000		pull	PAR
000000b5	A1704000		pull	PC
	
; Pushbutton Test
testRoutine3:
000000b6	A0408000		push	r8
000000b7	A0409000		push	r9
000000b8	A040A000		push	r10
000000b9	42800070		lix		r8,runningString.lower
000000ba	D40000A6		bsr		printString
000000bb	428000AC		lix		r8,menuItem_03.lower
000000bc	D40000B0		bsr		printLine
000000bd	42A00000		lix		r10,0x0
loopSwRead:
000000be	D4000011		bsr		readSws		; returns switches and pushbuttons in r8
000000bf	42900007		lix		r9,0x7
000000c0	23889000		and		r8,r8,r9
000000c1	42900030		lix		r9,0x30
000000c2	20889000		add		r8,r8,r9
000000c3	3038A000		cmp		r8,r10
000000c4	D1FFFFFA		beq		loopSwRead
000000c5	20A80000		add		r10,r8,r0
000000c6	D40000CA		bsr		putCharToANSIScreen
000000c7	D40000B2		bsr		newLine
000000c8	428000FA		lix		r8,250
000000c9	D40000FD		bsr		delay_mS
000000ca	C0FFFFF4		bra		loopSwRead
000000cb	A1A04000		pull	r10
000000cc	A1904000		pull	r9
000000cd	A1804000		pull	r8
000000ce	A1704000		pull	PC
	
;
; readSws
; switches value returned in r8
; switches are high when pressed
; Switches d0-d2 are the pushbutton switches (inverted)
; 	Pushbutton switches are debounced
; Switches d3-10 are the DIP switches (not inverted)
;

readSws:
000000cf	A0405000		push	PAR
000000d0	A0409000		push	r9
000000d1	42900007		lix		r9,0x7
000000d2	42502000		lix		PAR,0x2000	; Switches address
000000d3	84805000		lpl		r8			; Read switches into r9
000000d4	24889000		xor		r8,r8,r9
000000d5	A1904000		pull	r9
000000d6	A1504000		pull	PAR
000000d7	A1704000		pull	PC
	
testRoutine4:
000000d8	42800070		lix		r8,runningString.lower
000000d9	D4000087		bsr		printString
000000da	428000C4		lix		r8,menuItem_04.lower
000000db	D4000091		bsr		printLine
000000dc	42A00000		lix		r10,0x0
loopSwRead2:
000000dd	D4FFFFF2		bsr		readSws		; returns switches and pushbuttons in r8
000000de	27808000		sr1		r8,r8
000000df	27808000		sr1		r8,r8
000000e0	27808000		sr1		r8,r8
000000e1	27808000		sr1		r8,r8
000000e2	429000FF		lix		r9,0xff
000000e3	23889000		and		r8,r8,r9
000000e4	3038A000		cmp		r8,r10
000000e5	D1FFFFF8		beq		loopSwRead2
000000e6	20A80000		add		r10,r8,r0
000000e7	D40000E8		bsr		wr7Seg8Dig
;	bsr		newLine
000000e8	428000FA		lix		r8,250
000000e9	D40000DD		bsr		delay_mS
000000ea	C0FFFFF3		bra		loopSwRead2
000000eb	A1704000		pull	PC
	
testRoutine5:
000000ec	42800070		lix		r8,runningString.lower
000000ed	D4000073		bsr		printString
000000ee	428000DC		lix		r8,menuItem_05.lower
000000ef	D400007D		bsr		printLine
000000f0	A1704000		pull	PC
	
testRoutine6:
000000f1	42800070		lix		r8,runningString.lower
000000f2	D400006E		bsr		printString
000000f3	428000F4		lix		r8,menuItem_06.lower
000000f4	D4000078		bsr		printLine
000000f5	A1704000		pull	PC
	
testRoutine7:
000000f6	42800070		lix		r8,runningString.lower
000000f7	D4000069		bsr		printString
000000f8	4280010C		lix		r8,menuItem_07.lower
000000f9	D4000073		bsr		printLine
000000fa	A1704000		pull	PC
	
testRoutine8:
000000fb	42800070		lix		r8,runningString.lower
000000fc	D4000064		bsr		printString
000000fd	42800124		lix		r8,menuItem_08.lower
000000fe	D400006E		bsr		printLine
000000ff	A1704000		pull	PC
	
testRoutine9:
00000100	42800070		lix		r8,runningString.lower
00000101	D400005F		bsr		printString
00000102	4280013C		lix		r8,menuItem_09.lower
00000103	D4000069		bsr		printLine
00000104	A1704000		pull	PC
	
;
; hexToSevenSeg - Convert a two ASCII digit value into a hex byte
; Passed: r8 points to the start of the hex string
; Returned: r8 contains the hex value of the string
; Put the byte to the Seven Segment Display
;

hexToSevenSeg:
00000105	A0409000		push	r9
00000106	A0406000		push	DAR
00000107	A0405000		push	PAR
00000108	42900000		lix		r9,0
00000109	20680000		add		DAR,r8,ZERO		; Address of lineBuff (passed into this routine)
0000010a	60806000		ldb		r8
0000010b	D4000011		bsr		asciiToHex
0000010c	22998000		or		r9,r9,r8
0000010d	25909000		sl1		r9,r9
0000010e	25909000		sl1		r9,r9
0000010f	25909000		sl1		r9,r9
00000110	25909000		sl1		r9,r9
00000111	20661000		add		DAR,DAR,ONE
00000112	60806000		ldb		r8
00000113	D4000009		bsr		asciiToHex
00000114	22998000		or		r9,r9,r8
00000115	42503000		lix		PAR,0x3000		; seven segment display
00000116	85509000		spl		r9
00000117	20890000		add		r8,r9,ZERO
00000118	A1504000		pull	PAR
00000119	A1604000		pull	DAR
0000011a	A1904000		pull	r9
0000011b	A1704000		pull	PC

;
; asciiToHex - Convert a single ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
; Result is returned in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
;

asciiToHex:
0000011c	A0409000		push	r9
0000011d	42900066		lix		r9,0x66		; check if letter is > 'f'
0000011e	30398000		cmp		r9,r8
0000011f	CF000025		bgt		a2h_Error
00000120	42900030		lix		r9,0x30		; check if letter is < '0'
00000121	30398000		cmp		r9,r8	
00000122	CC000022		blt		a2h_Error
00000123	4290003A		lix		r9,0x3A		; check if letter is between '0' and '9' inclusively
00000124	30398000		cmp		r9,r8
00000125	CC000011		blt		gotDigit
00000126	42900041		lix		r9,0x41		; check if letter is between '9' and 'A' exclusively
00000127	30398000		cmp		r9,r8
00000128	CC00001C		blt		a2h_Error
00000129	42900047		lix		r9,0x47		; check if letter is between 'A' and F' inclusively
0000012a	30398000		cmp		r9,r8
0000012b	CC000012		blt		gotUpperLetter
0000012c	42900061		lix		r9,0x61		; check if between 'F' and 'a' exclusively
0000012d	30398000		cmp		r9,r8
0000012e	CC000016		blt		a2h_Error
; Lower case letter
0000012f	42900057		lix		r9,0x57
00000130	24992000		xor		r9,r9,MINUS1
00000131	20991000		add		r9,r9,ONE
00000132	20889000		add		r8,r8,r9
00000133	4290000F		lix		r9,0x0F
00000134	23889000		and		r8,r8,r9
00000135	C0000012		bra		doneConvA2H
gotDigit:
00000136	42900030		lix		r9,0x30
00000137	24992000		xor		r9,r9,MINUS1
00000138	20991000		add		r9,r9,ONE
00000139	20889000		add		r8,r8,r9
0000013a	4290000F		lix		r9,0x0F
0000013b	23889000		and		r8,r8,r9
0000013c	C000000B		bra		doneConvA2H
gotUpperLetter:
0000013d	42900037		lix		r9,0x37
0000013e	24992000		xor		r9,r9,MINUS1
0000013f	20991000		add		r9,r9,ONE
00000140	20889000		add		r8,r8,r9
00000141	4290000F		lix		r9,0x0F
00000142	23889000		and		r8,r8,r9
00000143	C0000004		bra		doneConvA2H
a2h_Error:
00000144	42800060		lix		r8,syntaxError.lower
00000145	D400001B		bsr		printString
00000146	4280DEAD		lix		r8,0xDEAD
doneConvA2H:
00000147	A1904000		pull	r9
00000148	A1704000		pull	PC

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
00000149	A0405000		push	PAR
0000014a	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
0000014b	84805000		lpl		r8			; Read Status into r8
0000014c	23881000		and 	r8,r8,ONE
0000014d	C3FFFFFE		bez 	waitUartRxStat
0000014e	42501801		lix 	PAR,0x1801
0000014f	84805000		lpl		r8
00000150	A1504000		pull	PAR
00000151	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
00000152	A0409000		push	r9
00000153	A0405000		push	PAR
00000154	A040A000		push	r10
00000155	42A00002		lix		r10,0x2
00000156	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
00000157	84905000		lpl		r9			; Read Status into r9
00000158	2399A000		and 	r9,r9,r10
00000159	C3FFFFFE		bez 	waitUartTxStat
0000015a	42501801		lix 	PAR,0x1801
0000015b	85508000		spl		r8			; echo the character
0000015c	A1A04000		pull	r10
0000015d	A1504000		pull	PAR
0000015e	A1904000		pull	r9
0000015f	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
00000160	A0408000		push	r8					; save r8
00000161	A0406000		push	DAR
00000162	20680000		add		DAR,r8,ZERO			; set the start of the string
nextChar:
00000163	60806000		ldb		r8					; get the character
00000164	30380000		cmp		r8,ZERO				; Null terminated string
00000165	D1000004		beq		donePrStr			; done if null
00000166	D400002A		bsr		putCharToANSIScreen	; write out the character
00000167	20661000		add		DAR,DAR,r1			; Point to next character
00000168	C0FFFFFB		bra		nextChar
donePrStr:
00000169	A1604000		pull	DAR					; restore DAR
0000016a	A1804000		pull	r8					; restore r8
0000016b	A1704000		pull	PC					; rts
	
;
; printLine - Print a screen to the current screen position with CRLF at the end
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printLine:
0000016c	A0408000		push	r8					; save r8
0000016d	A0406000		push	DAR
0000016e	20680000		add		DAR,r8,ZERO			; set the start of the string
nextChar2:
0000016f	60806000		ldb		r8					; get the character
00000170	30380000		cmp		r8,ZERO				; Null terminated string
00000171	D1000004		beq		donePrStr2			; done if null
00000172	D400001E		bsr		putCharToANSIScreen	; write out the character
00000173	20661000		add		DAR,DAR,r1			; Point to next character
00000174	C0FFFFFB		bra		nextChar2
donePrStr2:
00000175	D4000004		bsr		newLine
00000176	A1604000		pull	DAR					; restore DAR
00000177	A1804000		pull	r8					; restore r8
00000178	A1704000		pull	PC					; rts
	
;
; newLine - Print out a newline (CR-LF)
;

newLine:
00000179	A0408000		push	r8
0000017a	4280000A		lix		r8,0x0A				; Line Feed
0000017b	D4000015		bsr		putCharToANSIScreen	; Put the character to the screen
0000017c	4280000D		lix		r8,0x0D				; Carriage Return
0000017d	D4000013		bsr		putCharToANSIScreen	; Put the character to the screen
0000017e	D4FFFFD4		bsr		putCharToUART		; Echo character back to the UART
0000017f	A1804000		pull	r8
00000180	A1704000		pull	PC

;
; clearScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen:
00000181	A0408000		push	r8				; save r8
00000182	4280001B		lix		r8,0x1b			; ESC
00000183	D400000D		bsr		putCharToANSIScreen
00000184	D4FFFFCE		bsr		putCharToUART
00000185	4280005B		lix		r8,0x5b			; [
00000186	D400000A		bsr		putCharToANSIScreen
00000187	D4FFFFCB		bsr		putCharToUART
00000188	42800032		lix		r8,0x32			; 2
00000189	D4000007		bsr		putCharToANSIScreen
0000018a	D4FFFFC8		bsr		putCharToUART
0000018b	4280004A		lix		r8,0x4A			; J
0000018c	D4000004		bsr		putCharToANSIScreen
0000018d	D4FFFFC5		bsr		putCharToUART
0000018e	A1804000		pull	r8
0000018f	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
00000190	A0409000		push	r9
00000191	A0405000		push	PAR
00000192	A040A000		push	r10
00000193	42A00002		lix		r10,0x2		; TxReady bit
00000194	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
00000195	84905000		lpl		r9			; Read Status into r9
00000196	2399A000		and 	r9,r9,r10
00000197	C3FFFFFE		bez 	waitScreenTxStat
00000198	42500001		lix 	PAR,0x1
00000199	85508000		spl		r8			; echo the character
0000019a	A1A04000		pull	r10
0000019b	A1504000		pull	PAR
0000019c	A1904000		pull	r9
0000019d	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
0000019e	A0408000		push	r8
0000019f	42800000		lix		r8,0			; first note is 0
000001a0	D4000007		bsr 	setNote
000001a1	D400000D		bsr		enableBuzzer
000001a2	428000FA		lix		r8,250			; count for 1 Sec
000001a3	D4000023		bsr		delay_mS		; call delay_ms
000001a4	D4000016		bsr		disableBuzzer
000001a5	A1804000		pull	r8
000001a6	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
000001a7	A0408000		push	r8
000001a8	A0405000		push	PAR
000001a9	42504000		lix		PAR,0x4000
000001aa	85508000		spl		r8
000001ab	A1504000		pull	PAR
000001ac	A1804000		pull	r8
000001ad	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
000001ae	A0409000		push	r9
000001af	A0408000		push	r8
000001b0	A0405000		push	PAR
000001b1	42900010		lix		r9,0x0010		; Buzzer Enable line
000001b2	42502800		lix		PAR,0x2800
000001b3	84805000		lpl		r8
000001b4	22889000		or		r8,r8,r9
000001b5	85508000		spl		r8
000001b6	A1504000		pull	PAR
000001b7	A1804000		pull	r8
000001b8	A1904000		pull	r9
000001b9	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
000001ba	A0409000		push	r9
000001bb	A0408000		push	r8
000001bc	A0405000		push	PAR
000001bd	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
000001be	42502800		lix		PAR,0x2800
000001bf	84805000		lpl		r8
000001c0	23889000		and		r8,r8,r9
000001c1	85508000		spl		r8
000001c2	A1504000		pull	PAR
000001c3	A1804000		pull	r8
000001c4	A1904000		pull	r9
000001c5	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
000001c6	A0409000		push	r9
000001c7	42503802		lix		PAR,0x3802		; address of the mSec counter
000001c8	84905000		lpl		r9				; read the peripheral counter into r9
000001c9	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000001ca	84905000		lpl		r9				; check the elapsed time counter
000001cb	30389000		cmp		r8,r9
000001cc	CCFFFFFE		blt		loop_delay_mS
000001cd	A1904000		pull	r9
000001ce	A1704000		pull	PC

; wr7Seg8Dig
; passed r8 - value to send to the 7 seg display

wr7Seg8Dig:
000001cf	A0405000		push	PAR
000001d0	42503000		lix		PAR,0x3000		; Seven Segment LED lines
000001d1	85508000		spl		r8				; Write out LED bits
000001d2	A1504000		pull	PAR
000001d3	A1704000		pull	PC
