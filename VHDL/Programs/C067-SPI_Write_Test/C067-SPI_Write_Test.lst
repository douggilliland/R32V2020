; Write to the SPI-POTX2 card
;	http://land-boards.com/blwiki/index.php?title=SPI-POTX2
;	Card has an Dual Digital Potentiometers
; Arduino code 
; https://raw.githubusercontent.com/land-boards/lb-Arduino-Code/master/LBCards/SPIPOTX2/SPI-POTX2-Triangle/SPI-POTX2-Triangle.ino
; 

prompt:			.string "R32V2020> "
xfered:			.string "Transfered"

;
; main
;

main:
00000000	D400005E		bsr		clearScreen			; Not required for this example
00000001	42800000		lix		r8,prompt.lower		; r8 contains the pointer to the the prompt 
00000002	D400003D		bsr		printString			; Print the prompt to the screen
; Write to SPI-POTX2
; x6000-x67FF (2KB)	- SPI Address Range
; x6000 - d0-d7 = Write value
; x6001 - d0 = Write Chip Select line
; x6002 - d0 = Busy flag
; x6003 - 
	;bsr		waitSPIReady
loopForever:
00000003	42800001		lix		r8,0x01
00000004	D4000006		bsr		writeSPI0
00000005	4280007E		lix		r8,0x7e
00000006	D4000004		bsr		writeSPI0
00000007	C0FFFFFC		bra		loopForever

transferDone:
00000008	42800003		lix		r8,xfered.lower		; embedded print string
00000009	D4000036		bsr		printString			; Print the string to the screen

writeSPI0:
0000000a	A0408000		push	r8
0000000b	42800000		lix		r8,0x00			; start chip select
0000000c	42506001		lix		PAR,0x6001
0000000d	85508000		spl		r8
0000000e	42800000		lix		r8,0x00			; register select - REG0
0000000f	42506000		lix		PAR,0x6000
00000010	85508000		spl		r8
00000011	D4000009		bsr		waitSPIReady
00000012	A1804000		pull	r8
00000013	42506000		lix		PAR,0x6000
00000014	85508000		spl		r8
00000015	D4000005		bsr		waitSPIReady
00000016	42800001		lix		r8,0x01			; end chip select
00000017	42506001		lix		PAR,0x6001
00000018	85508000		spl		r8
00000019	A1704000		pull	PC	

waitSPIReady:
0000001a	A0408000		push	r8
0000001b	42506002		lix		PAR,0x6002
loopSPIRdy:
0000001c	84805000		lpl		r8
0000001d	30380000		cmp		r8,r0
0000001e	D1FFFFFE		beq		loopSPIRdy
loopSPIRdy2:
0000001f	84805000		lpl		r8
00000020	30381000		cmp		r8,r1
00000021	D1FFFFFE		beq		loopSPIRdy2
00000022	A1804000		pull	r8
00000023	A1704000		pull	PC

;
; readUartStatus
;
	
readUartStatus:
00000024	D4000004		bsr		waitGetCharFromUART
putCharToANSIScreenAndUART:
00000025	D4000044		bsr		putCharToANSIScreen	; put the character to the screen
00000026	D400000B		bsr		putCharToUART
00000027	C0FFFFFD		bra		readUartStatus

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
00000028	A0405000		push	PAR
00000029	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
0000002a	84805000		lpl		r8			; Read Status into r8
0000002b	23881000		and 	r8,r8,ONE
0000002c	C3FFFFFE		bez 	waitUartRxStat
0000002d	42501801		lix 	PAR,0x1801
0000002e	84805000		lpl		r8
0000002f	A1504000		pull	PAR
00000030	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
00000031	A0409000		push	r9
00000032	A0405000		push	PAR
00000033	A040A000		push	r10
00000034	42A00002		lix		r10,0x2
00000035	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
00000036	84905000		lpl		r9			; Read Status into r9
00000037	2399A000		and 	r9,r9,r10
00000038	C3FFFFFE		bez 	waitUartTxStat
00000039	42501801		lix 	PAR,0x1801
0000003a	85508000		spl		r8			; echo the character
0000003b	A1A04000		pull	r10
0000003c	A1504000		pull	PAR
0000003d	A1904000		pull	r9
0000003e	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
0000003f	A0408000		push	r8				; save r8
00000040	A0409000		push	r9				; save r9
00000041	A0406000		push	DAR
00000042	20680000		add		DAR,r8,ZERO		; set the start of the string
nextLong:
00000043	64806000		ldl		r8				; get the string
00000044	31808000		ens		r8,r8			; swap the endian
00000045	429000FF		lix		r9,0xff			; mask for null termination check
00000046	23998000		and		r9,r9,r8
00000047	C3000013		bez		donePrStr
00000048	D4000021		bsr		putCharToANSIScreen	; write out the character
00000049	28808000		sr8		r8,r8
0000004a	429000FF		lix		r9,0xff			; mask for null termination check
0000004b	23998000		and		r9,r9,r8
0000004c	C300000E		bez		donePrStr
0000004d	D400001C		bsr		putCharToANSIScreen	; write out the character
0000004e	28808000		sr8		r8,r8
0000004f	429000FF		lix		r9,0xff			; mask for null termination check
00000050	23998000		and		r9,r9,r8
00000051	C3000009		bez		donePrStr
00000052	D4000017		bsr		putCharToANSIScreen	; write out the character
00000053	28808000		sr8		r8,r8
00000054	429000FF		lix		r9,0xff			; mask for null termination check
00000055	23998000		and		r9,r9,r8
00000056	C3000004		bez		donePrStr
00000057	D4000012		bsr		putCharToANSIScreen	; write out the character
lastOfLong:
00000058	20661000		add		DAR,DAR,ONE
00000059	C0FFFFEA		bra		nextLong
donePrStr:
0000005a	A1604000		pull	DAR				; restore DAR
0000005b	A1904000		pull	r9				; restore r9
0000005c	A1804000		pull	r8				; restore r8
0000005d	A1704000		pull	PC				; rts
	
;
; clearScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen:
0000005e	A0408000		push	r8				; save r8
0000005f	4280001B		lix		r8,0x1b			; ESC
00000060	D4000009		bsr		putCharToANSIScreen
00000061	4280005B		lix		r8,0x5b			; [
00000062	D4000007		bsr		putCharToANSIScreen
00000063	42800032		lix		r8,0x32			; 2
00000064	D4000005		bsr		putCharToANSIScreen
00000065	4280004A		lix		r8,0x4A			; J
00000066	D4000003		bsr		putCharToANSIScreen
00000067	A1804000		pull	r8
00000068	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToANSIScreen:
00000069	A0409000		push	r9
0000006a	A040A000		push	r10
0000006b	A0405000		push	PAR
0000006c	42A00002		lix		r10,0x2		; TxReady bit
0000006d	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
0000006e	84905000		lpl		r9			; Read Status into r9
0000006f	2399A000		and 	r9,r9,r10
00000070	C3FFFFFE		bez 	waitScreenTxStat
00000071	42500001		lix 	PAR,0x1
00000072	85508000		spl		r8			; echo the character
00000073	A1504000		pull	PAR
00000074	A1A04000		pull	r10
00000075	A1904000		pull	r9
00000076	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
00000077	A0408000		push	r8
00000078	42800000		lix		r8,0			; first note is 0
00000079	D4000007		bsr 	setNote
0000007a	D400000D		bsr		enableBuzzer
0000007b	428000FA		lix		r8,250			; count for 1 Sec
0000007c	D4000023		bsr		delay_mS		; call delay_ms
0000007d	D4000016		bsr		disableBuzzer
0000007e	A1804000		pull	r8
0000007f	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
00000080	A0408000		push	r8
00000081	A0405000		push	PAR
00000082	42504000		lix		PAR,0x4000
00000083	85508000		spl		r8
00000084	A1504000		pull	PAR
00000085	A1804000		pull	r8
00000086	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
00000087	A0409000		push	r9
00000088	A0408000		push	r8
00000089	A0405000		push	PAR
0000008a	42900010		lix		r9,0x0010		; Buzzer Enable line
0000008b	42502800		lix		PAR,0x2800
0000008c	84805000		lpl		r8
0000008d	22889000		or		r8,r8,r9
0000008e	85508000		spl		r8
0000008f	A1504000		pull	PAR
00000090	A1804000		pull	r8
00000091	A1904000		pull	r9
00000092	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
00000093	A0409000		push	r9
00000094	A0408000		push	r8
00000095	A0405000		push	PAR
00000096	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
00000097	42502800		lix		PAR,0x2800
00000098	84805000		lpl		r8
00000099	23889000		and		r8,r8,r9
0000009a	85508000		spl		r8
0000009b	A1504000		pull	PAR
0000009c	A1804000		pull	r8
0000009d	A1904000		pull	r9
0000009e	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
0000009f	A0409000		push	r9
000000a0	A0405000		push	PAR
000000a1	42503802		lix		PAR,0x3802		; address of the mSec counter
000000a2	84905000		lpl		r9				; read the peripheral counter into r9
000000a3	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000a4	84905000		lpl		r9				; check the elapsed time counter
000000a5	30389000		cmp		r8,r9
000000a6	CCFFFFFE		blt		loop_delay_mS
000000a7	A1504000		pull	PAR
000000a8	A1904000		pull	r9
000000a9	A1704000		pull	PC

;	
; delay_uS - delay for the number of uSecs
; pass mSec delay in r8
; Uses routine uses r9 (saved and restored)
;

delay_uS:
000000aa	A0409000		push	r9
000000ab	A0405000		push	PAR
000000ac	42503801		lix		PAR,0x3801		; address of the uSec counter
000000ad	84905000		lpl		r9				; read the peripheral counter into r9
000000ae	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_uS:
000000af	84905000		lpl		r9				; check the elapsed time counter
000000b0	30389000		cmp		r8,r9
000000b1	CCFFFFFE		blt		loop_delay_uS
000000b2	A1504000		pull	PAR
000000b3	A1904000		pull	r9
000000b4	A1704000		pull	PC
