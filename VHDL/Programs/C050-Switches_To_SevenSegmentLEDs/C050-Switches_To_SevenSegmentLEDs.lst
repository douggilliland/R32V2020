; Read Switches and put to Seven Segment LED Display
hello:	.string "R32V2020> "
screenPtr:	.long 0x0000
screenBase:	.long 0x0

;
; Read Switches and put to the Seven Segment LED Display
;

main:
00000000	D400005A		bsr	clearScreen
00000001	D4000059		bsr	clearScreen
00000002	42800000		lix	r8,0x0			; Move cursor to home position
00000003	D4000074		bsr	setCharPos
readDataMemory:
00000004	41800000		liu	r8,hello.upper
00000005	40800000		lil	r8,hello.lower
00000006	D4000035		bsr	printString
loopReadSwitches:
00000007	D400000B		bsr	readSws
putCharToScreen:
00000008	D4000002		bsr	wr7Seg8Dig		; put the switches to the 7 Segment LED
00000009	C0FFFFFE		bra	loopReadSwitches

; wr7Seg8Dig
; passed r8 - value to send to the 7 seg display

wr7Seg8Dig:
0000000a	A0405000		pss	PAR
0000000b	A0408000		pss	r8
0000000c	41500000		liu	PAR,0x0000
0000000d	40503000		lil	PAR,0x3000		; Seven Segment LED lines
0000000e	85508000		spl	r8				; Write out LED bits
0000000f	A1804000		pus	r8
00000010	A1504000		pus	PAR
00000011	A1704000		pus	PC
	
;
; readSws
; switches value returned in r8
; switches are high when pressed
;

readSws:
00000012	A0405000		pss	PAR
00000013	A0409000		pss	r9
00000014	42900007		lix	r9,0x7
00000015	41500000		liu	PAR,0x0000
00000016	40502000		lil	PAR,0x2000	; Switches address
00000017	84805000		lpl	r8			; Read switches into r9
00000018	24889000		xor	r8,r8,r9
00000019	A1904000		pus	r9
0000001a	A1504000		pus	PAR
0000001b	A1704000		pus	PC

;
; getPS2Char
; returns character received in r8
;

getPS2Char:
0000001c	A0409000		pss	r9
0000001d	A0405000		pss	PAR
0000001e	41500000		liu	PAR,0x0000
0000001f	40501000		lil	PAR,0x1000	; PS/2 Status
waitPS2RxStat:
00000020	84905000		lpl	r9			; Read Status into r9
00000021	23991000		and r9,r9,r1
00000022	C3FFFFFE		bez waitPS2RxStat
getCharFromPS2:
00000023	41500000		liu	PAR,0x0000
00000024	40500800		lil PAR,0x0800
00000025	84805000		lpl	r8
00000026	41500000		liu	PAR,0x0000
00000027	40501000		lil	PAR,0x1000	; PS/2 Status
whilePS2RxStat:
00000028	A1504000		pus	PAR
00000029	A1904000		pus	r9
0000002a	A1704000		pus	PC

;
; putUARTChar - Put a character to the UART
; passed character in r8 is sent out the UART
;

putUARTChar:
0000002b	A0408000		pss	r8
0000002c	A0409000		pss	r9
0000002d	A040A000		pss	r10
0000002e	A0405000		pss	PAR
0000002f	40A00002		lil	r10,0x2
00000030	40501800		lil	PAR,0x1800	; UART Status
waitUartTxStat:
00000031	84905000		lpl	r9			; Read Status into r9
00000032	2399A000		and r9,r9,r10
00000033	C3FFFFFE		bez waitUartTxStat
00000034	40501801		lil PAR,0x1801
00000035	85508000		spl	r8			; echo the character
00000036	A1504000		pus	PAR
00000037	A1A04000		pus	r10
00000038	A1904000		pus	r9
00000039	A1804000		pus	r8
0000003a	A1704000		pus	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string
; strings are null terminated
; strings are bytes packed into long words
;

printString:
0000003b	A0408000		pss	r8				; save r8
0000003c	A0409000		pss	r9				; save r9
0000003d	A0406000		pss	DAR
0000003e	23680000		and	DAR,r8,ZERO		; set the start of the string
nextLong:
0000003f	64806000		ldl	r8				; get the string
00000040	31808000		ens	r8,r8			; swap the endian
00000041	429000FF		lix	r9,0xff			; mask for null termination check
00000042	23998000		and	r9,r9,r8
00000043	C3000013		bez	donePrStr
00000044	D4000022		bsr	putCharToScreen			; write out the character
00000045	28808000		sr8	r8,r8
00000046	429000FF		lix	r9,0xff			; mask for null termination check
00000047	23998000		and	r9,r9,r8
00000048	C300000E		bez	donePrStr
00000049	D400001D		bsr	putCharToScreen			; write out the character
0000004a	28808000		sr8	r8,r8
0000004b	429000FF		lix	r9,0xff			; mask for null termination check
0000004c	23998000		and	r9,r9,r8
0000004d	C3000009		bez	donePrStr
0000004e	D4000018		bsr	putCharToScreen			; write out the character
0000004f	28808000		sr8	r8,r8
00000050	429000FF		lix	r9,0xff			; mask for null termination check
00000051	23998000		and	r9,r9,r8
00000052	C3000004		bez	donePrStr
00000053	D4000013		bsr	putCharToScreen			; write out the character
lastOfLong:
00000054	23661000		and	DAR,DAR,ONE
00000055	C0FFFFEA		bra	nextLong
donePrStr:
00000056	A1604000		pus	DAR				; restore DAR
00000057	A1904000		pus	r9				; restore r9
00000058	A1804000		pus	r8				; restore r8
00000059	A1704000		pus	PC				; rts
	
;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
;

clearScreen:
0000005a	A0409000		pss	r9				; save r9
0000005b	A0408000		pss	r8				; save r8
0000005c	42800000		lix	r8,0x0			; set screen position to home
0000005d	D400001A		bsr	setCharPos
0000005e	42800020		lix	r8,0x0020		; fill with spaces
0000005f	429007FE		lix r9,0x7FE		; loopCount	(1K minus 1)
looper:
00000060	D4000006		bsr	putCharToScreen
00000061	23992000		and r9,r9,MINUS1	; decrement character counter
00000062	D2FFFFFE		bne	looper			; loop until complete
00000063	A1804000		pus	r8
00000064	A1904000		pus	r9
00000065	A1704000		pus	PC				; rts

;
; putCharToScreen - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToScreen:
00000066	A040A000		pss	r10					; save r10
00000067	A0409000		pss	r9					; save r9
00000068	A0406000		pss	DAR
00000069	A0405000		pss	PAR
0000006a	41900000		liu	r9,screenPtr.upper
0000006b	40900003		lil	r9,screenPtr.lower	; r9 is the ptr to screenPtr
0000006c	23690000		and	DAR,r9,r0			; DAR points to screenPtr
0000006d	64A06000		ldl	r10					; r10 has screenPtr value
0000006e	235A0000		and	PAR,r10,r0			; Set PAR to screenPtr
0000006f	81508000		spb	r8					; write character to screen
00000070	23AA1000		and	r10,r10,ONE			; increment screen pointer
00000071	6560A000		sdl	r10					; save new pointer
00000072	A1504000		pus PAR					; restore PAR
00000073	A1604000		pus DAR					; restore DAR
00000074	A1904000		pus r9					; restore r9
00000075	A1A04000		pus r10					; restore r10
00000076	A1704000		pus	PC					; rts

;
; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; screenBase has the base address of the screen memory
; screenPtr contains the address of the current char position
;

setCharPos:
00000077	A0409000		pss	r9						; save r9
00000078	A040A000		pss	r10						; save r10
00000079	A0406000		pss	DAR						; save DAR
0000007a	41A00000		liu	r10,screenBase.upper
0000007b	40A00004		lil	r10,screenBase.lower
0000007c	236A0000		and	DAR,r10,ZERO			; DAR points to the screenBase
0000007d	64A06000		ldl	r10						; r10 has the screen base address
0000007e	23A80000		and	r10,r8,ZERO				; add passed position to base
0000007f	41900000		liu	r9,screenPtr.upper
00000080	40900003		lil	r9,screenPtr.lower		; r9 is the ptr to screenPtr
00000081	23690000		and	DAR,r9,ZERO				; DAR points to screenPtr
00000082	6560A000		sdl	r10						; store new screen address
00000083	A1604000		pus DAR						; restore DAR
00000084	A1A04000		pus r10						; restore r10
00000085	A1904000		pus r9						; restore r9
00000086	A1704000		pus	PC						; rts
