hello:	.string "R32V2020> "
screenPtr:	.long 0x0000
screenBase:	.long 0x0

;
; Read UART character and put it to the SVGA Display
;

main:
00000000	D4000042		bsr	clearScreen
00000001	42800000		lix	r8,0x0			; Move cursor to home position
00000002	D4000067		bsr	setCharPos
readDataMemory:
00000003	41800000		liu	r8,hello.upper
00000004	40800000		lil	r8,hello.lower
00000005	D400001E		bsr	printString
readUartStatus:
00000006	D4000004		bsr	getCharFromUART
putCharToScreenAndUART:
00000007	D4000047		bsr	putCharToScreen		; put the character to the screen
00000008	D400000D		bsr	putCharToUART
00000009	C0FFFFFD		bra	readUartStatus

;
; getCharFromUART
; returns character received in r8
;

getCharFromUART:
0000000a	A0409000		push	r9
0000000b	A0405000		push	PAR
0000000c	42501800		lix	PAR,0x1800	; UART Status
waitUartRxStat:
0000000d	84905000		lpl	r9			; Read Status into r9
0000000e	23991000		and r9,r9,ONE
0000000f	C3FFFFFE		bez waitUartRxStat
getCharFromUart:
00000010	42501801		lix PAR,0x1801
00000011	84805000		lpl	r8
00000012	A1504000		pull	PAR
00000013	A1904000		pull	r9
00000014	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
00000015	A0409000		push	r9
00000016	A0405000		push	PAR
00000017	A040A000		push	r10
00000018	42A00002		lix	r10,0x2
00000019	42501800		lix	PAR,0x1800	; UART Status
waitUartTxStat:
0000001a	84905000		lpl	r9			; Read Status into r9
0000001b	2399A000		and r9,r9,r10
0000001c	C3FFFFFE		bez waitUartTxStat
0000001d	42501801		lix PAR,0x1801
0000001e	85508000		spl	r8			; echo the character
0000001f	A1A04000		pull	r10
00000020	A1504000		pull	PAR
00000021	A1904000		pull	r9
00000022	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string
; strings are null terminated
; strings are bytes packed into long words
;

printString:
00000023	A0408000		push	r8				; save r8
00000024	A0409000		push	r9				; save r9
00000025	A0406000		push	DAR
00000026	20680000		add	DAR,r8,ZERO		; set the start of the string
nextLong:
00000027	64806000		ldl	r8				; get the string
00000028	31808000		ens	r8,r8			; swap the endian
00000029	429000FF		lix	r9,0xff			; mask for null termination check
0000002a	23998000		and	r9,r9,r8
0000002b	C3000013		bez	donePrStr
0000002c	D4000022		bsr	putCharToScreen			; write out the character
0000002d	28808000		sr8	r8,r8
0000002e	429000FF		lix	r9,0xff			; mask for null termination check
0000002f	23998000		and	r9,r9,r8
00000030	C300000E		bez	donePrStr
00000031	D400001D		bsr	putCharToScreen			; write out the character
00000032	28808000		sr8	r8,r8
00000033	429000FF		lix	r9,0xff			; mask for null termination check
00000034	23998000		and	r9,r9,r8
00000035	C3000009		bez	donePrStr
00000036	D4000018		bsr	putCharToScreen			; write out the character
00000037	28808000		sr8	r8,r8
00000038	429000FF		lix	r9,0xff			; mask for null termination check
00000039	23998000		and	r9,r9,r8
0000003a	C3000004		bez	donePrStr
0000003b	D4000013		bsr	putCharToScreen			; write out the character
lastOfLong:
0000003c	20661000		add	DAR,DAR,ONE
0000003d	C0FFFFEA		bra	nextLong
donePrStr:
0000003e	A1604000		pull	DAR				; restore DAR
0000003f	A1904000		pull	r9				; restore r9
00000040	A1804000		pull	r8				; restore r8
00000041	A1704000		pull	PC				; rts
	
;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
;

clearScreen:
00000042	A0409000		push	r9				; save r9
00000043	A0408000		push	r8				; save r8
00000044	42800000		lix	r8,0x0			; set screen position to home
00000045	D4000024		bsr	setCharPos
00000046	42800020		lix	r8,0x0020		; fill with spaces
00000047	429007FE		lix r9,0x7FE		; loopCount	(1K minus 1)
looper:
00000048	D4000006		bsr	putCharToScreen
00000049	20992000		add r9,r9,MINUS1	; decrement character counter
0000004a	D2FFFFFE		bne	looper			; loop until complete
0000004b	A1804000		pull	r8
0000004c	A1904000		pull	r9
0000004d	A1704000		pull	PC				; rts

;
; putCharToScreen - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToScreen:
0000004e	A040B000		push	r11					; save r11
0000004f	A040A000		push	r10					; save r10
00000050	A0409000		push	r9					; save r9
00000051	A0406000		push	DAR
00000052	A0405000		push	PAR
00000053	42900003		lix		r9,screenPtr.lower	; r9 is the ptr to screenPtr
00000054	20690000		add		DAR,r9,ZERO			; DAR points to screenPtr
00000055	64A06000		ldl		r10					; r10 has screenPtr value
00000056	40B0000D		lil		r11,0x0d			; CR
00000057	303B8000		cmp		r11,r8
00000058	D2000007		bne		notCR
00000059	40B0FFC0		lil		r11,0xffc0			; Go to the start of the line
0000005a	23AAB000		and		r10,r10,r11
0000005b	40B00040		lil		r11,0x40			; Go down a line
0000005c	20AAB000		add		r10,r10,r11
0000005d	205A1000		add		PAR,r10,ONE			; Set PAR to screenPtr
0000005e	C0000004		bra		skipPrintCR
notCR:
0000005f	205A0000		add		PAR,r10,ZERO		; Set PAR to screenPtr
00000060	81508000		spb		r8					; write character to screen
00000061	20AA1000		add		r10,r10,ONE			; increment screen pointer
skipPrintCR:
00000062	6560A000		sdl		r10					; save new pointer
00000063	A1504000		pull 	PAR					; restore PAR
00000064	A1604000		pull 	DAR					; restore DAR
00000065	A1904000		pull 	r9					; restore r9
00000066	A1A04000		pull 	r10					; restore r10
00000067	A1B04000		pull 	r11					; restore r11
00000068	A1704000		pull	PC					; rts

;
; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; screenBase has the base address of the screen memory
; screenPtr contains the address of the current char position
;

setCharPos:
00000069	A0409000		push	r9						; save r9
0000006a	A040A000		push	r10						; save r10
0000006b	A0406000		push	DAR						; save DAR
0000006c	42A00004		lix	r10,screenBase.lower
0000006d	206A0000		add	DAR,r10,ZERO			; DAR points to the screenBase
0000006e	64A06000		ldl	r10						; r10 has the screen base address
0000006f	20A80000		add	r10,r8,ZERO				; add passed position to base
00000070	42900003		lix	r9,screenPtr.lower		; r9 is the ptr to screenPtr
00000071	20690000		add	DAR,r9,ZERO				; DAR points to screenPtr
00000072	6560A000		sdl	r10						; store new screen address
00000073	A1604000		pull DAR						; restore DAR
00000074	A1A04000		pull r10						; restore r10
00000075	A1904000		pull r9						; restore r9
00000076	A1704000		pull	PC						; rts
