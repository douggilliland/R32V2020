; Read PS/2 keyboard character and put it to the Screen
start:
00000000	20400000		ads	SAR,r0,r0	; Initialize Stack Pointer (used for return address)
00000001	A2407000		sss	r7			; push the call address -1
00000002	C000002E		bra	clearScreen
00000003	20500000		ads	par,r0,r0	; start of screen
readDataMemory:
00000004	20600000		ads	dar,r0,r0	; clear the data memory addr pointer
00000005	64806000		ldl	r8			; get the long again
00000006	31808000		ens r8,r8		; endian swap for right byte order
00000007	A2407000		sss	r7			; store PC on the stack
00000008	C0000034		bra	putChar
00000009	28818000		rs8	r8,r1,r8
0000000a	A2407000		sss	r7
0000000b	C0000031		bra	putChar
0000000c	28818000		rs8	r8,r1,r8
0000000d	A2407000		sss	r7
0000000e	C000002E		bra	putChar
0000000f	28818000		rs8	r8,r1,r8
00000010	A2407000		sss	r7
00000011	C000002B		bra	putChar
00000012	20661000		ads	dar,dar,r1	; increment the data pointer
00000013	64806000		ldl	r8			; get the long again
00000014	31808000		ens r8,r8		; endian swap for right byte order
00000015	A2407000		sss	r7			; store PC on the stack
00000016	C0000026		bra	putChar
00000017	28818000		rs8	r8,r1,r8
00000018	A2407000		sss	r7
00000019	C0000023		bra	putChar
0000001a	28818000		rs8	r8,r1,r8
0000001b	A2407000		sss	r7
0000001c	C0000020		bra	putChar
0000001d	28818000		rs8	r8,r1,r8
0000001e	A2407000		sss	r7
0000001f	C000001D		bra	putChar
readKBStat:
00000020	20E00000		ads	r14,r0,r0	; r14 will contain the Keyboard data port address
00000021	40E00800		lil	r14,0x0800
00000022	20C00000		ads	r12,r0,r0	; r12 will contain the keyboard status address
00000023	40C01000		lil	r12,0x1000
00000024	20D00000		ads	r13,r0,r0	; r13 will contain the screen address
00000025	40D00010		lil	r13,0x0010	; 16th column on the screen (middle of the first line)
loopStatRead:
00000026	205C0000		ads	par,r12,r0	; kb status address
loopReadKbStat:
00000027	84B05000		lpl	r11			; get the kb status value
00000028	23BB1000		ars	r11,r11,r1	; test the data present bit
00000029	C3FFFFFE		bez	loopReadKbStat
readKeyboardData:
0000002a	205E0000		ads	par,r14,r0	; keyboard data port address
0000002b	84805000		lpl	r8			; read the keyboard data (r8 used as the character to put to screen)
storeToScreen:
0000002c	205D0000		ads par,r13,r0	; Screen address
0000002d	A2407000		sss	r7			; push return address-1
0000002e	C000000E		bra	putChar
0000002f	C0FFFFF7		bra	loopStatRead
;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
;

clearScreen:
00000030	20500000		ads par,r0,r0	; start of screen character memory
00000031	20800000		ads r8,r0,r0	; clear the character
00000032	40800020		lil	r8,0x0020	; fill with spaces
00000033	20900000		ads r9,r0,r0	; screen count
00000034	409007FE		lil r9,0x7FE	; loopCount	(1K minus 1)
looper:
00000035	81508000		spb r8			; put the character to the screen
00000036	20551000		ads	par,par,r1	; Increment screen pointer
00000037	20992000		ads r9,r9,r2	; decrement character counter
00000038	D2FFFFFD		bne	looper		; loop until complete
00000039	A3904000		lss	r9			; load calling address
0000003a	20991000		ads	r9,r9,r1	; skip the call
0000003b	20791000		ads	r7,r9,r1	; jump to the next address (rts)

;
; putChar - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putChar:
0000003c	81508000		spb	r8			; write character to peripheral bus
0000003d	20551000		ads	par,par,r1	; Go to the next character position	
0000003e	A3904000		lss	r9			; load calling address
0000003f	20991000		ads	r9,r9,r1	; inc by 1 to skip the call
00000040	20791000		ads	r7,r9,r1	; jump to the next address (rts)
	