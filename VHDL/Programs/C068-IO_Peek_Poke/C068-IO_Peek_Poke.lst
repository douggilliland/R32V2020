;
; I/O Peek/Poke Code
; Read a line from the Serial Port
; Parse the line that was read
; Perform the operation that was parsed out
;
; Commands are
; 	RL 00005000 - Read a long from address 0x00005000
; 	WL 00005000,12345678 - Write a long at address 0x00005000 with value 0x12345678
;

prompt:			.string "R32V2020> "
; lineBuff is 80 characters long
lineBuff:		.string "12345678901234567890123456789012345678901234567890123456789012345678901234567890"

;
; Read UART character and put it to the ANSI VGA Display
;

main:
00000000	D400004D		bsr		clearScreen
00000001	42800000		lix		r8,prompt.lower
00000002	42900000		lix		r9,0x0
00000003	42A0000D		lix		r10,0x0d			; Enter key
00000004	D400002A		bsr		printString
readUartStatus:
00000005	D4000012		bsr		waitGetCharFromUART	; Get a character from the UART
putCharToANSIScreenAndUART:
00000006	D4000052		bsr		putCharToANSIScreen	; Put the character to the screen
00000007	3038A000		cmp		r8,r10
00000008	D2000004		bne		skipEnter
00000009	42800000		lix		r8,0x0
0000000a	42900000		lix		r9,0x0
0000000b	C0000004		bra		doneEnter
skipEnter:
0000000c	26909000		sl8		r9,r9
0000000d	22998000		or		r9,r9,r8
0000000e	20890000		add		r8,r9,ZERO
doneEnter:
0000000f	D4000088		bsr		wr7Seg8Dig			; Put the character to the Seven Segment Display
00000010	D4000010		bsr		putCharToUART
00000011	C0FFFFF4		bra		readUartStatus

;
; readLineFromUART
; r8 used to get characters from UART
; r9 points to lineBuff
; r10 byte count in LineBuff (increments from 0-3)
; r11 long count in LineBuff (increments from 0-19)
; r12 accumulated character (bytes into long value)
;

readLineFromUART:
00000012	42800000		lix		r8,0x0				; clear character initially
00000013	42900003		lix		r9,lineBuff.lower	; Get the address
00000014	42A00000		lix		r10,0x0
00000015	42B00000		lix		r11,0x0
00000016	42C00000		lix		r12,0x0
	
;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
00000017	A0405000		push	PAR
00000018	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
00000019	84805000		lpl		r8			; Read Status into r8
0000001a	23881000		and 	r8,r8,ONE
0000001b	C3FFFFFE		bez 	waitUartRxStat
0000001c	42501801		lix 	PAR,0x1801
0000001d	84805000		lpl		r8
0000001e	A1504000		pull	PAR
0000001f	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
00000020	A0409000		push	r9
00000021	A0405000		push	PAR
00000022	A040A000		push	r10
00000023	42A00002		lix		r10,0x2
00000024	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
00000025	84905000		lpl		r9			; Read Status into r9
00000026	2399A000		and 	r9,r9,r10
00000027	C3FFFFFE		bez 	waitUartTxStat
00000028	42501801		lix 	PAR,0x1801
00000029	85508000		spl		r8			; echo the character
0000002a	A1A04000		pull	r10
0000002b	A1504000		pull	PAR
0000002c	A1904000		pull	r9
0000002d	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
0000002e	A0408000		push	r8				; save r8
0000002f	A0409000		push	r9				; save r9
00000030	A0406000		push	DAR
00000031	20680000		add		DAR,r8,ZERO		; set the start of the string
nextLong:
00000032	64806000		ldl		r8				; get the string
00000033	31808000		ens		r8,r8			; swap the endian
00000034	429000FF		lix		r9,0xff			; mask for null termination check
00000035	23998000		and		r9,r9,r8
00000036	C3000013		bez		donePrStr
00000037	D4000021		bsr		putCharToANSIScreen	; write out the character
00000038	28808000		sr8		r8,r8
00000039	429000FF		lix		r9,0xff			; mask for null termination check
0000003a	23998000		and		r9,r9,r8
0000003b	C300000E		bez		donePrStr
0000003c	D400001C		bsr		putCharToANSIScreen	; write out the character
0000003d	28808000		sr8		r8,r8
0000003e	429000FF		lix		r9,0xff			; mask for null termination check
0000003f	23998000		and		r9,r9,r8
00000040	C3000009		bez		donePrStr
00000041	D4000017		bsr		putCharToANSIScreen	; write out the character
00000042	28808000		sr8		r8,r8
00000043	429000FF		lix		r9,0xff			; mask for null termination check
00000044	23998000		and		r9,r9,r8
00000045	C3000004		bez		donePrStr
00000046	D4000012		bsr		putCharToANSIScreen	; write out the character
lastOfLong:
00000047	20661000		add		DAR,DAR,ONE
00000048	C0FFFFEA		bra		nextLong
donePrStr:
00000049	A1604000		pull	DAR				; restore DAR
0000004a	A1904000		pull	r9				; restore r9
0000004b	A1804000		pull	r8				; restore r8
0000004c	A1704000		pull	PC				; rts
	
;
; clearScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen:
0000004d	A0408000		push	r8				; save r8
0000004e	4280001B		lix		r8,0x1b			; ESC
0000004f	D4000009		bsr		putCharToANSIScreen
00000050	4280005B		lix		r8,0x5b			; [
00000051	D4000007		bsr		putCharToANSIScreen
00000052	42800032		lix		r8,0x32			; 2
00000053	D4000005		bsr		putCharToANSIScreen
00000054	4280004A		lix		r8,0x4A			; J
00000055	D4000003		bsr		putCharToANSIScreen
00000056	A1804000		pull	r8
00000057	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToANSIScreen:
00000058	A0409000		push	r9
00000059	A0405000		push	PAR
0000005a	A040A000		push	r10
0000005b	42A00002		lix		r10,0x2		; TxReady bit
0000005c	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
0000005d	84905000		lpl		r9			; Read Status into r9
0000005e	2399A000		and 	r9,r9,r10
0000005f	C3FFFFFE		bez 	waitScreenTxStat
00000060	42500001		lix 	PAR,0x1
00000061	85508000		spl		r8			; echo the character
00000062	A1A04000		pull	r10
00000063	A1504000		pull	PAR
00000064	A1904000		pull	r9
00000065	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
00000066	A0408000		push	r8
00000067	42800000		lix		r8,0			; first note is 0
00000068	D4000007		bsr 	setNote
00000069	D400000D		bsr		enableBuzzer
0000006a	428000FA		lix		r8,250			; count for 1 Sec
0000006b	D4000023		bsr		delay_mS		; call delay_ms
0000006c	D4000016		bsr		disableBuzzer
0000006d	A1804000		pull	r8
0000006e	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
0000006f	A0408000		push	r8
00000070	A0405000		push	PAR
00000071	42504000		lix		PAR,0x4000
00000072	85508000		spl		r8
00000073	A1504000		pull	PAR
00000074	A1804000		pull	r8
00000075	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
00000076	A0409000		push	r9
00000077	A0408000		push	r8
00000078	A0405000		push	PAR
00000079	42900010		lix		r9,0x0010		; Buzzer Enable line
0000007a	42502800		lix		PAR,0x2800
0000007b	84805000		lpl		r8
0000007c	22889000		or		r8,r8,r9
0000007d	85508000		spl		r8
0000007e	A1504000		pull	PAR
0000007f	A1804000		pull	r8
00000080	A1904000		pull	r9
00000081	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
00000082	A0409000		push	r9
00000083	A0408000		push	r8
00000084	A0405000		push	PAR
00000085	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
00000086	42502800		lix		PAR,0x2800
00000087	84805000		lpl		r8
00000088	23889000		and		r8,r8,r9
00000089	85508000		spl		r8
0000008a	A1504000		pull	PAR
0000008b	A1804000		pull	r8
0000008c	A1904000		pull	r9
0000008d	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
0000008e	A0409000		push	r9
0000008f	42503802		lix		PAR,0x3802		; address of the mSec counter
00000090	84905000		lpl		r9				; read the peripheral counter into r9
00000091	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
00000092	84905000		lpl		r9				; check the elapsed time counter
00000093	30389000		cmp		r8,r9
00000094	CCFFFFFE		blt		loop_delay_mS
00000095	A1904000		pull	r9
00000096	A1704000		pull	PC

; wr7Seg8Dig
; passed r8 - value to send to the 7 seg display

wr7Seg8Dig:
00000097	A0405000		push	PAR
00000098	42503000		lix		PAR,0x3000		; Seven Segment LED lines
00000099	85508000		spl		r8				; Write out LED bits
0000009a	A1504000		pull	PAR
0000009b	A1704000		pull	PC
