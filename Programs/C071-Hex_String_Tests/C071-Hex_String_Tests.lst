;
; C071-Hex_String_Tests - Read a line from the UART serial input
; Convert the character pair at the start of the string to hex byte
; Display the hex code on the Seven Segment Display
;

prompt:			.string "R32V2020> "
; lineBuff is 80 characters long
lineBuff:		.string "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
lineEnd:		.long 0x00
syntaxError:	.string "Syntax error"

;
; Read UART character and put it to the ANSI VGA Display
;

main:
00000000	D4000099		bsr		clearScreen
00000001	42800000		lix		r8,prompt.lower
00000002	D400008B		bsr		printString
loopRead:
00000003	D400004B		bsr		getLine
00000004	4280000C		lix		r8,lineBuff.lower	; DAR pointer = start of line buffer
00000005	D4000002		bsr		hexToSevenSeg		; 
00000006	C0FFFFFD		bra		loopRead

;
; hexToSevenSeg - Convert a two ASCII digit value into a hex byte
; r8 points to the start of the hex string
;

hexToSevenSeg:
00000007	A0408000		push	r8
00000008	A0409000		push	r9
00000009	A040A000		push	r10
0000000a	A0406000		push	DAR
0000000b	A0405000		push	PAR
0000000c	42900000		lix		r9,0
0000000d	20680000		add		DAR,r8,ZERO
0000000e	60806000		ldb		r8
0000000f	D4000012		bsr		asciiToHex
00000010	24998000		or		r9,r9,r8
00000011	30909000		sl1		r9,r9
00000012	30909000		sl1		r9,r9
00000013	30909000		sl1		r9,r9
00000014	30909000		sl1		r9,r9
00000015	20661000		add		DAR,DAR,ONE
00000016	60806000		ldb		r8
00000017	D400000A		bsr		asciiToHex
00000018	24998000		or		r9,r9,r8
00000019	42503000		lix		PAR,0x3000		; seven segment display
0000001a	85509000		spl		r9
0000001b	A1504000		pull	PAR
0000001c	A1604000		pull	DAR
0000001d	A1A04000		pull	r10
0000001e	A1904000		pull	r9
0000001f	A1804000		pull	r8
00000020	A1704000		pull	PC

;
; asciiToHex - Convert a single ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
; Result is returned in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
;

asciiToHex:
00000021	A0409000		push	r9
00000022	42900066		lix		r9,0x66		; check if letter is > 'f'
00000023	38398000		cmp		r9,r8
00000024	CF000025		bgt		a2h_Error
00000025	42900030		lix		r9,0x30		; check if letter is < '0'
00000026	38398000		cmp		r9,r8	
00000027	CC000022		blt		a2h_Error
00000028	4290003A		lix		r9,0x3A		; check if letter is between '0' and '9' inclusively
00000029	38398000		cmp		r9,r8
0000002a	CC000011		blt		gotDigit
0000002b	42900041		lix		r9,0x41		; check if letter is between '9' and 'A' exclusively
0000002c	38398000		cmp		r9,r8
0000002d	CC00001C		blt		a2h_Error
0000002e	42900047		lix		r9,0x47		; check if letter is between 'A' and F' inclusively
0000002f	38398000		cmp		r9,r8
00000030	CC000012		blt		gotUpperLetter
00000031	42900061		lix		r9,0x61		; check if between 'F' and 'a' exclusively
00000032	38398000		cmp		r9,r8
00000033	CC000016		blt		a2h_Error
; Lower case letter
00000034	42900057		lix		r9,0x57
00000035	26992000		xor		r9,r9,MINUS1
00000036	20991000		add		r9,r9,ONE
00000037	20889000		add		r8,r8,r9
00000038	4290000F		lix		r9,0x0F
00000039	25889000		and		r8,r8,r9
0000003a	C0000012		bra		doneConvA2H
gotDigit:
0000003b	42900030		lix		r9,0x30
0000003c	26992000		xor		r9,r9,MINUS1
0000003d	20991000		add		r9,r9,ONE
0000003e	20889000		add		r8,r8,r9
0000003f	4290000F		lix		r9,0x0F
00000040	25889000		and		r8,r8,r9
00000041	C000000B		bra		doneConvA2H
gotUpperLetter:
00000042	42900037		lix		r9,0x37
00000043	26992000		xor		r9,r9,MINUS1
00000044	20991000		add		r9,r9,ONE
00000045	20889000		add		r8,r8,r9
00000046	4290000F		lix		r9,0x0F
00000047	25889000		and		r8,r8,r9
00000048	C0000004		bra		doneConvA2H
a2h_Error:
00000049	42800064		lix		r8,syntaxError.lower
0000004a	D4000043		bsr		printString
0000004b	4280DEAD		lix		r8,0xDEAD
doneConvA2H:
0000004c	A1904000		pull	r9
0000004d	A1704000		pull	PC
;
; getLine - Reads the UART and fills a buffer with the characters received
; r8 received character - Character received from the UART
; r9 is constant - ENTER key on keyboard
; r10 is the input buffer length
; r11 is the BACK key on keyboard
; r12 used to test the backspace doesn't go past the start of the buffer
; DAR points to lineBuff current character position
;

getLine:
0000004e	A0408000		push	r8
0000004f	A0409000		push	r9
00000050	A040A000		push	r10
00000051	A040B000		push	r11
00000052	A040C000		push	r12
00000053	A0406000		push	DAR
00000054	4260000C		lix		DAR,lineBuff.lower	; DAR pointer = start of line buffer
00000055	42B0007F		lix		r11,0x7F			; BACK key - rubout
00000056	42A0004F		lix		r10,79				; number of chars in the line buffer
00000057	4290000D		lix		r9,0x0D				; ENTER key - ends the line
loopReadLine:
00000058	D400001E		bsr		waitGetCharFromUART	; Get a character from the UART
00000059	D400004F		bsr		putCharToANSIScreen	; Put the character to the screen
0000005a	D4000025		bsr		putCharToUART		; Echo character back to the UART
0000005b	38389000		cmp		r8,r9				; check if received char was end of line
0000005c	D1000007		beq		gotEOL
0000005d	3838B000		cmp		r8,r11
0000005e	D100000A		beq		gotBackspace
0000005f	61608000		sdb		r8
00000060	20661000		add		DAR,DAR,ONE			; increment to next long in buffer
00000061	20AA2000		add		r10,r10,MINUS1
00000062	C7FFFFF6		bnz		loopReadLine		; Next char would overflow
	; tbd add code for line too long	
gotEOL:
00000063	4280000A		lix		r8,0x0A				; Echo line feed after CR
00000064	D4000044		bsr		putCharToANSIScreen	; Put the character to the screen
00000065	D400001A		bsr		putCharToUART		; Echo character back to the UART
00000066	61600000		sdb		r0					; null at end of line read
00000067	C0000007		bra		doneHandlingLine
gotBackspace:
00000068	20662000		add		DAR,DAR,MINUS1
00000069	42C0000C		lix		r12,lineBuff.lower	; r12 pointer = start of line buffer
0000006a	383C6000		cmp		r12,DAR
0000006b	CFFFFFED		bgt		loopReadLine
0000006c	206C0000		add		DAR,r12,r0
0000006d	C0FFFFEB		bra		loopReadLine
doneHandlingLine:
0000006e	A1604000		pull	DAR
0000006f	A1C04000		pull	r12
00000070	A1B04000		pull	r11
00000071	A1A04000		pull	r10
00000072	A1904000		pull	r9
00000073	A1804000		pull	r8
00000074	A1704000		pull	PC

;
;
;
	
parseLine:
00000075	A1704000		pull	PC
	
;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
00000076	A0405000		push	PAR
00000077	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
00000078	84805000		lpl		r8			; Read Status into r8
00000079	25881000		and 	r8,r8,ONE
0000007a	C3FFFFFE		bez 	waitUartRxStat
0000007b	42501801		lix 	PAR,0x1801
0000007c	84805000		lpl		r8
0000007d	A1504000		pull	PAR
0000007e	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
0000007f	A0409000		push	r9
00000080	A0405000		push	PAR
00000081	A040A000		push	r10
00000082	42A00002		lix		r10,0x2
00000083	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
00000084	84905000		lpl		r9			; Read Status into r9
00000085	2599A000		and 	r9,r9,r10
00000086	C3FFFFFE		bez 	waitUartTxStat
00000087	42501801		lix 	PAR,0x1801
00000088	85508000		spl		r8			; echo the character
00000089	A1A04000		pull	r10
0000008a	A1504000		pull	PAR
0000008b	A1904000		pull	r9
0000008c	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
0000008d	A0408000		push	r8				; save r8
0000008e	A0406000		push	DAR
0000008f	20680000		add		DAR,r8,ZERO		; set the start of the string
nextChar:
00000090	60806000		ldb		r8				; get the character
00000091	38380000		cmp		r8,ZERO			; Null terminated string
00000092	D1000004		beq		donePrStr		; done if null
00000093	D4000015		bsr		putCharToANSIScreen	; write out the character
00000094	20661000		add		DAR,DAR,r1		; Point to next character
00000095	C0FFFFFB		bra		nextChar
donePrStr:
00000096	A1604000		pull	DAR				; restore DAR
00000097	A1804000		pull	r8				; restore r8
00000098	A1704000		pull	PC				; rts
	
;
; clearScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen:
00000099	A0408000		push	r8				; save r8
0000009a	4280001B		lix		r8,0x1b			; ESC
0000009b	D400000D		bsr		putCharToANSIScreen
0000009c	D4FFFFE3		bsr		putCharToUART
0000009d	4280005B		lix		r8,0x5b			; [
0000009e	D400000A		bsr		putCharToANSIScreen
0000009f	D4FFFFE0		bsr		putCharToUART
000000a0	42800032		lix		r8,0x32			; 2
000000a1	D4000007		bsr		putCharToANSIScreen
000000a2	D4FFFFDD		bsr		putCharToUART
000000a3	4280004A		lix		r8,0x4A			; J
000000a4	D4000004		bsr		putCharToANSIScreen
000000a5	D4FFFFDA		bsr		putCharToUART
000000a6	A1804000		pull	r8
000000a7	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
000000a8	A0409000		push	r9
000000a9	A0405000		push	PAR
000000aa	A040A000		push	r10
000000ab	42A00002		lix		r10,0x2		; TxReady bit
000000ac	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
000000ad	84905000		lpl		r9			; Read Status into r9
000000ae	2599A000		and 	r9,r9,r10
000000af	C3FFFFFE		bez 	waitScreenTxStat
000000b0	42500001		lix 	PAR,0x1
000000b1	85508000		spl		r8			; echo the character
000000b2	A1A04000		pull	r10
000000b3	A1504000		pull	PAR
000000b4	A1904000		pull	r9
000000b5	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
000000b6	A0408000		push	r8
000000b7	42800000		lix		r8,0			; first note is 0
000000b8	D4000007		bsr 	setNote
000000b9	D400000D		bsr		enableBuzzer
000000ba	428000FA		lix		r8,250			; count for 1 Sec
000000bb	D4000023		bsr		delay_mS		; call delay_ms
000000bc	D4000016		bsr		disableBuzzer
000000bd	A1804000		pull	r8
000000be	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
000000bf	A0408000		push	r8
000000c0	A0405000		push	PAR
000000c1	42504000		lix		PAR,0x4000
000000c2	85508000		spl		r8
000000c3	A1504000		pull	PAR
000000c4	A1804000		pull	r8
000000c5	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
000000c6	A0409000		push	r9
000000c7	A0408000		push	r8
000000c8	A0405000		push	PAR
000000c9	42900010		lix		r9,0x0010		; Buzzer Enable line
000000ca	42502800		lix		PAR,0x2800
000000cb	84805000		lpl		r8
000000cc	24889000		or		r8,r8,r9
000000cd	85508000		spl		r8
000000ce	A1504000		pull	PAR
000000cf	A1804000		pull	r8
000000d0	A1904000		pull	r9
000000d1	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
000000d2	A0409000		push	r9
000000d3	A0408000		push	r8
000000d4	A0405000		push	PAR
000000d5	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
000000d6	42502800		lix		PAR,0x2800
000000d7	84805000		lpl		r8
000000d8	25889000		and		r8,r8,r9
000000d9	85508000		spl		r8
000000da	A1504000		pull	PAR
000000db	A1804000		pull	r8
000000dc	A1904000		pull	r9
000000dd	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
000000de	A0409000		push	r9
000000df	42503802		lix		PAR,0x3802		; address of the mSec counter
000000e0	84905000		lpl		r9				; read the peripheral counter into r9
000000e1	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000e2	84905000		lpl		r9				; check the elapsed time counter
000000e3	38389000		cmp		r8,r9
000000e4	CCFFFFFE		blt		loop_delay_mS
000000e5	A1904000		pull	r9
000000e6	A1704000		pull	PC

; wr7Seg8Dig
; passed r8 - value to send to the 7 seg display

wr7Seg8Dig:
000000e7	A0405000		push	PAR
000000e8	42503000		lix		PAR,0x3000		; Seven Segment LED lines
000000e9	85508000		spl		r8				; Write out LED bits
000000ea	A1504000		pull	PAR
000000eb	A1704000		pull	PC
