hello:	.string "R32V2020> "
screenPtr:	.long 0x0
currCharLocPtr:	.long 0x0

;
; Read UART character and put it to the XVGA Display
;

main:
00000000	42800000		lix		r8,0x0			; set screen position to home
00000001	D400007C		bsr		setCharPos
00000002	D4000044		bsr		clearScreen
readDataMemory:
00000003	42800000		lix		r8,hello.lower
00000004	D4000023		bsr		printString
readUartStatus:
00000005	D400000B		bsr		waitGetCharFromUART
putCharToScreenAndUART:
00000006	D400004C		bsr		putCharToScreen	; put the character to the screen
00000007	4290000D		lix		r9,0x0d
00000008	30389000		cmp		r8,r9
00000009	D2000005		bne		putOutChar
0000000a	A0408000		push	r8
0000000b	4280000A		lix		r8,0x0a
0000000c	D400000D		bsr		putCharToUART
0000000d	A1804000		pull	r8
putOutChar:
0000000e	D400000B		bsr		putCharToUART
0000000f	C0FFFFF6		bra		readUartStatus

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
00000010	A0405000		push	PAR
00000011	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
00000012	84805000		lpl		r8			; Read Status into r8
00000013	23881000		and 	r8,r8,ONE
00000014	C3FFFFFE		bez 	waitUartRxStat
00000015	42501801		lix 	PAR,0x1801
00000016	84805000		lpl		r8
00000017	A1504000		pull	PAR
00000018	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
00000019	A0409000		push	r9
0000001a	A0405000		push	PAR
0000001b	A040A000		push	r10
0000001c	42A00002		lix		r10,0x2
0000001d	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
0000001e	84905000		lpl		r9			; Read Status into r9
0000001f	2399A000		and 	r9,r9,r10
00000020	C3FFFFFE		bez 	waitUartTxStat
00000021	42501801		lix 	PAR,0x1801
00000022	85508000		spl		r8			; echo the character
00000023	A1A04000		pull	r10
00000024	A1504000		pull	PAR
00000025	A1904000		pull	r9
00000026	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string
; strings are null terminated
; strings are bytes packed into long words
;

printString:
00000027	A0408000		push	r8				; save r8
00000028	A0409000		push	r9				; save r9
00000029	A0406000		push	DAR
0000002a	20680000		add		DAR,r8,ZERO		; set the start of the string
nextLong:
0000002b	64806000		ldl		r8				; get the string
0000002c	31808000		ens		r8,r8			; swap the endian
0000002d	429000FF		lix		r9,0xff			; mask for null termination check
0000002e	23998000		and		r9,r9,r8
0000002f	C3000013		bez		donePrStr
00000030	D4000022		bsr		putCharToScreen	; write out the character
00000031	28808000		sr8		r8,r8
00000032	429000FF		lix		r9,0xff			; mask for null termination check
00000033	23998000		and		r9,r9,r8
00000034	C300000E		bez		donePrStr
00000035	D400001D		bsr		putCharToScreen	; write out the character
00000036	28808000		sr8		r8,r8
00000037	429000FF		lix		r9,0xff			; mask for null termination check
00000038	23998000		and		r9,r9,r8
00000039	C3000009		bez		donePrStr
0000003a	D4000018		bsr		putCharToScreen	; write out the character
0000003b	28808000		sr8		r8,r8
0000003c	429000FF		lix		r9,0xff			; mask for null termination check
0000003d	23998000		and		r9,r9,r8
0000003e	C3000004		bez		donePrStr
0000003f	D4000013		bsr		putCharToScreen	; write out the character
lastOfLong:
00000040	20661000		add		DAR,DAR,ONE
00000041	C0FFFFEA		bra		nextLong
donePrStr:
00000042	A1604000		pull	DAR				; restore DAR
00000043	A1904000		pull	r9				; restore r9
00000044	A1804000		pull	r8				; restore r8
00000045	A1704000		pull	PC				; rts
	
;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
; Sets the pointer to the screen to the first location
;

clearScreen:
00000046	A0409000		push	r9				; save r9
00000047	A0408000		push	r8				; save r8
00000048	42800020		lix		r8,0x0020		; fill with spaces
00000049	429007FE		lix 	r9,0x7FE		; loopCount	(1K minus 1)
looper:
0000004a	D4000008		bsr		putCharToScreen
0000004b	20992000		add 	r9,r9,MINUS1	; decrement character counter
0000004c	D2FFFFFE		bne		looper			; loop until complete
0000004d	42800000		lix		r8,0x0			; Move cursor to home position
0000004e	D400002F		bsr		setCharPos
0000004f	A1804000		pull	r8
00000050	A1904000		pull	r9
00000051	A1704000		pull	PC				; rts

;
; putCharToScreen - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToScreen:
00000052	A040B000		push	r11					; save r11
00000053	A040A000		push	r10					; save r10
00000054	A0409000		push	r9					; save r9
00000055	A0406000		push	DAR
00000056	A0405000		push	PAR
00000057	42900003		lix		r9,screenPtr.lower	; r9 is the ptr to screenPtr
00000058	20690000		add		DAR,r9,ZERO			; DAR points to screenPtr
00000059	64A06000		ldl		r10					; r10 has screenPtr value
; look for specific characters
0000005a	42B0007F		lix		r11,0x7F			; RUBOUT key
0000005b	3038B000		cmp		r8,r11
0000005c	D100000C		beq		gotBS
0000005d	42B000E0		lix		r11,0xe0			; 0x0-0x1f are ctrl chars
0000005e	23BB8000		and		r11,r11,r8
0000005f	C7000014		bnz		notCtlChar
; Check for CR	
00000060	42B0000D		lix		r11,0x0d			; CR
00000061	3038B000		cmp		r8,r11
00000062	D100000B		beq		gotCR
; Check for BELL
00000063	42B00007		lix		r11,0x07			; BELL
00000064	3038B000		cmp		r8,r11
00000065	D2000011		bne		skipPrintChar
00000066	D4000025		bsr		makeBuzz
; Goes here
00000067	C000000F		bra		skipPrintChar
gotBS:
00000068	20AA2000		add		r10,r10,MINUS1
00000069	205A0000		add		PAR,r10,ZERO
0000006a	42800020		lix		r8,0x20
0000006b	81508000		spb		r8
0000006c	C000000A		bra		skipPrintChar
gotCR:
0000006d	42B0FFC0		lix		r11,0xffc0			; Go to the start of the line
0000006e	23AAB000		and		r10,r10,r11
0000006f	42B00040		lix		r11,0x40			; Go down a line
00000070	20AAB000		add		r10,r10,r11
00000071	205A1000		add		PAR,r10,ONE			; Set PAR to screenPtr
00000072	C0000004		bra		skipPrintChar
notCtlChar:
00000073	205A0000		add		PAR,r10,ZERO		; Set PAR to screenPtr
00000074	81508000		spb		r8					; write character to screen
00000075	20AA1000		add		r10,r10,ONE			; increment screen pointer
skipPrintChar:
00000076	6560A000		sdl		r10					; save new pointer
00000077	A1504000		pull 	PAR					; restore PAR
00000078	A1604000		pull 	DAR					; restore DAR
00000079	A1904000		pull 	r9					; restore r9
0000007a	A1A04000		pull 	r10					; restore r10
0000007b	A1B04000		pull 	r11					; restore r11
0000007c	A1704000		pull	PC					; rts

;
; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; currCharLocPtr has the base address of the screen memory
; screenPtr contains the address of the current char position
;

setCharPos:
0000007d	A0409000		push	r9						; save r9
0000007e	A040A000		push	r10						; save r10
0000007f	A0406000		push	DAR						; save DAR
00000080	42A00004		lix		r10,currCharLocPtr.lower
00000081	206A0000		add		DAR,r10,ZERO			; DAR points to the currCharLocPtr
00000082	64A06000		ldl		r10						; r10 has the screen base address
00000083	20A80000		add		r10,r8,ZERO				; add passed position to base
00000084	42900003		lix		r9,screenPtr.lower		; r9 is the ptr to screenPtr
00000085	20690000		add		DAR,r9,ZERO				; DAR points to screenPtr
00000086	6560A000		sdl		r10						; store new screen address
00000087	A1604000		pull	DAR						; restore DAR
00000088	A1A04000		pull	r10						; restore r10
00000089	A1904000		pull	r9						; restore r9
0000008a	A1704000		pull	PC						; rts

makeBuzz:
0000008b	A0408000		push	r8
0000008c	42800000		lix		r8,0			; first note is 0
0000008d	D4000007		bsr 	setNote
0000008e	D400000D		bsr		enableBuzzer
0000008f	428000FA		lix		r8,250			; count for 1 Sec
00000090	D4000023		bsr		delay_mS		; call delay_ms
00000091	D4000016		bsr		disableBuzzer
00000092	A1804000		pull	r8
00000093	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
00000094	A0408000		push	r8
00000095	A0405000		push	PAR
00000096	42504000		lix		PAR,0x4000
00000097	85508000		spl		r8
00000098	A1504000		pull	PAR
00000099	A1804000		pull	r8
0000009a	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
0000009b	A0409000		push	r9
0000009c	A0408000		push	r8
0000009d	A0405000		push	PAR
0000009e	42900010		lix		r9,0x0010		; Buzzer Enable line
0000009f	42502800		lix		PAR,0x2800
000000a0	84805000		lpl		r8
000000a1	22889000		or		r8,r8,r9
000000a2	85508000		spl		r8
000000a3	A1504000		pull	PAR
000000a4	A1804000		pull	r8
000000a5	A1904000		pull	r9
000000a6	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
000000a7	A0409000		push	r9
000000a8	A0408000		push	r8
000000a9	A0405000		push	PAR
000000aa	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
000000ab	42502800		lix		PAR,0x2800
000000ac	84805000		lpl		r8
000000ad	23889000		and		r8,r8,r9
000000ae	85508000		spl		r8
000000af	A1504000		pull	PAR
000000b0	A1804000		pull	r8
000000b1	A1904000		pull	r9
000000b2	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Uses routine uses r9

delay_mS:
000000b3	A0409000		push	r9
000000b4	42503802		lix		PAR,0x3802		; address of the mSec counter
000000b5	84905000		lpl		r9				; read the peripheral counter into r9
000000b6	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000b7	84905000		lpl		r9				; check the elapsed time counter
000000b8	30389000		cmp		r8,r9
000000b9	CCFFFFFE		blt		loop_delay_mS
000000ba	A1904000		pull	r9
000000bb	A1704000		pull	PC
