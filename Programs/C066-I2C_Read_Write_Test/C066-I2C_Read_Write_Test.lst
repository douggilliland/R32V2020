; Read the jumpers and use jumper value for a delay
; Write bouncing LED pattern
;
; Uses I2CIO-8 card
;	http://land-boards.com/blwiki/index.php?title=I2CIO-8
;	Card has an MCP23008 I/O Expander IC
;	d0-d3 = LEDs
;	d4-d7 = Headers
; 

prompt:			.string "R32V2020> "
; Not using the following data values but included for future use
i2c_addr_wr:	.byte 0x40
i2c_addr_rd:	.byte 0x41
i2c_reg_addr:	.byte 0x00
i2c_wr_val:		.byte 0x00

;
; main
; Read I2C and write it back out
;

main:
00000000	D4000099		bsr		clearScreen			; Not required for this example
00000001	42800000		lix		r8,prompt.lower		; r8 contains the pointer to the the prompt 
00000002	D400008B		bsr		printString			; Print the prompt to the screen
; Code to initialize I2CIO8 card
00000003	D4000015		bsr		init_Regs_I2CIO8	; initialize the MCP23008 on the I2CIO8
restartLoop:
00000004	42800008		lix		r8,0x08
loopMain:
00000005	D400002E		bsr		wrI2CAdrDat_MCP23008	; write to LEDs
00000006	D4000005		bsr		delayFromJumpers
00000007	32808000		sr1		r8,r8					; shift LED bit right by 1
00000008	38380000		cmp		r8,r0
00000009	D2FFFFFC		bne		loopMain
0000000a	C0FFFFFA		bra		restartLoop				; restart the shifting
	
;
; delayFromJumpers - Set delay based on header value
; returns: nothing (restores registers at return)
;

delayFromJumpers:
0000000b	A0409000		push	r9
0000000c	A0408000		push	r8
0000000d	D4000034	 	bsr		readI2CDat_MCP23008		; read headers into r8
0000000e	26882000		xor		r8,r8,MINUS1			; invert headers
0000000f	429000F0		lix		r9,0xF0
00000010	25889000		and		r8,r8,r9				; keep 8 bits
00000011	30808000		sl1		r8,r8
00000012	30808000		sl1		r8,r8
00000013	30808000		sl1		r8,r8
00000014	D40000C6		bsr		delay_mS
00000015	A1804000		pull	r8
00000016	A1904000		pull	r9
00000017	A1704000		pull	PC

;
; init_Regs_I2CIO8 - Set IO Dir
;

init_Regs_I2CIO8:
00000018	A0408000		push	r8
	; Write 0x22 to IOCON register (not sequential operations)
00000019	42800001		lix		r8,0x01		; I2C_Ctrl = START
0000001a	D400004A		bsr		write_I2C_Ctrl_Reg
0000001b	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
0000001c	D4000039		bsr		write_I2C_Data_Address_Reg
0000001d	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
0000001e	D4000046		bsr		write_I2C_Ctrl_Reg
0000001f	42800005		lix		r8,0x05		; MCP23008 IOCON
00000020	D4000035		bsr		write_I2C_Data_Address_Reg
00000021	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
00000022	D4000042		bsr		write_I2C_Ctrl_Reg	
00000023	42800022		lix		r8,0x22		; SEQOP = Disabled, INTPOL = Active-high
00000024	D4000031		bsr		write_I2C_Data_Address_Reg
	; Write 0xF0 to Direction Control register
00000025	42800001		lix		r8,0x01		; I2C_Ctrl = START
00000026	D400003E		bsr		write_I2C_Ctrl_Reg
00000027	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
00000028	D400002D		bsr		write_I2C_Data_Address_Reg
00000029	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
0000002a	D400003A		bsr		write_I2C_Ctrl_Reg
0000002b	42800000		lix		r8,0x00		; MCP23008 IODIR
0000002c	D4000029		bsr		write_I2C_Data_Address_Reg
0000002d	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
0000002e	D4000036		bsr		write_I2C_Ctrl_Reg
0000002f	428000F0		lix		r8,0xF0		; Input and output bits
00000030	D4000025		bsr		write_I2C_Data_Address_Reg
00000031	A1804000		pull	r8
00000032	A1704000		pull	PC

;
; wrI2CAdrDat_MCP23008 - Write address to the I2C bus
; Address 0x5800 -> DATA (write/read) or SLAVE ADDRESS (write)  
; Address 0x5801 -> Command/Status Register (write/read)
; r8 is the value to write
;

wrI2CAdrDat_MCP23008:
00000033	A0408000		push	r8
00000034	42800001		lix		r8,0x01		; I2C_Ctrl = START
00000035	D400002F		bsr		write_I2C_Ctrl_Reg
00000036	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
00000037	D400001E		bsr		write_I2C_Data_Address_Reg
00000038	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
00000039	D400002B		bsr		write_I2C_Ctrl_Reg	
0000003a	4280000A		lix		r8,0x0A		; MCP23008 OLAT
0000003b	D400001A		bsr		write_I2C_Data_Address_Reg
0000003c	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
0000003d	D4000027		bsr		write_I2C_Ctrl_Reg	
0000003e	A1804000		pull	r8			; Data to write is in r8
0000003f	D4000016		bsr		write_I2C_Data_Address_Reg
00000040	A1704000		pull	PC
	
;
; readI2CDat_MCP23008 - Read data from the I2C bus
; Address 0x5800 -> DATA (write/read) or SLAVE ADDRESS (write)  
; Address 0x5801 -> Command/Status Register (write/read)
; r8 is the value to write
;

readI2CDat_MCP23008:
	; write the GPIO address register
00000041	42800001		lix		r8,0x01		; I2C_Ctrl = START
00000042	D4000022		bsr		write_I2C_Ctrl_Reg
00000043	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
00000044	D4000011		bsr		write_I2C_Data_Address_Reg
00000045	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
00000046	D400001E		bsr		write_I2C_Ctrl_Reg	
00000047	42800009		lix		r8,0x09		; MCP23008 - GPIO register address
00000048	D400000D		bsr		write_I2C_Data_Address_Reg
	; Read the GPIO line value
00000049	42800001		lix		r8,0x01		; I2C_Ctrl = START
0000004a	D400001A		bsr		write_I2C_Ctrl_Reg
0000004b	42800041		lix		r8,0x41		; I2C read command at slave address = 0x20
0000004c	D4000009		bsr		write_I2C_Data_Address_Reg
0000004d	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
0000004e	D4000016		bsr		write_I2C_Ctrl_Reg	
0000004f	D400000C		bsr		read_I2C_Data_Reg
00000050	A0408000		push	r8
00000051	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
00000052	D4000012		bsr		write_I2C_Ctrl_Reg	
00000053	A1804000		pull	r8
00000054	A1704000		pull	PC
	
;
; write_I2C_Data_Address_Reg
;

write_I2C_Data_Address_Reg:
00000055	A0405000		push	PAR
00000056	42505800		lix		PAR,0x5800	; I2C Address/register
00000057	85508000		spl		r8			; Write control register
00000058	D4000011		bsr		i2c_ack
00000059	A1504000		pull	PAR
0000005a	A1704000		pull	PC

;
; read_I2C_Data_Reg - Read I2C data into r8
;

read_I2C_Data_Reg:
0000005b	A0405000		push	PAR
0000005c	42505800		lix		PAR,0x5800	; I2C Data Address
0000005d	42800054		lix		r8,0x54
0000005e	85508000		spl		r8
0000005f	D400000A		bsr		i2c_ack
00000060	42505800		lix		PAR,0x5800	; I2C Data Address
00000061	84805000		lpl		r8
00000062	A1504000		pull	PAR
00000063	A1704000		pull	PC
	
;
; write_I2C_Ctrl_Reg
; Command Register (write):
;	bit 7-2	= Reserved
;	bit 1-0	= 
;		00: IDLE
;		01: START
;		10: nSTART
;		11: STOP
;

write_I2C_Ctrl_Reg:
00000064	A0405000		push	PAR
00000065	42505801		lix		PAR,0x5801	; I2C Control register
00000066	85508000		spl		r8			; Write control register
00000067	A1504000		pull	PAR
00000068	A1704000		pull	PC

;
; i2c_ack - wait for transfer to complete
; Status Register (read):
;	bit 7-2	= Reserved
;	bit 1 	= ERROR 	(I2C transaction error)
;	bit 0 	= BUSY 	(I2C bus busy)
;

i2c_ack:
00000069	A0405000		push	PAR
0000006a	A0408000		push	r8
0000006b	42505801		lix		PAR,0x5801	; Control register
i2c_ack_loop:
0000006c	84805000		lpl		r8
0000006d	25881000		and		r8,r8,r1	; busy bit is least significant bit
0000006e	C4FFFFFE		be1		i2c_ack_loop
0000006f	A1804000		pull	r8
00000070	A1504000		pull	PAR
00000071	A1704000		pull	PC

;
; readUartStatus
;
	
readUartStatus:
00000072	D4000004		bsr		waitGetCharFromUART
putCharToANSIScreenAndUART:
00000073	D4000031		bsr		putCharToANSIScreen	; put the character to the screen
00000074	D400000B		bsr		putCharToUART
00000075	C0FFFFFD		bra		readUartStatus

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
00000076	A0405000		push	PAR
00000077	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
00000078	84805000		lpl		r8			; Read Status into r8
00000079	25881000		and 	r8,r8,ONE
0000007a	C3FFFFFE		bez 	waitUartRxStat
0000007b	42501801		lix 	PAR,0x1801
0000007c	84805000		lpl		r8
0000007d	A1504000		pull	PAR
0000007e	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
0000007f	A0409000		push	r9
00000080	A0405000		push	PAR
00000081	A040A000		push	r10
00000082	42A00002		lix		r10,0x2
00000083	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
00000084	84905000		lpl		r9			; Read Status into r9
00000085	2599A000		and 	r9,r9,r10
00000086	C3FFFFFE		bez 	waitUartTxStat
00000087	42501801		lix 	PAR,0x1801
00000088	85508000		spl		r8			; echo the character
00000089	A1A04000		pull	r10
0000008a	A1504000		pull	PAR
0000008b	A1904000		pull	r9
0000008c	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
0000008d	A0408000		push	r8				; save r8
0000008e	A0406000		push	DAR
0000008f	20680000		add		DAR,r8,ZERO		; set the start of the string
nextChar:
00000090	60806000		ldb		r8				; get the character
00000091	38380000		cmp		r8,ZERO			; Null terminated string
00000092	D1000004		beq		donePrStr		; done if null
00000093	D4000011		bsr		putCharToANSIScreen	; write out the character
00000094	20661000		add		DAR,DAR,r1		; Point to next character
00000095	C0FFFFFB		bra		nextChar
donePrStr:
00000096	A1604000		pull	DAR				; restore DAR
00000097	A1804000		pull	r8				; restore r8
00000098	A1704000		pull	PC				; rts

;
; clearScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen:
00000099	A0408000		push	r8				; save r8
0000009a	4280001B		lix		r8,0x1b			; ESC
0000009b	D4000009		bsr		putCharToANSIScreen
0000009c	4280005B		lix		r8,0x5b			; [
0000009d	D4000007		bsr		putCharToANSIScreen
0000009e	42800032		lix		r8,0x32			; 2
0000009f	D4000005		bsr		putCharToANSIScreen
000000a0	4280004A		lix		r8,0x4A			; J
000000a1	D4000003		bsr		putCharToANSIScreen
000000a2	A1804000		pull	r8
000000a3	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToANSIScreen:
000000a4	A0409000		push	r9
000000a5	A040A000		push	r10
000000a6	A0405000		push	PAR
000000a7	42A00002		lix		r10,0x2		; TxReady bit
000000a8	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
000000a9	84905000		lpl		r9			; Read Status into r9
000000aa	2599A000		and 	r9,r9,r10
000000ab	C3FFFFFE		bez 	waitScreenTxStat
000000ac	42500001		lix 	PAR,0x1
000000ad	85508000		spl		r8			; echo the character
000000ae	A1504000		pull	PAR
000000af	A1A04000		pull	r10
000000b0	A1904000		pull	r9
000000b1	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
000000b2	A0408000		push	r8
000000b3	42800000		lix		r8,0			; first note is 0
000000b4	D4000007		bsr 	setNote
000000b5	D400000D		bsr		enableBuzzer
000000b6	428000FA		lix		r8,250			; count for 1 Sec
000000b7	D4000023		bsr		delay_mS		; call delay_ms
000000b8	D4000016		bsr		disableBuzzer
000000b9	A1804000		pull	r8
000000ba	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
000000bb	A0408000		push	r8
000000bc	A0405000		push	PAR
000000bd	42504000		lix		PAR,0x4000
000000be	85508000		spl		r8
000000bf	A1504000		pull	PAR
000000c0	A1804000		pull	r8
000000c1	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
000000c2	A0409000		push	r9
000000c3	A0408000		push	r8
000000c4	A0405000		push	PAR
000000c5	42900010		lix		r9,0x0010		; Buzzer Enable line
000000c6	42502800		lix		PAR,0x2800
000000c7	84805000		lpl		r8
000000c8	24889000		or		r8,r8,r9
000000c9	85508000		spl		r8
000000ca	A1504000		pull	PAR
000000cb	A1804000		pull	r8
000000cc	A1904000		pull	r9
000000cd	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
000000ce	A0409000		push	r9
000000cf	A0408000		push	r8
000000d0	A0405000		push	PAR
000000d1	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
000000d2	42502800		lix		PAR,0x2800
000000d3	84805000		lpl		r8
000000d4	25889000		and		r8,r8,r9
000000d5	85508000		spl		r8
000000d6	A1504000		pull	PAR
000000d7	A1804000		pull	r8
000000d8	A1904000		pull	r9
000000d9	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
000000da	A0409000		push	r9
000000db	A0405000		push	PAR
000000dc	42503802		lix		PAR,0x3802		; address of the mSec counter
000000dd	84905000		lpl		r9				; read the peripheral counter into r9
000000de	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000df	84905000		lpl		r9				; check the elapsed time counter
000000e0	38389000		cmp		r8,r9
000000e1	CCFFFFFE		blt		loop_delay_mS
000000e2	A1504000		pull	PAR
000000e3	A1904000		pull	r9
000000e4	A1704000		pull	PC

;	
; delay_uS - delay for the number of uSecs
; pass mSec delay in r8
; Uses routine uses r9 (saved and restored)
;

delay_uS:
000000e5	A0409000		push	r9
000000e6	A0405000		push	PAR
000000e7	42503801		lix		PAR,0x3801		; address of the uSec counter
000000e8	84905000		lpl		r9				; read the peripheral counter into r9
000000e9	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_uS:
000000ea	84905000		lpl		r9				; check the elapsed time counter
000000eb	38389000		cmp		r8,r9
000000ec	CCFFFFFE		blt		loop_delay_uS
000000ed	A1504000		pull	PAR
000000ee	A1904000		pull	r9
000000ef	A1704000		pull	PC
