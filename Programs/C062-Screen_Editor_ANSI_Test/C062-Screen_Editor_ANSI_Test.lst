prompt:			.string "R32V2020> "
screenPtr:		.long 0x0
currCharLocPtr:	.long 0x0

;
; Read UART character and put it to the ANSI VGA Display
;

main:
00000000	D400002A		bsr		clearScreen
00000001	42800000		lix		r8,prompt.lower
00000002	D400001C		bsr		printString
readUartStatus:
00000003	D4000004		bsr		waitGetCharFromUART
putCharToANSIScreenAndUART:
00000004	D4000031		bsr		putCharToANSIScreen	; put the character to the screen
00000005	D400000B		bsr		putCharToUART
00000006	C0FFFFFD		bra		readUartStatus

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
00000007	A0405000		push	PAR
00000008	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
00000009	84805000		lpl		r8			; Read Status into r8
0000000a	25881000		and 	r8,r8,ONE
0000000b	C3FFFFFE		bez 	waitUartRxStat
0000000c	42501801		lix 	PAR,0x1801
0000000d	84805000		lpl		r8
0000000e	A1504000		pull	PAR
0000000f	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
00000010	A0409000		push	r9
00000011	A0405000		push	PAR
00000012	A040A000		push	r10
00000013	42A00002		lix		r10,0x2
00000014	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
00000015	84905000		lpl		r9			; Read Status into r9
00000016	2599A000		and 	r9,r9,r10
00000017	C3FFFFFE		bez 	waitUartTxStat
00000018	42501801		lix 	PAR,0x1801
00000019	85508000		spl		r8			; echo the character
0000001a	A1A04000		pull	r10
0000001b	A1504000		pull	PAR
0000001c	A1904000		pull	r9
0000001d	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
0000001e	A0408000		push	r8				; save r8
0000001f	A0406000		push	DAR
00000020	20680000		add		DAR,r8,ZERO		; set the start of the string
nextChar:
00000021	60806000		ldb		r8				; get the character
00000022	38380000		cmp		r8,ZERO			; Null terminated string
00000023	D1000004		beq		donePrStr		; done if null
00000024	D4000011		bsr		putCharToANSIScreen	; write out the character
00000025	20661000		add		DAR,DAR,r1		; Point to next character
00000026	C0FFFFFB		bra		nextChar
donePrStr:
00000027	A1604000		pull	DAR				; restore DAR
00000028	A1804000		pull	r8				; restore r8
00000029	A1704000		pull	PC				; rts

;
; clearScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen:
0000002a	A0408000		push	r8				; save r8
0000002b	4280001B		lix		r8,0x1b			; ESC
0000002c	D4000009		bsr		putCharToANSIScreen
0000002d	4280005B		lix		r8,0x5b			; [
0000002e	D4000007		bsr		putCharToANSIScreen
0000002f	42800032		lix		r8,0x32			; 2
00000030	D4000005		bsr		putCharToANSIScreen
00000031	4280004A		lix		r8,0x4A			; J
00000032	D4000003		bsr		putCharToANSIScreen
00000033	A1804000		pull	r8
00000034	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToANSIScreen:
00000035	A0409000		push	r9
00000036	A0405000		push	PAR
00000037	A040A000		push	r10
00000038	42A00002		lix		r10,0x2		; TxReady bit
00000039	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
0000003a	84905000		lpl		r9			; Read Status into r9
0000003b	2599A000		and 	r9,r9,r10
0000003c	C3FFFFFE		bez 	waitScreenTxStat
0000003d	42500001		lix 	PAR,0x1
0000003e	85508000		spl		r8			; echo the character
0000003f	A1A04000		pull	r10
00000040	A1504000		pull	PAR
00000041	A1904000		pull	r9
00000042	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
00000043	A0408000		push	r8
00000044	42800000		lix		r8,0			; first note is 0
00000045	D4000007		bsr 	setNote
00000046	D400000D		bsr		enableBuzzer
00000047	428000FA		lix		r8,250			; count for 1 Sec
00000048	D4000023		bsr		delay_mS		; call delay_ms
00000049	D4000016		bsr		disableBuzzer
0000004a	A1804000		pull	r8
0000004b	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
0000004c	A0408000		push	r8
0000004d	A0405000		push	PAR
0000004e	42504000		lix		PAR,0x4000
0000004f	85508000		spl		r8
00000050	A1504000		pull	PAR
00000051	A1804000		pull	r8
00000052	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
00000053	A0409000		push	r9
00000054	A0408000		push	r8
00000055	A0405000		push	PAR
00000056	42900010		lix		r9,0x0010		; Buzzer Enable line
00000057	42502800		lix		PAR,0x2800
00000058	84805000		lpl		r8
00000059	24889000		or		r8,r8,r9
0000005a	85508000		spl		r8
0000005b	A1504000		pull	PAR
0000005c	A1804000		pull	r8
0000005d	A1904000		pull	r9
0000005e	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
0000005f	A0409000		push	r9
00000060	A0408000		push	r8
00000061	A0405000		push	PAR
00000062	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
00000063	42502800		lix		PAR,0x2800
00000064	84805000		lpl		r8
00000065	25889000		and		r8,r8,r9
00000066	85508000		spl		r8
00000067	A1504000		pull	PAR
00000068	A1804000		pull	r8
00000069	A1904000		pull	r9
0000006a	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
0000006b	A0409000		push	r9
0000006c	42503802		lix		PAR,0x3802		; address of the mSec counter
0000006d	84905000		lpl		r9				; read the peripheral counter into r9
0000006e	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
0000006f	84905000		lpl		r9				; check the elapsed time counter
00000070	38389000		cmp		r8,r9
00000071	CCFFFFFE		blt		loop_delay_mS
00000072	A1904000		pull	r9
00000073	A1704000		pull	PC
