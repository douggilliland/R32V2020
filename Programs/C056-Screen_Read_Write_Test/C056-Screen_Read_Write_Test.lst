hello:	.string "R32V2020> "
screenPtr:	.long 0x0000
screenBase:	.long 0x0

;
; Read UART character and put it to the SVGA Display
;

main:
00000000	D4000031		bsr	clearScreen
00000001	42800080		lix	r8,128			; Move cursor to 4th row position
00000002	D400004B		bsr	setCharPos
readDataMemory:
00000003	42800000		lix	r8,hello.lower
00000004	D4000021		bsr	printString
;readUartStatus:
;	bsr	getUARTChar
;putCharToScreen:
;	bsr	putChar		; put the character to the screen
00000005	42500080		lix	PAR,128
00000006	84805000		lpl	r8
00000007	D4000010		bsr	putUARTChar
00000008	42500081		lix	PAR,129
00000009	84805000		lpl	r8
0000000a	D400000D		bsr	putUARTChar
loopPosition:
0000000b	C0000000		bra	loopPosition

;
; getUARTChar
; returns character received in r8
;

getUARTChar:
0000000c	A0409000		push	r9
0000000d	A0405000		push	PAR
0000000e	42501800		lix	PAR,0x1800	; UART Status
waitUartRxStat:
0000000f	84905000		lpl	r9			; Read Status into r9
00000010	25991000		and r9,r9,ONE
00000011	C3FFFFFE		bez waitUartRxStat
getCharFromUart:
00000012	42501801		lix PAR,0x1801
00000013	84805000		lpl	r8
00000014	A1504000		pull	PAR
00000015	A1904000		pull	r9
00000016	A1704000		pull	PC

;
; putUARTChar - Put a character to the UART
; passed character in r8 is sent out the UART
;

putUARTChar:
00000017	A0409000		push	r9
00000018	A0405000		push	PAR
00000019	A040A000		push	r10
0000001a	42A00002		lix	r10,0x2
0000001b	42501800		lix	PAR,0x1800	; UART Status
waitUartTxStat:
0000001c	84905000		lpl	r9			; Read Status into r9
0000001d	2599A000		and r9,r9,r10
0000001e	C3FFFFFE		bez waitUartTxStat
0000001f	42501801		lix PAR,0x1801
00000020	85508000		spl	r8			; echo the character
00000021	A1A04000		pull	r10
00000022	A1504000		pull	PAR
00000023	A1904000		pull	r9
00000024	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
00000025	A0408000		push	r8				; save r8
00000026	A0406000		push	DAR
00000027	20680000		add		DAR,r8,ZERO		; set the start of the string
nextChar:
00000028	60806000		ldb		r8				; get the character
00000029	38380000		cmp		r8,ZERO			; Null terminated string
0000002a	D1000004		beq		donePrStr		; done if null
0000002b	D4000030		bsr		putCharToANSIScreen	; write out the character
0000002c	20661000		add		DAR,DAR,r1		; Point to next character
0000002d	C0FFFFFB		bra		nextChar
donePrStr:
0000002e	A1604000		pull	DAR				; restore DAR
0000002f	A1804000		pull	r8				; restore r8
00000030	A1704000		pull	PC				; rts

;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
;

clearScreen:
00000031	A0409000		push	r9				; save r9
00000032	A0408000		push	r8				; save r8
00000033	42800000		lix	r8,0x0			; set screen position to home
00000034	D4000019		bsr	setCharPos
00000035	42800020		lix	r8,0x0020		; fill with spaces
00000036	429007FE		lix r9,0x7FE		; loopCount	(1K minus 1)
looper:
00000037	D4000006		bsr	putChar
00000038	20992000		add r9,r9,MINUS1	; decrement character counter
00000039	D2FFFFFE		bne	looper			; loop until complete
0000003a	A1804000		pull	r8
0000003b	A1904000		pull	r9
0000003c	A1704000		pull	PC				; rts

;
; putChar - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putChar:
0000003d	A040A000		push	r10					; save r10
0000003e	A0409000		push	r9					; save r9
0000003f	A0406000		push	DAR
00000040	A0405000		push	PAR
00000041	4290000C		lix	r9,screenPtr.lower	; r9 is the ptr to screenPtr
00000042	20690000		add	DAR,r9,ZERO			; DAR points to screenPtr
00000043	64A06000		ldl	r10					; r10 has screenPtr value
00000044	205A0000		add	PAR,r10,ZERO		; Set PAR to screenPtr
00000045	81508000		spb	r8					; write character to screen
00000046	20AA1000		add	r10,r10,ONE			; increment screen pointer
00000047	6560A000		sdl	r10					; save new pointer
00000048	A1504000		pull PAR					; restore PAR
00000049	A1604000		pull DAR					; restore DAR
0000004a	A1904000		pull r9					; restore r9
0000004b	A1A04000		pull r10					; restore r10
0000004c	A1704000		pull	PC					; rts

;
; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; screenBase has the base address of the screen memory
; screenPtr contains the address of the current char position
;

setCharPos:
0000004d	A0409000		push	r9						; save r9
0000004e	A040A000		push	r10						; save r10
0000004f	A0406000		push	DAR						; save DAR
00000050	42A00010		lix	r10,screenBase.lower
00000051	206A0000		add	DAR,r10,ZERO			; DAR points to the screenBase
00000052	64A06000		ldl	r10						; r10 has the screen base address
00000053	20A80000		add	r10,r8,ZERO				; add passed position to base
00000054	4290000C		lix	r9,screenPtr.lower		; r9 is the ptr to screenPtr
00000055	20690000		add	DAR,r9,ZERO				; DAR points to screenPtr
00000056	6560A000		sdl	r10						; store new screen address
00000057	A1604000		pull DAR						; restore DAR
00000058	A1A04000		pull r10						; restore r10
00000059	A1904000		pull r9						; restore r9
0000005a	A1704000		pull	PC						; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
0000005b	A0409000		push	r9
0000005c	A0405000		push	PAR
0000005d	A040A000		push	r10
0000005e	42A00002		lix		r10,0x2		; TxReady bit
0000005f	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
00000060	84905000		lpl		r9			; Read Status into r9
00000061	2599A000		and 	r9,r9,r10
00000062	C3FFFFFE		bez 	waitScreenTxStat
00000063	42500001		lix 	PAR,0x1
00000064	85508000		spl		r8			; echo the character
00000065	A1A04000		pull	r10
00000066	A1504000		pull	PAR
00000067	A1904000		pull	r9
00000068	A1704000		pull	PC
