hello:	.string "R32V2020> "
screenPtr:	.long 0x0000
screenBase:	.long 0x0

;
; Read UART character and put it to the SVGA Display
;

main:
00000000	D400002F		bsr	clearScreen
00000001	42800000		lix	r8,0x0			; Move cursor to home position
00000002	D4000060		bsr	setCharPos
readDataMemory:
00000003	41800000		liu	r8,hello.upper
00000004	40800000		lil	r8,hello.lower
00000005	D400001E		bsr	printString
readUartStatus:
00000006	D4000004		bsr	getCharFromUART
putCharToScreenAndUART:
00000007	D4000034		bsr	putCharToScreen		; put the character to the screen
00000008	D400000D		bsr	putCharToUART
00000009	C0FFFFFD		bra	readUartStatus

;
; getCharFromUART
; returns character received in r8
;

getCharFromUART:
0000000a	A0409000		push	r9
0000000b	A0405000		push	PAR
0000000c	42501800		lix	PAR,0x1800	; UART Status
waitUartRxStat:
0000000d	84905000		lpl	r9			; Read Status into r9
0000000e	25991000		and r9,r9,ONE
0000000f	C3FFFFFE		bez waitUartRxStat
getCharFromUart:
00000010	42501801		lix PAR,0x1801
00000011	84805000		lpl	r8
00000012	A1504000		pull	PAR
00000013	A1904000		pull	r9
00000014	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
00000015	A0409000		push	r9
00000016	A0405000		push	PAR
00000017	A040A000		push	r10
00000018	42A00002		lix	r10,0x2
00000019	42501800		lix	PAR,0x1800	; UART Status
waitUartTxStat:
0000001a	84905000		lpl	r9			; Read Status into r9
0000001b	2599A000		and r9,r9,r10
0000001c	C3FFFFFE		bez waitUartTxStat
0000001d	42501801		lix PAR,0x1801
0000001e	85508000		spl	r8			; echo the character
0000001f	A1A04000		pull	r10
00000020	A1504000		pull	PAR
00000021	A1904000		pull	r9
00000022	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
00000023	A0408000		push	r8				; save r8
00000024	A0406000		push	DAR
00000025	20680000		add		DAR,r8,ZERO		; set the start of the string
nextChar:
00000026	60806000		ldb		r8				; get the character
00000027	38380000		cmp		r8,ZERO			; Null terminated string
00000028	D1000004		beq		donePrStr		; done if null
00000029	D4000047		bsr		putCharToANSIScreen	; write out the character
0000002a	20661000		add		DAR,DAR,r1		; Point to next character
0000002b	C0FFFFFB		bra		nextChar
donePrStr:
0000002c	A1604000		pull	DAR				; restore DAR
0000002d	A1804000		pull	r8				; restore r8
0000002e	A1704000		pull	PC				; rts

;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
;

clearScreen:
0000002f	A0409000		push	r9				; save r9
00000030	A0408000		push	r8				; save r8
00000031	42800000		lix	r8,0x0			; set screen position to home
00000032	D4000030		bsr	setCharPos
00000033	42800020		lix	r8,0x0020		; fill with spaces
00000034	429007FE		lix r9,0x7FE		; loopCount	(1K minus 1)
looper:
00000035	D4000006		bsr	putCharToScreen
00000036	20992000		add r9,r9,MINUS1	; decrement character counter
00000037	D2FFFFFE		bne	looper			; loop until complete
00000038	A1804000		pull	r8
00000039	A1904000		pull	r9
0000003a	A1704000		pull	PC				; rts

;
; putCharToScreen - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToScreen:
0000003b	A040B000		push	r11					; save r11
0000003c	A040A000		push	r10					; save r10
0000003d	A0409000		push	r9					; save r9
0000003e	A0406000		push	DAR
0000003f	A0405000		push	PAR
00000040	4290000C		lix		r9,screenPtr.lower	; r9 is the ptr to screenPtr
00000041	20690000		add		DAR,r9,ZERO			; DAR points to screenPtr
00000042	64A06000		ldl		r10					; r10 has screenPtr value
; look for specific characters
00000043	40B0007F		lil		r11,0x7F			; RUBOUT key
00000044	3838B000		cmp		r8,r11
00000045	D1000008		beq		gotBS
00000046	40B000E0		lil		r11,0xe0			; 0x0-0x1f are ctrl chars
00000047	25BB8000		and		r11,r11,r8
00000048	C7000010		bnz		notCtlChar
00000049	40B0000D		lil		r11,0x0d			; CR
0000004a	3838B000		cmp		r8,r11
0000004b	D1000007		beq		gotCR
0000004c	C000000F		bra		skipPrintChar
gotBS:
0000004d	20AA2000		add		r10,r10,MINUS1
0000004e	205A0000		add		PAR,r10,ZERO
0000004f	40800020		lil		r8,0x20
00000050	81508000		spb		r8
00000051	C000000A		bra		skipPrintChar
gotCR:
00000052	40B0FFC0		lil		r11,0xffc0			; Go to the start of the line
00000053	25AAB000		and		r10,r10,r11
00000054	40B00040		lil		r11,0x40			; Go down a line
00000055	20AAB000		add		r10,r10,r11
00000056	205A1000		add		PAR,r10,ONE			; Set PAR to screenPtr
00000057	C0000004		bra		skipPrintChar
notCtlChar:
00000058	205A0000		add		PAR,r10,ZERO		; Set PAR to screenPtr
00000059	81508000		spb		r8					; write character to screen
0000005a	20AA1000		add		r10,r10,ONE			; increment screen pointer
skipPrintChar:
0000005b	6560A000		sdl		r10					; save new pointer
0000005c	A1504000		pull 	PAR					; restore PAR
0000005d	A1604000		pull 	DAR					; restore DAR
0000005e	A1904000		pull 	r9					; restore r9
0000005f	A1A04000		pull 	r10					; restore r10
00000060	A1B04000		pull 	r11					; restore r11
00000061	A1704000		pull	PC					; rts

;
; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; screenBase has the base address of the screen memory
; screenPtr contains the address of the current char position
;

setCharPos:
00000062	A0409000		push	r9						; save r9
00000063	A040A000		push	r10						; save r10
00000064	A0406000		push	DAR						; save DAR
00000065	42A00010		lix	r10,screenBase.lower
00000066	206A0000		add	DAR,r10,ZERO			; DAR points to the screenBase
00000067	64A06000		ldl	r10						; r10 has the screen base address
00000068	20A80000		add	r10,r8,ZERO				; add passed position to base
00000069	4290000C		lix	r9,screenPtr.lower		; r9 is the ptr to screenPtr
0000006a	20690000		add	DAR,r9,ZERO				; DAR points to screenPtr
0000006b	6560A000		sdl	r10						; store new screen address
0000006c	A1604000		pull DAR						; restore DAR
0000006d	A1A04000		pull r10						; restore r10
0000006e	A1904000		pull r9						; restore r9
0000006f	A1704000		pull	PC						; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
00000070	A0409000		push	r9
00000071	A0405000		push	PAR
00000072	A040A000		push	r10
00000073	42A00002		lix		r10,0x2		; TxReady bit
00000074	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
00000075	84905000		lpl		r9			; Read Status into r9
00000076	2599A000		and 	r9,r9,r10
00000077	C3FFFFFE		bez 	waitScreenTxStat
00000078	42500001		lix 	PAR,0x1
00000079	85508000		spl		r8			; echo the character
0000007a	A1A04000		pull	r10
0000007b	A1504000		pull	PAR
0000007c	A1904000		pull	r9
0000007d	A1704000		pull	PC
	
