;
; A001-ANSI_Terminal - Terminal with keyboard and ANSI display
;
; ANSI Terminal is based on Grant Searle's ANSI VHDL code
; The ANSI Terminal application uses the following
;	R32V2020 RISC CPU
; 	PS/2 interface
;	Serial port (could use USB-Serial but more likely to use RS-232)
; Functional Description
;	Read PS/2 keyboard and send out the Serial interface
;	Read the Serial inteface and write to the screen
;	Support loopback mode?
;

prompt:			.string "ANSI Terminal (R32V2020)"
; lineBuff is 80 characters long
lineBuff:		.string "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
syntaxError:	.string "Syntax error"

main:
00000000	D4000062		bsr		clearANSIScreen
00000001	42800000		lix		r8,prompt.lower
00000002	D4000097		bsr		printString_ANSI
loopANSITerminal:
; Check PS/2 for character - If there's a character put it to the serial
00000003	D4000003		bsr		ps2ToSerial
; Check Serial for a character - If there's a character put it to the screen
00000004	D4000013		bsr		serialToANSI
; loop forever
00000005	C0FFFFFE		bra		loopANSITerminal


;
; ps2ToSerial
; Check PS/2 for character
; 	If there's a character put it to the serial
; There should not be a handshake off in this case since the PS/2 keyboard is 
;	much slower than the Serial interface, 
;	but check to be sure transmit is ready anyway
;	Also, there is a FIFO on the UART transmit to buffer up chars
;

ps2ToSerial:
00000006	A0409000		push	r9
00000007	A0405000		push	PAR
00000008	42500801		lix		PAR,0x0801	; PS/2 Status
00000009	84905000		lpl		r9			; Read Status into r9
0000000a	2B990001		andi	r9,r9,0x1
0000000b	C3000009		bez 	skipRdPS2	; No character was read
0000000c	42500800		lix 	PAR,0x0800
0000000d	84805000		lpl		r8			; read char from PS2
0000000e	42501800		lix		PAR,0x1800	; UART Status
waitUartTxRdy:			; Don't expect that there should be a wait here
0000000f	84905000		lpl		r9			; Read Status into r9
00000010	2B990002		andi	r9,r9,0x2
00000011	C3FFFFFE		bez 	waitUartTxRdy
00000012	42501801		lix 	PAR,0x1801
00000013	85508000		spl		r8			; echo the character
skipRdPS2:
00000014	A1504000		pull	PAR
00000015	A1904000		pull	r9
00000016	A1704000		pull	PC

;
; serialToANSI
;
	
serialToANSI:
00000017	A0405000		push	PAR
00000018	A0409000		push	r9
00000019	42501800		lix		PAR,0x1800	; UART Status
0000001a	84805000		lpl		r8			; Read Status into r8
0000001b	2B880001		andi 	r8,r8,0x1
0000001c	C3000009		bez 	noSerialChar
0000001d	42501801		lix 	PAR,0x1801
0000001e	84805000		lpl		r8
0000001f	42500000		lix		PAR,0x0		; UART Status
waitANSITxRdy:
00000020	84905000		lpl		r9			; Read Status into r9
00000021	2B990002		andi	r9,r9,0x2
00000022	C3FFFFFE		bez 	waitANSITxRdy
00000023	42500001		lix 	PAR,0x1
00000024	85508000		spl		r8			; echo the character
noSerialChar:
00000025	A1904000		pull	r9
00000026	A1504000		pull	PAR
00000027	A1704000		pull	PC

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
00000028	A0409000		push	r9
00000029	A0405000		push	PAR
0000002a	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
0000002b	84905000		lpl		r9			; Read Status into r9
0000002c	2B990002		andi	r9,r9,0x2
0000002d	C3FFFFFE		bez 	waitScreenTxStat
0000002e	42500001		lix 	PAR,0x1
0000002f	85508000		spl		r8			; echo the character
00000030	A1504000		pull	PAR
00000031	A1904000		pull	r9
00000032	A1704000		pull	PC
	
;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
00000033	A0405000		push	PAR
00000034	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
00000035	84805000		lpl		r8			; Read Status into r8
00000036	2B880001		andi 	r8,r8,0x1
00000037	C3FFFFFE		bez 	waitUartRxStat
00000038	42501801		lix 	PAR,0x1801
00000039	84805000		lpl		r8
0000003a	A1504000		pull	PAR
0000003b	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
0000003c	A0409000		push	r9
0000003d	A0405000		push	PAR
0000003e	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
0000003f	84905000		lpl		r9			; Read Status into r9
00000040	2B990002		andi	r9,r9,0x2
00000041	C3FFFFFE		bez 	waitUartTxStat
00000042	42501801		lix 	PAR,0x1801
00000043	85508000		spl		r8			; echo the character
00000044	A1504000		pull	PAR
00000045	A1904000		pull	r9
00000046	A1704000		pull	PC
	
;
; getPS2Char
; returns character received in r8
;

getPS2Char:
00000047	A0409000		push	r9
00000048	A0405000		push	PAR
00000049	42500801		lix		PAR,0x0801	; PS/2 Status
waitPS2RxStat:
0000004a	84905000		lpl		r9			; Read Status into r9
0000004b	2B990001		andi	r9,r9,0x1
0000004c	C3FFFFFE		bez 	waitPS2RxStat
getCharFromPS2:
0000004d	42500800		lix 	PAR,0x0800
0000004e	84805000		lpl		r8
0000004f	42500801		lix		PAR,0x0801	; PS/2 Status
whilePS2RxStat:
00000050	A1504000		pull	PAR
00000051	A1904000		pull	r9
00000052	A1704000		pull	PC

;
; printANSICode - Send the ANSI Escape Sequence
; r8 - points to the string
; This routine supplies the ESC
;

printANSICode:
00000053	A0408000		push	r8
00000054	A0408000		push	r8
00000055	4280001B		lix		r8,0x1b			; ESC
00000056	D4FFFFD2		bsr		putCharToANSIScreen
00000057	A1804000		pull	r8
00000058	D4000041		bsr		printString_ANSI
00000059	A1804000		pull	r8
0000005a	A1704000		pull	PC

;
; newLine_ANSI - Print out a newLine_ANSI (CR-LF)
;

newLine_ANSI:
0000005b	A0408000		push	r8
0000005c	4280000A		lix		r8,0x0A				; Line Feed
0000005d	D4FFFFCB		bsr		putCharToANSIScreen	; Put the character to the screen
0000005e	4280000D		lix		r8,0x0D				; Carriage Return
0000005f	D4FFFFC9		bsr		putCharToANSIScreen	; Echo character back to the UART
00000060	A1804000		pull	r8
00000061	A1704000		pull	PC

;
; clearANSIScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearANSIScreen:
00000062	A0408000		push	r8				; save r8
00000063	4280001B		lix		r8,0x1b			; ESC
00000064	D4FFFFC4		bsr		putCharToANSIScreen
00000065	4280005B		lix		r8,0x5b			; [
00000066	D4FFFFC2		bsr		putCharToANSIScreen
00000067	42800032		lix		r8,0x32			; 2
00000068	D4FFFFC0		bsr		putCharToANSIScreen
00000069	4280004A		lix		r8,0x4A			; J
0000006a	D4FFFFBE		bsr		putCharToANSIScreen
0000006b	A1804000		pull	r8
0000006c	A1704000		pull	PC
	
;
; enableBuzzer
;

enableBuzzer:
0000006d	A0408000		push	r8
0000006e	A0405000		push	PAR
0000006f	42502800		lix		PAR,0x2800
00000070	84805000		lpl		r8
00000071	29880010		ori		r8,r8,0x10
00000072	85508000		spl		r8
00000073	A1504000		pull	PAR
00000074	A1804000		pull	r8
00000075	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
00000076	A0408000		push	r8
00000077	A0405000		push	PAR
00000078	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
00000079	42502800		lix		PAR,0x2800
0000007a	84805000		lpl		r8
0000007b	2B88FFEF		andi	r8,r8,0xffef
0000007c	85508000		spl		r8
0000007d	A1504000		pull	PAR
0000007e	A1804000		pull	r8
0000007f	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
00000080	A0409000		push	r9
00000081	42503802		lix		PAR,0x3802		; address of the mSec counter
00000082	84905000		lpl		r9				; read the peripheral counter into r9
00000083	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
00000084	84905000		lpl		r9				; check the elapsed time counter
00000085	38389000		cmp		r8,r9
00000086	CCFFFFFE		blt		loop_delay_mS
00000087	A1904000		pull	r9
00000088	A1704000		pull	PC

;
; putValueToRingLEDs
; passed r8 - value to send to the ring LEDs
;

putValueToRingLEDs:
00000089	A0405000		push	PAR
0000008a	42504800		lix		PAR,0x4800		; Ring LED address
0000008b	85508000		spl		r8				; Write out LED bits
0000008c	A1504000		pull	PAR
0000008d	A1704000		pull	PC

;
; wr7Seg8Dig
; passed r8 - value to send to the 7 seg display
;

wr7Seg8Dig:
0000008e	A0405000		push	PAR
0000008f	42503000		lix		PAR,0x3000		; Seven Segment LED lines
00000090	85508000		spl		r8				; Write out LED bits
00000091	A1504000		pull	PAR
00000092	A1704000		pull	PC
	
;
; readSws
; switches value returned in r8
; switches are high when pressed
; Switches d0-d2 are the pushbutton switches (inverted in FPGA hardware)
; 	Pushbutton switches are debounced
; Switches d3-10 are the DIP switches (not inverted)
;

readSws:
00000093	A0405000		push	PAR
00000094	42502000		lix		PAR,0x2000	; Switches address
00000095	84805000		lpl		r8			; Read switches into r9
00000096	2B880FFF		andi	r8,r8,0xfff	; just the switches
00000097	A1504000		pull	PAR
00000098	A1704000		pull	PC

;
; printString_ANSI - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI:
00000099	A0408000		push	r8					; save r8
0000009a	A0406000		push	DAR
0000009b	20680000		add		DAR,r8,ZERO			; set the start of the string
nextCharANSI:
0000009c	68806000		ldbp	r8					; get the character01
0000009d	39380000		cmpi	r8,0x0				; Null terminated string
0000009e	D1000003		beq		donePrANSIStr		; done if null
0000009f	D4FFFF89		bsr		putCharToANSIScreen	; write out the character
000000a0	C0FFFFFC		bra		nextCharANSI
donePrANSIStr:
000000a1	A1604000		pull	DAR					; restore DAR
000000a2	A1804000		pull	r8					; restore r8
000000a3	A1704000		pull	PC					; rts
	