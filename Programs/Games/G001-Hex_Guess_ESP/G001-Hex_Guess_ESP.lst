;
; G001-Hex_Guess_ESP - Guess a number
; Number hex 0x00-0xff
;

banner:			.string "G001-Hex_Guess_ESP"
keyToStart:		.string "Any key to start"
guessString:	.string "Guess a hex number (0x00-0xFF) : "
; lineBuff is 80 characters long
lineBuff:		.string "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
syntaxError:	.string "*** Bad number error (at a2h_Error) ***"
tooHigh:		.string "Your guess was too high"
tooLow:			.string "Your guess was too low"
gotItRight:		.string "Congratulations, you got it right"
numberOfGuesses: .string "Number of Guesses : "

;
; Read a line from the UART and parse the line
; r14 = number of tries
; r15 = random number
;

main:
00000000	D40000FF		bsr		clearANSIScreenAndUART	; clear both screens
00000001	D40000F0		bsr		newLine_ANSI_UART		; UART does not start at the top of the screen
00000002	42800000		lix		r8,banner.lower			; print program banner
00000003	D40000CC		bsr		printString_ANSI_UART
00000004	D40000ED		bsr		newLine_ANSI_UART		; start 2 lines down
00000005	D40000EC		bsr		newLine_ANSI_UART
00000006	42800014		lix		r8,keyToStart.lower		; wait for keypress to ensure random number
00000007	D40000C8		bsr		printString_ANSI_UART
00000008	42E00000		lix		r14,0					; number of tries
waitForKeyHit:
00000009	D4000152		bsr		checkForCharAndDiscard	; returns 1 when key was pressed
0000000a	39380000		cmpi	r8,0x00					; wait for keypress
0000000b	D1FFFFFE		beq		waitForKeyHit
0000000c	D40000E5		bsr		newLine_ANSI_UART		; extra LF to move down
runAgain:
0000000d	D4000025		bsr		randomNumber_8bits		; pull random number from counter
0000000e	21F80000		addi	r15,r8,0				; r15 has the random number
notRightCode:
0000000f	21EE0001		addi	r14,r14,1				; increment number of tries
00000010	42800028		lix		r8,guessString.lower
00000011	D40000BE		bsr		printString_ANSI_UART
00000012	D4000028		bsr		readToLineBuffer		; read in the line
	; count add length check here
00000013	4280004C		lix		r8,lineBuff.lower
00000014	D400006D		bsr		hexToSevenSeg			; convert input string to hex pair (single 8 bit value)
00000015	2B8800FF		andi	r8,r8,0xff				; extra mask (probably no longer needed)
00000016	3838F000		cmp		r8,r15					; check if guess is correct
00000017	D100000A		beq		guessedIt				; guessed correctly
00000018	CC000005		blt		tooHighCase				; guess was too high
tooLowCase:
00000019	428000E0		lix		r8,tooLow.lower			; not equal or high means too low
0000001a	D40000B5		bsr		printString_ANSI_UART
0000001b	D40000D6		bsr		newLine_ANSI_UART
0000001c	C0FFFFF3		bra		notRightCode			; try again
tooHighCase:
0000001d	428000C8		lix		r8,tooHigh.lower		; guess was too high
0000001e	D40000B1		bsr		printString_ANSI_UART
0000001f	D40000D2		bsr		newLine_ANSI_UART
00000020	C0FFFFEF		bra		notRightCode			; try again
guessedIt:
00000021	428000F8		lix		r8,gotItRight.lower		; guess was correct
00000022	D40000AD		bsr		printString_ANSI_UART
00000023	D40000CE		bsr		newLine_ANSI_UART
00000024	4280011C		lix		r8,numberOfGuesses.lower ; print number of guesses
00000025	D40000AA		bsr		printString_ANSI_UART
00000026	218E0000		addi	r8,r14,0				; printLong needs value in r8
00000027	D400003A		bsr		printLong
00000028	D40000C9		bsr		newLine_ANSI_UART
endStop:
00000029	D40000C8		bsr		newLine_ANSI_UART
0000002a	42800014		lix		r8,keyToStart.lower		; wait for keypress to ensure random number
0000002b	D40000A4		bsr		printString_ANSI_UART
0000002c	42E00000		lix		r14,0					; number of tries
waitForKeyHit2:
0000002d	D400012E		bsr		checkForCharAndDiscard	; returns 1 when key was pressed
0000002e	39380000		cmpi	r8,0x00					; wait for keypress
0000002f	D1FFFFFE		beq		waitForKeyHit2
00000030	D40000C1		bsr		newLine_ANSI_UART
00000031	C0FFFFDC		bra		runAgain
;
; randomNumber_8bits - Generate a random number - 8-bit value
; 0x3800 is the Oscillator clock counter
;

randomNumber_8bits:
00000032	A0405000		push	PAR
00000033	42503800		lix		PAR,0x3800
00000034	84805000		lpl		r8
00000035	32808000		sr1		r8,r8
00000036	32808000		sr1		r8,r8
00000037	2B8800FF		andi	r8,r8,0xff
00000038	A1504000		pull	PAR
00000039	A1704000		pull	PC

;
; readToLineBuffer - Reads the UART and fills a buffer with the characters received
; r8 received character - Character received from the UART
; r9 is the input buffer length
; r10 used to test the backspace doesn't go past the start of the buffer
; DAR points to lineBuff current character position
;

readToLineBuffer:
0000003a	A0408000		push	r8
0000003b	A0409000		push	r9
0000003c	A040A000		push	r10
0000003d	A0406000		push	DAR
0000003e	4260004C		lix		DAR,lineBuff.lower	; DAR pointer = start of line buffer
0000003f	4290004F		lix		r9,79				; number of chars in the line buffer
loopReadLine:
00000040	D400010B		bsr		waitReadPS2_UART		; Get a character from the UART
00000041	D400012E		bsr		writeANSI_UART		; Echo character back to the UART
00000042	3938000D		cmpi	r8,0x0D				; check if received char was end of line
00000043	D1000006		beq		gotEOL
00000044	3938007F		cmpi	r8,0x7F
00000045	D1000009		beq		gotBackspace
00000046	69608000		sdbp	r8
00000047	20992000		add		r9,r9,MINUS1
00000048	C7FFFFF8		bnz		loopReadLine		; Next char would overflow
	; tbd add code for line too long	
gotEOL:
00000049	4280000A		lix		r8,0x0A				; Echo line feed after CR
0000004a	D4000125		bsr		writeANSI_UART	; Put the character to the screen
0000004b	D4000079		bsr		putCharToUART		; Echo character back to the UART
0000004c	61600000		sdb		r0					; null at end of line read
0000004d	C0000007		bra		doneHandlingLine
gotBackspace:
0000004e	20662000		add		DAR,DAR,MINUS1
0000004f	42A0004C		lix		r10,lineBuff.lower	; r10 pointer = start of line buffer
00000050	383A6000		cmp		r10,DAR
00000051	CFFFFFEF		bgt		loopReadLine
00000052	216A0000		addi	DAR,r10,0
00000053	C0FFFFED		bra		loopReadLine
doneHandlingLine:
00000054	A1604000		pull	DAR
00000055	A1A04000		pull	r10
00000056	A1904000		pull	r9
00000057	A1804000		pull	r8
00000058	A1704000		pull	PC

;
; printANSICode - Send the ANSI Escape Sequence
; r8 - points to the string
; This routine supplies the ESC
;

printANSICode:
00000059	A0408000		push	r8
0000005a	A0408000		push	r8
0000005b	4280001B		lix		r8,0x1b			; ESC
0000005c	D40000AE		bsr		putCharToANSIScreen
0000005d	A1804000		pull	r8
0000005e	D400007C		bsr		printString_ANSI
0000005f	A1804000		pull	r8
00000060	A1704000		pull	PC

;
; printLong
; r8 contains the long value to print
;

printLong:
00000061	A0408000		push	r8
00000062	A0409000		push	r9
00000063	A040A000		push	r10
00000064	A0408000		push	r8				; temporarily save r8
00000065	42800030		lix		r8,0x30
00000066	D4000109		bsr		writeANSI_UART
00000067	42800078		lix		r8,0x78
00000068	D4000107		bsr		writeANSI_UART
00000069	A1804000		pull	r8				; restore r8
0000006a	42900008		lix		r9,8			; loop counter
doNextPrintLong:
0000006b	34808000		rol1	r8,r8
0000006c	34808000		rol1	r8,r8
0000006d	34808000		rol1	r8,r8
0000006e	34808000		rol1	r8,r8
0000006f	D4000007		bsr		printHexVal
00000070	23990001		subi	r9,r9,1
00000071	C7FFFFFA		bnz		doNextPrintLong
00000072	A1A04000		pull	r10
00000073	A1904000		pull	r9
00000074	A1804000		pull	r8
00000075	A1704000		pull	PC

;
; printHexVal
;

printHexVal:
00000076	A0408000		push	r8
00000077	2B88000F		andi	r8,r8,0xf
00000078	39380009		cmpi	r8,9
00000079	CC000004		blt		printHexLetter
0000007a	21880030		addi	r8,r8,0x30
0000007b	D40000F4		bsr		writeANSI_UART
0000007c	C0000003		bra		donePrintHexVal
printHexLetter:
0000007d	21880037		addi	r8,r8,0x37		; 'A' - 10
0000007e	D40000F1		bsr		writeANSI_UART
donePrintHexVal:
0000007f	A1804000		pull	r8
00000080	A1704000		pull	PC

; hexToSevenSeg - Convert a two ASCII digit value into a hex byte
; Passed: r8 points to the start of the hex string
; Returned: r8 contains the hex value of the string
; Put the byte to the Seven Segment Display
;

hexToSevenSeg:
00000081	A0409000		push	r9
00000082	A0406000		push	DAR
00000083	A0405000		push	PAR
00000084	42900000		lix		r9,0
00000085	20680000		add		DAR,r8,ZERO		; Address of lineBuff (passed into this routine)
00000086	68806000		ldbp	r8
00000087	D400001C		bsr		asciiToHex
00000088	3938DEAD		cmpi	r8,0xDEAD
00000089	D1000011		beq		badHexVal
0000008a	2B88000F		andi	r8,r8,0xf
0000008b	28998000		or		r9,r9,r8
0000008c	30909000		sl1		r9,r9
0000008d	30909000		sl1		r9,r9
0000008e	30909000		sl1		r9,r9
0000008f	30909000		sl1		r9,r9
00000090	60806000		ldb		r8
00000091	D4000012		bsr		asciiToHex
00000092	3938DEAD		cmpi	r8,0xDEAD
00000093	D1000007		beq		badHexVal
00000094	2B88000F		andi	r8,r8,0xf
00000095	28998000		or		r9,r9,r8
00000096	42503000		lix		PAR,0x3000		; seven segment display
00000097	85509000		spl		r9
00000098	20890000		add		r8,r9,ZERO
00000099	C0000006		bra		valOKDone
badHexVal:
0000009a	428000A0		lix		r8,syntaxError.lower
0000009b	D4000056		bsr		newLine_ANSI_UART
0000009c	D4000033		bsr		printString_ANSI_UART
0000009d	D4000054		bsr		newLine_ANSI_UART
0000009e	4280DEAD		lix		r8,0xDEAD
valOKDone:
0000009f	A1504000		pull	PAR
000000a0	A1604000		pull	DAR
000000a1	A1904000		pull	r9
000000a2	A1704000		pull	PC

;
; asciiToHex - Convert a single ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
; Result is returned in r8
;	0x0-0xf - Legal Values
;	'DEAD' - Not hex character
;

asciiToHex:
000000a3	39380066		cmpi	r8,0x66			; past 'f'
000000a4	CC000011		blt		a2h_Error
000000a5	39380030		cmpi	r8,0x30			; below '0'
000000a6	CF00000F		bgt		a2h_Error
000000a7	3938003A		cmpi	r8,0x3A			; '0' - '9'
000000a8	CF000009		bgt		gotDigit
000000a9	39380041		cmpi	r8,0x41			; ':' - '@'
000000aa	CF00000B		bgt		a2h_Error
000000ab	39380047		cmpi	r8,0x47			; 'A' - 'F'
000000ac	CC000007		blt		gotUpperLetter
000000ad	39380061		cmpi	r8,0x61			; 'G' - 'tick'
000000ae	CC000007		blt		a2h_Error
; Lower case letter
000000af	23880057		subi	r8,r8,0x57
000000b0	C000000A		bra		doneConvA2H
; number 0-9
gotDigit:
000000b1	23880030		subi	r8,r8,0x30
000000b2	C0000008		bra		doneConvA2H
; A-F
gotUpperLetter:
000000b3	23880037		subi	r8,r8,0x37
000000b4	C0000006		bra		doneConvA2H
a2h_Error:
000000b5	428000A0		lix		r8,syntaxError.lower
000000b6	D400003B		bsr		newLine_ANSI_UART
000000b7	D4000018		bsr		printString_ANSI_UART
000000b8	D4000039		bsr		newLine_ANSI_UART
000000b9	4280DEAD		lix		r8,0xDEAD
doneConvA2H:
000000ba	A1704000		pull	PC

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
000000bb	A0405000		push	PAR
000000bc	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
000000bd	84805000		lpl		r8			; Read Status into r8
000000be	2B880001		andi 	r8,r8,0x1
000000bf	C3FFFFFE		bez 	waitUartRxStat
000000c0	42501801		lix 	PAR,0x1801
000000c1	84805000		lpl		r8
000000c2	A1504000		pull	PAR
000000c3	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
000000c4	A0409000		push	r9
000000c5	A0405000		push	PAR
000000c6	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
000000c7	84905000		lpl		r9			; Read Status into r9
000000c8	2B990002		andi	r9,r9,0x2
000000c9	C3FFFFFE		bez 	waitUartTxStat
000000ca	42501801		lix 	PAR,0x1801
000000cb	85508000		spl		r8			; echo the character
000000cc	A1504000		pull	PAR
000000cd	A1904000		pull	r9
000000ce	A1704000		pull	PC
	
;
; printString_ANSI_UART - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI_UART:
000000cf	A0408000		push	r8					; save r8
000000d0	A0406000		push	DAR
000000d1	20680000		add		DAR,r8,ZERO			; set the start of the string
nextChar:
000000d2	68806000		ldbp	r8					; get the character01
000000d3	39380000		cmpi	r8,0x0				; Null terminated string
000000d4	D1000003		beq		donePrStr			; done if null
000000d5	D400009A		bsr		writeANSI_UART	; write out the character
000000d6	C0FFFFFC		bra		nextChar
donePrStr:
000000d7	A1604000		pull	DAR					; restore DAR
000000d8	A1804000		pull	r8					; restore r8
000000d9	A1704000		pull	PC					; rts
	
;
; printString_ANSI - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI:
000000da	A0408000		push	r8					; save r8
000000db	A0406000		push	DAR
000000dc	20680000		add		DAR,r8,ZERO			; set the start of the string
nextCharANSI:
000000dd	68806000		ldbp	r8					; get the character01
000000de	39380000		cmpi	r8,0x0				; Null terminated string
000000df	D1000003		beq		donePrANSIStr		; done if null
000000e0	D400002A		bsr		putCharToANSIScreen	; write out the character
000000e1	C0FFFFFC		bra		nextCharANSI
donePrANSIStr:
000000e2	A1604000		pull	DAR					; restore DAR
000000e3	A1804000		pull	r8					; restore r8
000000e4	A1704000		pull	PC					; rts
	
;
; printLinebuffer_ANSI_UART - Print a screen to the current screen position with CRLF at the end
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printLinebuffer_ANSI_UART:
000000e5	A0408000		push	r8					; save r8
000000e6	A0406000		push	DAR
000000e7	21680000		addi	DAR,r8,0x0			; set the start of the string
nextChar2:
000000e8	68806000		ldbp	r8					; get the character
000000e9	39380000		cmpi	r8,0x0				; Null terminated string
000000ea	D1000003		beq		donePrStr2			; done if null
000000eb	D4FFFFEF		bsr		printString_ANSI	; write out the character
000000ec	C0FFFFFC		bra		nextChar2
donePrStr2:
000000ed	D4000004		bsr		newLine_ANSI_UART
000000ee	A1604000		pull	DAR					; restore DAR
000000ef	A1804000		pull	r8					; restore r8
000000f0	A1704000		pull	PC					; rts
	
;
; newLine_ANSI_UART - Print out a newLine_ANSI_UART (CR-LF)
;

newLine_ANSI_UART:
000000f1	A0408000		push	r8
000000f2	4280000A		lix		r8,0x0A				; Line Feed
000000f3	D400007C		bsr		writeANSI_UART	; Put the character to the screen
000000f4	4280000D		lix		r8,0x0D				; Carriage Return
000000f5	D400007A		bsr		writeANSI_UART		; Echo character back to the UART
000000f6	A1804000		pull	r8
000000f7	A1704000		pull	PC

;
; newLine_ANSI - Print out a newLine_ANSI (CR-LF)
;

newLine_ANSI:
000000f8	A0408000		push	r8
000000f9	4280000A		lix		r8,0x0A				; Line Feed
000000fa	D4000010		bsr		putCharToANSIScreen	; Put the character to the screen
000000fb	4280000D		lix		r8,0x0D				; Carriage Return
000000fc	D400000E		bsr		putCharToANSIScreen	; Echo character back to the UART
000000fd	A1804000		pull	r8
000000fe	A1704000		pull	PC

;
; clearANSIScreenAndUART - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearANSIScreenAndUART:
000000ff	A0408000		push	r8				; save r8
00000100	4280001B		lix		r8,0x1b			; ESC
00000101	D400006E		bsr		writeANSI_UART
00000102	4280005B		lix		r8,0x5b			; [
00000103	D400006C		bsr		writeANSI_UART
00000104	42800032		lix		r8,0x32			; 2
00000105	D400006A		bsr		writeANSI_UART
00000106	4280004A		lix		r8,0x4A			; J
00000107	D4000068		bsr		writeANSI_UART
00000108	A1804000		pull	r8
00000109	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
0000010a	A0409000		push	r9
0000010b	A0405000		push	PAR
0000010c	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
0000010d	84905000		lpl		r9			; Read Status into r9
0000010e	2B990002		andi	r9,r9,0x2
0000010f	C3FFFFFE		bez 	waitScreenTxStat
00000110	42500001		lix 	PAR,0x1
00000111	85508000		spl		r8			; echo the character
00000112	A1504000		pull	PAR
00000113	A1904000		pull	r9
00000114	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
00000115	A0408000		push	r8
00000116	42800000		lix		r8,0			; first note is 0
00000117	D4000007		bsr 	setNote
00000118	D400000B		bsr		enableBuzzer
00000119	428000FA		lix		r8,250			; count for 1 Sec
0000011a	D400001C		bsr		delay_mS		; call delay_ms
0000011b	D4000011		bsr		disableBuzzer
0000011c	A1804000		pull	r8
0000011d	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
; returns note
;

setNote:
0000011e	A0405000		push	PAR
0000011f	42504000		lix		PAR,0x4000
00000120	85508000		spl		r8
00000121	A1504000		pull	PAR
00000122	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
00000123	A0408000		push	r8
00000124	A0405000		push	PAR
00000125	42502800		lix		PAR,0x2800
00000126	84805000		lpl		r8
00000127	29880010		ori		r8,r8,0x10
00000128	85508000		spl		r8
00000129	A1504000		pull	PAR
0000012a	A1804000		pull	r8
0000012b	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
0000012c	A0408000		push	r8
0000012d	A0405000		push	PAR
0000012e	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
0000012f	42502800		lix		PAR,0x2800
00000130	84805000		lpl		r8
00000131	2B88FFEF		andi	r8,r8,0xffef
00000132	85508000		spl		r8
00000133	A1504000		pull	PAR
00000134	A1804000		pull	r8
00000135	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
00000136	A0409000		push	r9
00000137	42503802		lix		PAR,0x3802		; address of the mSec counter
00000138	84905000		lpl		r9				; read the peripheral counter into r9
00000139	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
0000013a	84905000		lpl		r9				; check the elapsed time counter
0000013b	38389000		cmp		r8,r9
0000013c	CCFFFFFE		blt		loop_delay_mS
0000013d	A1904000		pull	r9
0000013e	A1704000		pull	PC

;
; getPS2Char
; returns character received in r8
;

getPS2Char:
0000013f	A0409000		push	r9
00000140	A0405000		push	PAR
00000141	42501000		lix		PAR,0x1000	; PS/2 Status
waitPS2RxStat:
00000142	84905000		lpl		r9			; Read Status into r9
00000143	2B990001		andi	r9,r9,0x1
00000144	C3FFFFFE		bez 	waitPS2RxStat
getCharFromPS2:
00000145	42500800		lix 	PAR,0x0800
00000146	84805000		lpl		r8
00000147	42501000		lix		PAR,0x1000	; PS/2 Status
whilePS2RxStat:
00000148	A1504000		pull	PAR
00000149	A1904000		pull	r9
0000014a	A1704000		pull	PC

; waitReadPS2_UART
; wait for character from either 
;	the PS/2 keyboard and UART serial
; r8 = read character

waitReadPS2_UART:
0000014b	A0405000		push	PAR
checkCharFromPS2:
0000014c	42501000		lix		PAR,0x1000	; PS/2 Status
0000014d	84805000		lpl		r8			; Read Status
0000014e	2B880001		andi	r8,r8,0x1	; =1 when char received
0000014f	C3000004		bez 	checkUARTStat
00000150	42500800		lix 	PAR,0x0800	; PS/2 Data
00000151	84805000		lpl		r8
00000152	C0000007		bra		gotPS2Char
checkUARTStat:
00000153	42501800		lix		PAR,0x1800	; UART Status
00000154	84805000		lpl		r8			; Read Status
00000155	2B880001		andi 	r8,r8,0x1	; =1 when char received
00000156	C3FFFFF6		bez 	checkCharFromPS2
00000157	42501801		lix 	PAR,0x1801	; UART Data
00000158	84805000		lpl		r8
gotPS2Char:
00000159	A1504000		pull	PAR
0000015a	A1704000		pull	PC
	
; checkForCharAndDiscard - Check for a character in UART or PS/2
; Discard the character received
; return whether char was present (1) or no char was present (0)

checkForCharAndDiscard:
0000015b	A0405000		push	PAR
0000015c	42501000		lix		PAR,0x1000	; PS/2 Status
0000015d	84805000		lpl		r8			; Read Status
0000015e	2B880001		andi	r8,r8,0x1	; =1 when char received
0000015f	C3000005		bez 	checkUARTStat2
00000160	42500800		lix 	PAR,0x0800	; PS/2 Data
00000161	84805000		lpl		r8			; throw away char
00000162	42800001		lix		r8,0x1
00000163	C000000A		bra		gotChar
checkUARTStat2:
00000164	42501800		lix		PAR,0x1800	; UART Status
00000165	84805000		lpl		r8			; Read Status
00000166	2B880001		andi 	r8,r8,0x1	; =1 when char received
00000167	C3000005		bez 	noCharReceived
00000168	42501801		lix 	PAR,0x1801	; UART Data
00000169	84805000		lpl		r8
0000016a	42800001		lix		r8,1
0000016b	C0000002		bra		gotChar
noCharReceived:
0000016c	42800000		lix		r8,0
gotChar:
0000016d	A1504000		pull	PAR
0000016e	A1704000		pull	PC

; writeANSI_UART
; write out a character to both 
;	the ANSI screen and the UART

writeANSI_UART:
0000016f	D4FFFF9B		bsr		putCharToANSIScreen
00000170	D4FFFF54		bsr		putCharToUART
00000171	A1704000		pull	PC

;
; readSws
; switches value returned in r8
; switches are high when pressed
; Switches d0-d2 are the pushbutton switches (inverted in FPGA hardware)
; 	Pushbutton switches are debounced
; Switches d3-10 are the DIP switches (not inverted)
;

readSws:
00000172	A0405000		push	PAR
00000173	42502000		lix		PAR,0x2000	; Switches address
00000174	84805000		lpl		r8			; Read switches into r8
00000175	2B880FFF		andi	r8,r8,0xfff	; just the switches
00000176	A1504000		pull	PAR
00000177	A1704000		pull	PC
