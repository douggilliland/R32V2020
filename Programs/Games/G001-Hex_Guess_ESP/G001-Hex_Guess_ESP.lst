;
; G001-Hex_Guess_ESP - Guess a number
; Number hex 0x00-0xff
;

banner:			.string "G001-Hex_Guess_ESP"
keyToStart:		.string "Any key to start"
guessString:	.string "Guess a hex number (0x00-0xFF) : "
; lineBuff is 80 characters long
lineBuff:		.string "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
syntaxError:	.string "*** Bad number error ***"
tooHigh:		.string "Your guess was too high"
tooLow:			.string "Your guess was too low"
notRight:		.string "Wrong guess"
gotItRight:		.string "Congratulations, you got it right"
numberOfGuesses:	.string "Number of Guesses : "

;
; Read a line from the UART and parse the line
;

main:
00000000	D40000FA		bsr		clearANSIScreenAndUART
00000001	D40000EB		bsr		newLine_ANSI_UART
00000002	42800000		lix		r8,banner.lower
00000003	D40000C7		bsr		printString_ANSI_UART
00000004	D40000E8		bsr		newLine_ANSI_UART
00000005	D40000E7		bsr		newLine_ANSI_UART
00000006	42800014		lix		r8,keyToStart.lower
00000007	D40000C3		bsr		printString_ANSI_UART
00000008	42E00000		lix		r14,0
waitForKeyHit:
00000009	D400014D		bsr		checkForCharAndDiscard
0000000a	39380000		cmpi	r8,0x00
0000000b	D1FFFFFE		beq		waitForKeyHit
0000000c	D40000E0		bsr		newLine_ANSI_UART
0000000d	D4000021		bsr		randomNumber
;	bsr		newLine_ANSI_UART
;	bsr		printLong
;	bsr		newLine_ANSI_UART
0000000e	21F80000		addi	r15,r8,0				; r15 has the random number
notRightCode:
0000000f	21EE0001		addi	r14,r14,1
00000010	42800028		lix		r8,guessString.lower
00000011	D40000B9		bsr		printString_ANSI_UART
00000012	D4000027		bsr		getLine
00000013	4280004C		lix		r8,lineBuff.lower
00000014	D4000072		bsr		hexToSevenSeg
00000015	2B8800FF		andi	r8,r8,0xff
;	bsr		printLong
;	bsr		newLine_ANSI_UART
	; compare r8 and r15
	; if r8=r15 then you are done
00000016	3838F000		cmp		r8,r15
00000017	D100000E		beq		guessedIt
00000018	CC000005		blt		tooHighCase
tooLowCase:
00000019	428000D4		lix		r8,tooLow.lower
0000001a	D40000B0		bsr		printString_ANSI_UART
0000001b	D40000D1		bsr		newLine_ANSI_UART
0000001c	C0FFFFF3		bra		notRightCode
tooHighCase:
0000001d	428000BC		lix		r8,tooHigh.lower
0000001e	D40000AC		bsr		printString_ANSI_UART
0000001f	D40000CD		bsr		newLine_ANSI_UART
00000020	C0FFFFEF		bra		notRightCode
00000021	428000EC		lix		r8,notRight.lower
00000022	D40000A8		bsr		printString_ANSI_UART
00000023	D40000C9		bsr		newLine_ANSI_UART
00000024	C0FFFFEB		bra		notRightCode
guessedIt:
00000025	428000F8		lix		r8,gotItRight.lower
00000026	D40000A4		bsr		printString_ANSI_UART
00000027	D40000C5		bsr		newLine_ANSI_UART
00000028	4280011C		lix		r8,numberOfGuesses.lower
00000029	D40000A1		bsr		printString_ANSI_UART
0000002a	218E0000		addi	r8,r14,0
0000002b	D400003B		bsr		printLong
0000002c	D40000C0		bsr		newLine_ANSI_UART
endStop:
0000002d	C0000000		bra		endStop

;
; randomNumber - Generate a random number - 8-bit value
; 0x3800 is the Oscillator clock counter
;

randomNumber:
0000002e	A0405000		push	PAR
0000002f	42503800		lix		PAR,0x3800
00000030	84805000		lpl		r8
00000031	2B8800FF		andi	r8,r8,0xff
00000032	A1504000		pull	PAR
00000033	A1704000		pull	PC
;
; printMenu - Print the menu
;

printBanner:
00000034	A0408000		push	r8
00000035	42800000		lix		r8,banner.lower
00000036	D4000094		bsr		printString_ANSI_UART
00000037	A1804000		pull	r8
00000038	A1704000		pull	PC

;
; getLine - Reads the UART and fills a buffer with the characters received
; r8 received character - Character received from the UART
; r9 is the input buffer length
; r10 used to test the backspace doesn't go past the start of the buffer
; DAR points to lineBuff current character position
;

getLine:
00000039	A0408000		push	r8
0000003a	A0409000		push	r9
0000003b	A040A000		push	r10
0000003c	A0406000		push	DAR
0000003d	4260004C		lix		DAR,lineBuff.lower	; DAR pointer = start of line buffer
0000003e	4290004F		lix		r9,79				; number of chars in the line buffer
loopReadLine:
0000003f	D4000107		bsr		waitReadPS2_UART		; Get a character from the UART
00000040	D400012A		bsr		writeANSI_UART		; Echo character back to the UART
00000041	3938000D		cmpi	r8,0x0D				; check if received char was end of line
00000042	D1000006		beq		gotEOL
00000043	3938007F		cmpi	r8,0x7F
00000044	D1000009		beq		gotBackspace
00000045	69608000		sdbp	r8
00000046	20992000		add		r9,r9,MINUS1
00000047	C7FFFFF8		bnz		loopReadLine		; Next char would overflow
	; tbd add code for line too long	
gotEOL:
00000048	4280000A		lix		r8,0x0A				; Echo line feed after CR
00000049	D4000121		bsr		writeANSI_UART	; Put the character to the screen
0000004a	D4000075		bsr		putCharToUART		; Echo character back to the UART
0000004b	61600000		sdb		r0					; null at end of line read
0000004c	C0000007		bra		doneHandlingLine
gotBackspace:
0000004d	20662000		add		DAR,DAR,MINUS1
0000004e	42A0004C		lix		r10,lineBuff.lower	; r10 pointer = start of line buffer
0000004f	383A6000		cmp		r10,DAR
00000050	CFFFFFEF		bgt		loopReadLine
00000051	216A0000		addi	DAR,r10,0
00000052	C0FFFFED		bra		loopReadLine
doneHandlingLine:
00000053	A1604000		pull	DAR
00000054	A1A04000		pull	r10
00000055	A1904000		pull	r9
00000056	A1804000		pull	r8
00000057	A1704000		pull	PC

readSws:
00000058	A0405000		push	PAR
00000059	42502000		lix		PAR,0x2000	; Switches address
0000005a	84805000		lpl		r8			; Read switches into r9
0000005b	2B880FFF		andi	r8,r8,0xfff	; just the switches
0000005c	A1504000		pull	PAR
0000005d	A1704000		pull	PC
	
;
; printANSICode - Send the ANSI Escape Sequence
; r8 - points to the string
; This routine supplies the ESC
;

printANSICode:
0000005e	A0408000		push	r8
0000005f	A0408000		push	r8
00000060	4280001B		lix		r8,0x1b			; ESC
00000061	D40000A4		bsr		putCharToANSIScreen
00000062	A1804000		pull	r8
00000063	D4000072		bsr		printString_ANSI
00000064	A1804000		pull	r8
00000065	A1704000		pull	PC

;
; printLong
; r8 contains the long value to print
;

printLong:
00000066	A0408000		push	r8
00000067	A0409000		push	r9
00000068	A040A000		push	r10
00000069	A0408000		push	r8				; temporarily save r8
0000006a	42800030		lix		r8,0x30
0000006b	D40000FF		bsr		writeANSI_UART
0000006c	42800078		lix		r8,0x78
0000006d	D40000FD		bsr		writeANSI_UART
0000006e	A1804000		pull	r8				; restore r8
0000006f	42900008		lix		r9,8			; loop counter
doNextPrintLong:
00000070	34808000		rol1	r8,r8
00000071	34808000		rol1	r8,r8
00000072	34808000		rol1	r8,r8
00000073	34808000		rol1	r8,r8
00000074	D4000007		bsr		printHexVal
00000075	23990001		subi	r9,r9,1
00000076	C7FFFFFA		bnz		doNextPrintLong
00000077	A1A04000		pull	r10
00000078	A1904000		pull	r9
00000079	A1804000		pull	r8
0000007a	A1704000		pull	PC

;
; printHexVal
;

printHexVal:
0000007b	A0408000		push	r8
0000007c	2B88000F		andi	r8,r8,0xf
0000007d	39380009		cmpi	r8,9
0000007e	CC000004		blt		printHexLetter
0000007f	21880030		addi	r8,r8,0x30
00000080	D40000EA		bsr		writeANSI_UART
00000081	C0000003		bra		donePrintHexVal
printHexLetter:
00000082	21880037		addi	r8,r8,0x37		; 'A' - 10
00000083	D40000E7		bsr		writeANSI_UART
donePrintHexVal:
00000084	A1804000		pull	r8
00000085	A1704000		pull	PC

; hexToSevenSeg - Convert a two ASCII digit value into a hex byte
; Passed: r8 points to the start of the hex string
; Returned: r8 contains the hex value of the string
; Put the byte to the Seven Segment Display
;

hexToSevenSeg:
00000086	A0409000		push	r9
00000087	A0406000		push	DAR
00000088	A0405000		push	PAR
00000089	42900000		lix		r9,0
0000008a	20680000		add		DAR,r8,ZERO		; Address of lineBuff (passed into this routine)
0000008b	68806000		ldbp	r8
0000008c	D4000012		bsr		asciiToHex
0000008d	2B88000F		andi	r8,r8,0xf
0000008e	28998000		or		r9,r9,r8
0000008f	30909000		sl1		r9,r9
00000090	30909000		sl1		r9,r9
00000091	30909000		sl1		r9,r9
00000092	30909000		sl1		r9,r9
	;add		DAR,DAR,ONE
00000093	60806000		ldb		r8
00000094	D400000A		bsr		asciiToHex
00000095	2B88000F		andi	r8,r8,0xf
00000096	28998000		or		r9,r9,r8
00000097	42503000		lix		PAR,0x3000		; seven segment display
00000098	85509000		spl		r9
00000099	20890000		add		r8,r9,ZERO
0000009a	A1504000		pull	PAR
0000009b	A1604000		pull	DAR
0000009c	A1904000		pull	r9
0000009d	A1704000		pull	PC

;
; asciiToHex - Convert a single ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
; Result is returned in r8
;	0x0-0xf - Legal Values
;	'DEAD' - Not hex character
;

asciiToHex:
0000009e	39380066		cmpi	r8,0x66			; past 'f'
0000009f	CC000011		blt		a2h_Error
000000a0	39380030		cmpi	r8,0x30			; below '0'
000000a1	CF00000F		bgt		a2h_Error
000000a2	3938003A		cmpi	r8,0x3A			; '0' - '9'
000000a3	CF000009		bgt		gotDigit
000000a4	39380041		cmpi	r8,0x41			; ':' - '@'
000000a5	CF00000B		bgt		a2h_Error
000000a6	39380047		cmpi	r8,0x47			; 'A' - 'F'
000000a7	CC000007		blt		gotUpperLetter
000000a8	39380061		cmpi	r8,0x61			; 'G' - 'tick'
000000a9	CC000007		blt		a2h_Error
; Lower case letter
000000aa	23880057		subi	r8,r8,0x57
000000ab	C000000A		bra		doneConvA2H
; number 0-9
gotDigit:
000000ac	23880030		subi	r8,r8,0x30
000000ad	C0000008		bra		doneConvA2H
; A-F
gotUpperLetter:
000000ae	23880037		subi	r8,r8,0x37
000000af	C0000006		bra		doneConvA2H
a2h_Error:
000000b0	428000A0		lix		r8,syntaxError.lower
000000b1	D400003B		bsr		newLine_ANSI_UART
000000b2	D4000018		bsr		printString_ANSI_UART
000000b3	D4000039		bsr		newLine_ANSI_UART
000000b4	4280DEAD		lix		r8,0xDEAD
doneConvA2H:
000000b5	A1704000		pull	PC

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
000000b6	A0405000		push	PAR
000000b7	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
000000b8	84805000		lpl		r8			; Read Status into r8
000000b9	2B880001		andi 	r8,r8,0x1
000000ba	C3FFFFFE		bez 	waitUartRxStat
000000bb	42501801		lix 	PAR,0x1801
000000bc	84805000		lpl		r8
000000bd	A1504000		pull	PAR
000000be	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
000000bf	A0409000		push	r9
000000c0	A0405000		push	PAR
000000c1	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
000000c2	84905000		lpl		r9			; Read Status into r9
000000c3	2B990002		andi	r9,r9,0x2
000000c4	C3FFFFFE		bez 	waitUartTxStat
000000c5	42501801		lix 	PAR,0x1801
000000c6	85508000		spl		r8			; echo the character
000000c7	A1504000		pull	PAR
000000c8	A1904000		pull	r9
000000c9	A1704000		pull	PC
	
;
; printString_ANSI_UART - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI_UART:
000000ca	A0408000		push	r8					; save r8
000000cb	A0406000		push	DAR
000000cc	20680000		add		DAR,r8,ZERO			; set the start of the string
nextChar:
000000cd	68806000		ldbp	r8					; get the character01
000000ce	39380000		cmpi	r8,0x0				; Null terminated string
000000cf	D1000003		beq		donePrStr			; done if null
000000d0	D400009A		bsr		writeANSI_UART	; write out the character
000000d1	C0FFFFFC		bra		nextChar
donePrStr:
000000d2	A1604000		pull	DAR					; restore DAR
000000d3	A1804000		pull	r8					; restore r8
000000d4	A1704000		pull	PC					; rts
	
;
; printString_ANSI - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI:
000000d5	A0408000		push	r8					; save r8
000000d6	A0406000		push	DAR
000000d7	20680000		add		DAR,r8,ZERO			; set the start of the string
nextCharANSI:
000000d8	68806000		ldbp	r8					; get the character01
000000d9	39380000		cmpi	r8,0x0				; Null terminated string
000000da	D1000003		beq		donePrANSIStr		; done if null
000000db	D400002A		bsr		putCharToANSIScreen	; write out the character
000000dc	C0FFFFFC		bra		nextCharANSI
donePrANSIStr:
000000dd	A1604000		pull	DAR					; restore DAR
000000de	A1804000		pull	r8					; restore r8
000000df	A1704000		pull	PC					; rts
	
;
; printLine - Print a screen to the current screen position with CRLF at the end
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printLine:
000000e0	A0408000		push	r8					; save r8
000000e1	A0406000		push	DAR
000000e2	21680000		addi	DAR,r8,0x0			; set the start of the string
nextChar2:
000000e3	68806000		ldbp	r8					; get the character
000000e4	39380000		cmpi	r8,0x0				; Null terminated string
000000e5	D1000003		beq		donePrStr2			; done if null
000000e6	D4FFFFEF		bsr		printString_ANSI	; write out the character
000000e7	C0FFFFFC		bra		nextChar2
donePrStr2:
000000e8	D4000004		bsr		newLine_ANSI_UART
000000e9	A1604000		pull	DAR					; restore DAR
000000ea	A1804000		pull	r8					; restore r8
000000eb	A1704000		pull	PC					; rts
	
;
; newLine_ANSI_UART - Print out a newLine_ANSI_UART (CR-LF)
;

newLine_ANSI_UART:
000000ec	A0408000		push	r8
000000ed	4280000A		lix		r8,0x0A				; Line Feed
000000ee	D400007C		bsr		writeANSI_UART	; Put the character to the screen
000000ef	4280000D		lix		r8,0x0D				; Carriage Return
000000f0	D400007A		bsr		writeANSI_UART		; Echo character back to the UART
000000f1	A1804000		pull	r8
000000f2	A1704000		pull	PC

;
; newLine_ANSI - Print out a newLine_ANSI (CR-LF)
;

newLine_ANSI:
000000f3	A0408000		push	r8
000000f4	4280000A		lix		r8,0x0A				; Line Feed
000000f5	D4000010		bsr		putCharToANSIScreen	; Put the character to the screen
000000f6	4280000D		lix		r8,0x0D				; Carriage Return
000000f7	D400000E		bsr		putCharToANSIScreen	; Echo character back to the UART
000000f8	A1804000		pull	r8
000000f9	A1704000		pull	PC

;
; clearANSIScreenAndUART - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearANSIScreenAndUART:
000000fa	A0408000		push	r8				; save r8
000000fb	4280001B		lix		r8,0x1b			; ESC
000000fc	D400006E		bsr		writeANSI_UART
000000fd	4280005B		lix		r8,0x5b			; [
000000fe	D400006C		bsr		writeANSI_UART
000000ff	42800032		lix		r8,0x32			; 2
00000100	D400006A		bsr		writeANSI_UART
00000101	4280004A		lix		r8,0x4A			; J
00000102	D4000068		bsr		writeANSI_UART
00000103	A1804000		pull	r8
00000104	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
00000105	A0409000		push	r9
00000106	A0405000		push	PAR
00000107	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
00000108	84905000		lpl		r9			; Read Status into r9
00000109	2B990002		andi	r9,r9,0x2
0000010a	C3FFFFFE		bez 	waitScreenTxStat
0000010b	42500001		lix 	PAR,0x1
0000010c	85508000		spl		r8			; echo the character
0000010d	A1504000		pull	PAR
0000010e	A1904000		pull	r9
0000010f	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
00000110	A0408000		push	r8
00000111	42800000		lix		r8,0			; first note is 0
00000112	D4000007		bsr 	setNote
00000113	D400000B		bsr		enableBuzzer
00000114	428000FA		lix		r8,250			; count for 1 Sec
00000115	D400001C		bsr		delay_mS		; call delay_ms
00000116	D4000011		bsr		disableBuzzer
00000117	A1804000		pull	r8
00000118	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
; returns note
;

setNote:
00000119	A0405000		push	PAR
0000011a	42504000		lix		PAR,0x4000
0000011b	85508000		spl		r8
0000011c	A1504000		pull	PAR
0000011d	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
0000011e	A0408000		push	r8
0000011f	A0405000		push	PAR
00000120	42502800		lix		PAR,0x2800
00000121	84805000		lpl		r8
00000122	29880010		ori		r8,r8,0x10
00000123	85508000		spl		r8
00000124	A1504000		pull	PAR
00000125	A1804000		pull	r8
00000126	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
00000127	A0408000		push	r8
00000128	A0405000		push	PAR
00000129	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
0000012a	42502800		lix		PAR,0x2800
0000012b	84805000		lpl		r8
0000012c	2B88FFEF		andi	r8,r8,0xffef
0000012d	85508000		spl		r8
0000012e	A1504000		pull	PAR
0000012f	A1804000		pull	r8
00000130	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
00000131	A0409000		push	r9
00000132	42503802		lix		PAR,0x3802		; address of the mSec counter
00000133	84905000		lpl		r9				; read the peripheral counter into r9
00000134	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
00000135	84905000		lpl		r9				; check the elapsed time counter
00000136	38389000		cmp		r8,r9
00000137	CCFFFFFE		blt		loop_delay_mS
00000138	A1904000		pull	r9
00000139	A1704000		pull	PC

;
; getPS2Char
; returns character received in r8
;

getPS2Char:
0000013a	A0409000		push	r9
0000013b	A0405000		push	PAR
0000013c	42501000		lix		PAR,0x1000	; PS/2 Status
waitPS2RxStat:
0000013d	84905000		lpl		r9			; Read Status into r9
0000013e	2B990001		andi	r9,r9,0x1
0000013f	C3FFFFFE		bez 	waitPS2RxStat
getCharFromPS2:
00000140	42500800		lix 	PAR,0x0800
00000141	84805000		lpl		r8
00000142	42501000		lix		PAR,0x1000	; PS/2 Status
whilePS2RxStat:
00000143	A1504000		pull	PAR
00000144	A1904000		pull	r9
00000145	A1704000		pull	PC

; waitReadPS2_UART
; wait for character from either 
;	the PS/2 keyboard and UART serial
; r8 = read character

waitReadPS2_UART:
00000146	A0405000		push	PAR
checkCharFromPS2:
00000147	42501000		lix		PAR,0x1000	; PS/2 Status
00000148	84805000		lpl		r8			; Read Status
00000149	2B880001		andi	r8,r8,0x1	; =1 when char received
0000014a	C3000004		bez 	checkUARTStat
0000014b	42500800		lix 	PAR,0x0800	; PS/2 Data
0000014c	84805000		lpl		r8
0000014d	C0000007		bra		gotPS2Char
checkUARTStat:
0000014e	42501800		lix		PAR,0x1800	; UART Status
0000014f	84805000		lpl		r8			; Read Status
00000150	2B880001		andi 	r8,r8,0x1	; =1 when char received
00000151	C3FFFFF6		bez 	checkCharFromPS2
00000152	42501801		lix 	PAR,0x1801	; UART Data
00000153	84805000		lpl		r8
gotPS2Char:
00000154	A1504000		pull	PAR
00000155	A1704000		pull	PC
	
; checkForCharAndDiscard - Check for a character in UART or PS/2
; Discard the character received
; return whether char was present (1) or no char was present (0)

checkForCharAndDiscard:
00000156	A0405000		push	PAR
00000157	42501000		lix		PAR,0x1000	; PS/2 Status
00000158	84805000		lpl		r8			; Read Status
00000159	2B880001		andi	r8,r8,0x1	; =1 when char received
0000015a	C3000005		bez 	checkUARTStat2
0000015b	42500800		lix 	PAR,0x0800	; PS/2 Data
0000015c	84805000		lpl		r8			; throw away char
0000015d	42800001		lix		r8,0x1
0000015e	C000000A		bra		gotChar
checkUARTStat2:
0000015f	42501800		lix		PAR,0x1800	; UART Status
00000160	84805000		lpl		r8			; Read Status
00000161	2B880001		andi 	r8,r8,0x1	; =1 when char received
00000162	C3000005		bez 	noCharReceived
00000163	42501801		lix 	PAR,0x1801	; UART Data
00000164	84805000		lpl		r8
00000165	42800001		lix		r8,1
00000166	C0000002		bra		gotChar
noCharReceived:
00000167	42800000		lix		r8,0
gotChar:
00000168	A1504000		pull	PAR
00000169	A1704000		pull	PC

; writeANSI_UART
; write out a character to both 
;	the ANSI screen and the UART

writeANSI_UART:
0000016a	D4FFFF9B		bsr		putCharToANSIScreen
0000016b	D4FFFF54		bsr		putCharToUART
0000016c	A1704000		pull	PC
