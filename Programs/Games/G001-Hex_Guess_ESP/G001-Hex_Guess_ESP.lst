;
; G001-Hex_Guess_ESP - Guess a number
; Number hex 0x00-0xff
;

banner:			.string "G001-Hex_Guess_ESP"
keyToStart:		.string "Any key to start"
guessString:	.string "Guess a hex number (0x00-0xFF) : "
; lineBuff is 80 characters long
lineBuff:		.string "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
syntaxError:	.string "*** Bad number error ***"
tooHigh:		.string "Your guess was too high"
tooLow:			.string "Your guess was too low"
notRight:		.string "Wrong guess"
gotItRight:		.string "Congratulations, you got it right"
numberOfGuesses:	.string "Number of Guesses : "

;
; Read a line from the UART and parse the line
; r14 = number of tries
; r15 = random number
;

main:
00000000	D40000F8		bsr		clearANSIScreenAndUART	; clear both screens
00000001	D40000E9		bsr		newLine_ANSI_UART		; UART does not start at the top of the screen
00000002	42800000		lix		r8,banner.lower			; print program banner
00000003	D40000C5		bsr		printString_ANSI_UART
00000004	D40000E6		bsr		newLine_ANSI_UART		; start 2 lines down
00000005	D40000E5		bsr		newLine_ANSI_UART
00000006	42800014		lix		r8,keyToStart.lower		; wait for keypress to ensure random number
00000007	D40000C1		bsr		printString_ANSI_UART
00000008	42E00000		lix		r14,0					; number of tries
waitForKeyHit:
00000009	D400014B		bsr		checkForCharAndDiscard	; returns 1 when key was pressed
0000000a	39380000		cmpi	r8,0x00					; wait for keypress
0000000b	D1FFFFFE		beq		waitForKeyHit
0000000c	D40000DE		bsr		newLine_ANSI_UART		; extra LF to move down
runAgain:
0000000d	D4000024		bsr		randomNumber			; pull random number from counter
0000000e	21F80000		addi	r15,r8,0				; r15 has the random number
notRightCode:
0000000f	21EE0001		addi	r14,r14,1				; increment number of tries
00000010	42800028		lix		r8,guessString.lower
00000011	D40000B7		bsr		printString_ANSI_UART
00000012	D4000025		bsr		readToLineBuffer		; read in the line
	; count add length check here
00000013	4280004C		lix		r8,lineBuff.lower
00000014	D4000070		bsr		hexToSevenSeg			; convert input string to hex pair (single 8 bit value)
00000015	2B8800FF		andi	r8,r8,0xff				; extra mask (probably no longer needed)
00000016	3838F000		cmp		r8,r15					; check if guess is correct
00000017	D100000A		beq		guessedIt				; guessed correctly
00000018	CC000005		blt		tooHighCase				; guess was too high
tooLowCase:
00000019	428000D4		lix		r8,tooLow.lower			; not equal or high means too low
0000001a	D40000AE		bsr		printString_ANSI_UART
0000001b	D40000CF		bsr		newLine_ANSI_UART
0000001c	C0FFFFF3		bra		notRightCode			; try again
tooHighCase:
0000001d	428000BC		lix		r8,tooHigh.lower		; guess was too high
0000001e	D40000AA		bsr		printString_ANSI_UART
0000001f	D40000CB		bsr		newLine_ANSI_UART
00000020	C0FFFFEF		bra		notRightCode			; try again
guessedIt:
00000021	428000F8		lix		r8,gotItRight.lower		; guess was correct
00000022	D40000A6		bsr		printString_ANSI_UART
00000023	D40000C7		bsr		newLine_ANSI_UART
00000024	4280011C		lix		r8,numberOfGuesses.lower ; print number of guesses
00000025	D40000A3		bsr		printString_ANSI_UART
00000026	218E0000		addi	r8,r14,0				; printLong needs value in r8
00000027	D400003D		bsr		printLong
00000028	D40000C2		bsr		newLine_ANSI_UART
endStop:
00000029	42800014		lix		r8,keyToStart.lower		; wait for keypress to ensure random number
0000002a	D400009E		bsr		printString_ANSI_UART
0000002b	42E00000		lix		r14,0					; number of tries
waitForKeyHit2:
0000002c	D4000128		bsr		checkForCharAndDiscard	; returns 1 when key was pressed
0000002d	39380000		cmpi	r8,0x00					; wait for keypress
0000002e	D1FFFFFE		beq		waitForKeyHit2
0000002f	D40000BB		bsr		newLine_ANSI_UART
00000030	C0FFFFDD		bra		runAgain
;
; randomNumber - Generate a random number - 8-bit value
; 0x3800 is the Oscillator clock counter
;

randomNumber:
00000031	A0405000		push	PAR
00000032	42503800		lix		PAR,0x3800
00000033	84805000		lpl		r8
00000034	2B8800FF		andi	r8,r8,0xff
00000035	A1504000		pull	PAR
00000036	A1704000		pull	PC

;
; readToLineBuffer - Reads the UART and fills a buffer with the characters received
; r8 received character - Character received from the UART
; r9 is the input buffer length
; r10 used to test the backspace doesn't go past the start of the buffer
; DAR points to lineBuff current character position
;

readToLineBuffer:
00000037	A0408000		push	r8
00000038	A0409000		push	r9
00000039	A040A000		push	r10
0000003a	A0406000		push	DAR
0000003b	4260004C		lix		DAR,lineBuff.lower	; DAR pointer = start of line buffer
0000003c	4290004F		lix		r9,79				; number of chars in the line buffer
loopReadLine:
0000003d	D4000107		bsr		waitReadPS2_UART		; Get a character from the UART
0000003e	D400012A		bsr		writeANSI_UART		; Echo character back to the UART
0000003f	3938000D		cmpi	r8,0x0D				; check if received char was end of line
00000040	D1000006		beq		gotEOL
00000041	3938007F		cmpi	r8,0x7F
00000042	D1000009		beq		gotBackspace
00000043	69608000		sdbp	r8
00000044	20992000		add		r9,r9,MINUS1
00000045	C7FFFFF8		bnz		loopReadLine		; Next char would overflow
	; tbd add code for line too long	
gotEOL:
00000046	4280000A		lix		r8,0x0A				; Echo line feed after CR
00000047	D4000121		bsr		writeANSI_UART	; Put the character to the screen
00000048	D4000075		bsr		putCharToUART		; Echo character back to the UART
00000049	61600000		sdb		r0					; null at end of line read
0000004a	C0000007		bra		doneHandlingLine
gotBackspace:
0000004b	20662000		add		DAR,DAR,MINUS1
0000004c	42A0004C		lix		r10,lineBuff.lower	; r10 pointer = start of line buffer
0000004d	383A6000		cmp		r10,DAR
0000004e	CFFFFFEF		bgt		loopReadLine
0000004f	216A0000		addi	DAR,r10,0
00000050	C0FFFFED		bra		loopReadLine
doneHandlingLine:
00000051	A1604000		pull	DAR
00000052	A1A04000		pull	r10
00000053	A1904000		pull	r9
00000054	A1804000		pull	r8
00000055	A1704000		pull	PC

readSws:
00000056	A0405000		push	PAR
00000057	42502000		lix		PAR,0x2000	; Switches address
00000058	84805000		lpl		r8			; Read switches into r9
00000059	2B880FFF		andi	r8,r8,0xfff	; just the switches
0000005a	A1504000		pull	PAR
0000005b	A1704000		pull	PC
	
;
; printANSICode - Send the ANSI Escape Sequence
; r8 - points to the string
; This routine supplies the ESC
;

printANSICode:
0000005c	A0408000		push	r8
0000005d	A0408000		push	r8
0000005e	4280001B		lix		r8,0x1b			; ESC
0000005f	D40000A4		bsr		putCharToANSIScreen
00000060	A1804000		pull	r8
00000061	D4000072		bsr		printString_ANSI
00000062	A1804000		pull	r8
00000063	A1704000		pull	PC

;
; printLong
; r8 contains the long value to print
;

printLong:
00000064	A0408000		push	r8
00000065	A0409000		push	r9
00000066	A040A000		push	r10
00000067	A0408000		push	r8				; temporarily save r8
00000068	42800030		lix		r8,0x30
00000069	D40000FF		bsr		writeANSI_UART
0000006a	42800078		lix		r8,0x78
0000006b	D40000FD		bsr		writeANSI_UART
0000006c	A1804000		pull	r8				; restore r8
0000006d	42900008		lix		r9,8			; loop counter
doNextPrintLong:
0000006e	34808000		rol1	r8,r8
0000006f	34808000		rol1	r8,r8
00000070	34808000		rol1	r8,r8
00000071	34808000		rol1	r8,r8
00000072	D4000007		bsr		printHexVal
00000073	23990001		subi	r9,r9,1
00000074	C7FFFFFA		bnz		doNextPrintLong
00000075	A1A04000		pull	r10
00000076	A1904000		pull	r9
00000077	A1804000		pull	r8
00000078	A1704000		pull	PC

;
; printHexVal
;

printHexVal:
00000079	A0408000		push	r8
0000007a	2B88000F		andi	r8,r8,0xf
0000007b	39380009		cmpi	r8,9
0000007c	CC000004		blt		printHexLetter
0000007d	21880030		addi	r8,r8,0x30
0000007e	D40000EA		bsr		writeANSI_UART
0000007f	C0000003		bra		donePrintHexVal
printHexLetter:
00000080	21880037		addi	r8,r8,0x37		; 'A' - 10
00000081	D40000E7		bsr		writeANSI_UART
donePrintHexVal:
00000082	A1804000		pull	r8
00000083	A1704000		pull	PC

; hexToSevenSeg - Convert a two ASCII digit value into a hex byte
; Passed: r8 points to the start of the hex string
; Returned: r8 contains the hex value of the string
; Put the byte to the Seven Segment Display
;

hexToSevenSeg:
00000084	A0409000		push	r9
00000085	A0406000		push	DAR
00000086	A0405000		push	PAR
00000087	42900000		lix		r9,0
00000088	20680000		add		DAR,r8,ZERO		; Address of lineBuff (passed into this routine)
00000089	68806000		ldbp	r8
0000008a	D4000012		bsr		asciiToHex
0000008b	2B88000F		andi	r8,r8,0xf
0000008c	28998000		or		r9,r9,r8
0000008d	30909000		sl1		r9,r9
0000008e	30909000		sl1		r9,r9
0000008f	30909000		sl1		r9,r9
00000090	30909000		sl1		r9,r9
00000091	60806000		ldb		r8
00000092	D400000A		bsr		asciiToHex
00000093	2B88000F		andi	r8,r8,0xf
00000094	28998000		or		r9,r9,r8
00000095	42503000		lix		PAR,0x3000		; seven segment display
00000096	85509000		spl		r9
00000097	20890000		add		r8,r9,ZERO
00000098	A1504000		pull	PAR
00000099	A1604000		pull	DAR
0000009a	A1904000		pull	r9
0000009b	A1704000		pull	PC

;
; asciiToHex - Convert a single ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
; Result is returned in r8
;	0x0-0xf - Legal Values
;	'DEAD' - Not hex character
;

asciiToHex:
0000009c	39380066		cmpi	r8,0x66			; past 'f'
0000009d	CC000011		blt		a2h_Error
0000009e	39380030		cmpi	r8,0x30			; below '0'
0000009f	CF00000F		bgt		a2h_Error
000000a0	3938003A		cmpi	r8,0x3A			; '0' - '9'
000000a1	CF000009		bgt		gotDigit
000000a2	39380041		cmpi	r8,0x41			; ':' - '@'
000000a3	CF00000B		bgt		a2h_Error
000000a4	39380047		cmpi	r8,0x47			; 'A' - 'F'
000000a5	CC000007		blt		gotUpperLetter
000000a6	39380061		cmpi	r8,0x61			; 'G' - 'tick'
000000a7	CC000007		blt		a2h_Error
; Lower case letter
000000a8	23880057		subi	r8,r8,0x57
000000a9	C000000A		bra		doneConvA2H
; number 0-9
gotDigit:
000000aa	23880030		subi	r8,r8,0x30
000000ab	C0000008		bra		doneConvA2H
; A-F
gotUpperLetter:
000000ac	23880037		subi	r8,r8,0x37
000000ad	C0000006		bra		doneConvA2H
a2h_Error:
000000ae	428000A0		lix		r8,syntaxError.lower
000000af	D400003B		bsr		newLine_ANSI_UART
000000b0	D4000018		bsr		printString_ANSI_UART
000000b1	D4000039		bsr		newLine_ANSI_UART
000000b2	4280DEAD		lix		r8,0xDEAD
doneConvA2H:
000000b3	A1704000		pull	PC

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
000000b4	A0405000		push	PAR
000000b5	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
000000b6	84805000		lpl		r8			; Read Status into r8
000000b7	2B880001		andi 	r8,r8,0x1
000000b8	C3FFFFFE		bez 	waitUartRxStat
000000b9	42501801		lix 	PAR,0x1801
000000ba	84805000		lpl		r8
000000bb	A1504000		pull	PAR
000000bc	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
000000bd	A0409000		push	r9
000000be	A0405000		push	PAR
000000bf	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
000000c0	84905000		lpl		r9			; Read Status into r9
000000c1	2B990002		andi	r9,r9,0x2
000000c2	C3FFFFFE		bez 	waitUartTxStat
000000c3	42501801		lix 	PAR,0x1801
000000c4	85508000		spl		r8			; echo the character
000000c5	A1504000		pull	PAR
000000c6	A1904000		pull	r9
000000c7	A1704000		pull	PC
	
;
; printString_ANSI_UART - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI_UART:
000000c8	A0408000		push	r8					; save r8
000000c9	A0406000		push	DAR
000000ca	20680000		add		DAR,r8,ZERO			; set the start of the string
nextChar:
000000cb	68806000		ldbp	r8					; get the character01
000000cc	39380000		cmpi	r8,0x0				; Null terminated string
000000cd	D1000003		beq		donePrStr			; done if null
000000ce	D400009A		bsr		writeANSI_UART	; write out the character
000000cf	C0FFFFFC		bra		nextChar
donePrStr:
000000d0	A1604000		pull	DAR					; restore DAR
000000d1	A1804000		pull	r8					; restore r8
000000d2	A1704000		pull	PC					; rts
	
;
; printString_ANSI - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI:
000000d3	A0408000		push	r8					; save r8
000000d4	A0406000		push	DAR
000000d5	20680000		add		DAR,r8,ZERO			; set the start of the string
nextCharANSI:
000000d6	68806000		ldbp	r8					; get the character01
000000d7	39380000		cmpi	r8,0x0				; Null terminated string
000000d8	D1000003		beq		donePrANSIStr		; done if null
000000d9	D400002A		bsr		putCharToANSIScreen	; write out the character
000000da	C0FFFFFC		bra		nextCharANSI
donePrANSIStr:
000000db	A1604000		pull	DAR					; restore DAR
000000dc	A1804000		pull	r8					; restore r8
000000dd	A1704000		pull	PC					; rts
	
;
; printLine - Print a screen to the current screen position with CRLF at the end
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printLine:
000000de	A0408000		push	r8					; save r8
000000df	A0406000		push	DAR
000000e0	21680000		addi	DAR,r8,0x0			; set the start of the string
nextChar2:
000000e1	68806000		ldbp	r8					; get the character
000000e2	39380000		cmpi	r8,0x0				; Null terminated string
000000e3	D1000003		beq		donePrStr2			; done if null
000000e4	D4FFFFEF		bsr		printString_ANSI	; write out the character
000000e5	C0FFFFFC		bra		nextChar2
donePrStr2:
000000e6	D4000004		bsr		newLine_ANSI_UART
000000e7	A1604000		pull	DAR					; restore DAR
000000e8	A1804000		pull	r8					; restore r8
000000e9	A1704000		pull	PC					; rts
	
;
; newLine_ANSI_UART - Print out a newLine_ANSI_UART (CR-LF)
;

newLine_ANSI_UART:
000000ea	A0408000		push	r8
000000eb	4280000A		lix		r8,0x0A				; Line Feed
000000ec	D400007C		bsr		writeANSI_UART	; Put the character to the screen
000000ed	4280000D		lix		r8,0x0D				; Carriage Return
000000ee	D400007A		bsr		writeANSI_UART		; Echo character back to the UART
000000ef	A1804000		pull	r8
000000f0	A1704000		pull	PC

;
; newLine_ANSI - Print out a newLine_ANSI (CR-LF)
;

newLine_ANSI:
000000f1	A0408000		push	r8
000000f2	4280000A		lix		r8,0x0A				; Line Feed
000000f3	D4000010		bsr		putCharToANSIScreen	; Put the character to the screen
000000f4	4280000D		lix		r8,0x0D				; Carriage Return
000000f5	D400000E		bsr		putCharToANSIScreen	; Echo character back to the UART
000000f6	A1804000		pull	r8
000000f7	A1704000		pull	PC

;
; clearANSIScreenAndUART - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearANSIScreenAndUART:
000000f8	A0408000		push	r8				; save r8
000000f9	4280001B		lix		r8,0x1b			; ESC
000000fa	D400006E		bsr		writeANSI_UART
000000fb	4280005B		lix		r8,0x5b			; [
000000fc	D400006C		bsr		writeANSI_UART
000000fd	42800032		lix		r8,0x32			; 2
000000fe	D400006A		bsr		writeANSI_UART
000000ff	4280004A		lix		r8,0x4A			; J
00000100	D4000068		bsr		writeANSI_UART
00000101	A1804000		pull	r8
00000102	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
00000103	A0409000		push	r9
00000104	A0405000		push	PAR
00000105	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
00000106	84905000		lpl		r9			; Read Status into r9
00000107	2B990002		andi	r9,r9,0x2
00000108	C3FFFFFE		bez 	waitScreenTxStat
00000109	42500001		lix 	PAR,0x1
0000010a	85508000		spl		r8			; echo the character
0000010b	A1504000		pull	PAR
0000010c	A1904000		pull	r9
0000010d	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
0000010e	A0408000		push	r8
0000010f	42800000		lix		r8,0			; first note is 0
00000110	D4000007		bsr 	setNote
00000111	D400000B		bsr		enableBuzzer
00000112	428000FA		lix		r8,250			; count for 1 Sec
00000113	D400001C		bsr		delay_mS		; call delay_ms
00000114	D4000011		bsr		disableBuzzer
00000115	A1804000		pull	r8
00000116	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
; returns note
;

setNote:
00000117	A0405000		push	PAR
00000118	42504000		lix		PAR,0x4000
00000119	85508000		spl		r8
0000011a	A1504000		pull	PAR
0000011b	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
0000011c	A0408000		push	r8
0000011d	A0405000		push	PAR
0000011e	42502800		lix		PAR,0x2800
0000011f	84805000		lpl		r8
00000120	29880010		ori		r8,r8,0x10
00000121	85508000		spl		r8
00000122	A1504000		pull	PAR
00000123	A1804000		pull	r8
00000124	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
00000125	A0408000		push	r8
00000126	A0405000		push	PAR
00000127	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
00000128	42502800		lix		PAR,0x2800
00000129	84805000		lpl		r8
0000012a	2B88FFEF		andi	r8,r8,0xffef
0000012b	85508000		spl		r8
0000012c	A1504000		pull	PAR
0000012d	A1804000		pull	r8
0000012e	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
0000012f	A0409000		push	r9
00000130	42503802		lix		PAR,0x3802		; address of the mSec counter
00000131	84905000		lpl		r9				; read the peripheral counter into r9
00000132	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
00000133	84905000		lpl		r9				; check the elapsed time counter
00000134	38389000		cmp		r8,r9
00000135	CCFFFFFE		blt		loop_delay_mS
00000136	A1904000		pull	r9
00000137	A1704000		pull	PC

;
; getPS2Char
; returns character received in r8
;

getPS2Char:
00000138	A0409000		push	r9
00000139	A0405000		push	PAR
0000013a	42501000		lix		PAR,0x1000	; PS/2 Status
waitPS2RxStat:
0000013b	84905000		lpl		r9			; Read Status into r9
0000013c	2B990001		andi	r9,r9,0x1
0000013d	C3FFFFFE		bez 	waitPS2RxStat
getCharFromPS2:
0000013e	42500800		lix 	PAR,0x0800
0000013f	84805000		lpl		r8
00000140	42501000		lix		PAR,0x1000	; PS/2 Status
whilePS2RxStat:
00000141	A1504000		pull	PAR
00000142	A1904000		pull	r9
00000143	A1704000		pull	PC

; waitReadPS2_UART
; wait for character from either 
;	the PS/2 keyboard and UART serial
; r8 = read character

waitReadPS2_UART:
00000144	A0405000		push	PAR
checkCharFromPS2:
00000145	42501000		lix		PAR,0x1000	; PS/2 Status
00000146	84805000		lpl		r8			; Read Status
00000147	2B880001		andi	r8,r8,0x1	; =1 when char received
00000148	C3000004		bez 	checkUARTStat
00000149	42500800		lix 	PAR,0x0800	; PS/2 Data
0000014a	84805000		lpl		r8
0000014b	C0000007		bra		gotPS2Char
checkUARTStat:
0000014c	42501800		lix		PAR,0x1800	; UART Status
0000014d	84805000		lpl		r8			; Read Status
0000014e	2B880001		andi 	r8,r8,0x1	; =1 when char received
0000014f	C3FFFFF6		bez 	checkCharFromPS2
00000150	42501801		lix 	PAR,0x1801	; UART Data
00000151	84805000		lpl		r8
gotPS2Char:
00000152	A1504000		pull	PAR
00000153	A1704000		pull	PC
	
; checkForCharAndDiscard - Check for a character in UART or PS/2
; Discard the character received
; return whether char was present (1) or no char was present (0)

checkForCharAndDiscard:
00000154	A0405000		push	PAR
00000155	42501000		lix		PAR,0x1000	; PS/2 Status
00000156	84805000		lpl		r8			; Read Status
00000157	2B880001		andi	r8,r8,0x1	; =1 when char received
00000158	C3000005		bez 	checkUARTStat2
00000159	42500800		lix 	PAR,0x0800	; PS/2 Data
0000015a	84805000		lpl		r8			; throw away char
0000015b	42800001		lix		r8,0x1
0000015c	C000000A		bra		gotChar
checkUARTStat2:
0000015d	42501800		lix		PAR,0x1800	; UART Status
0000015e	84805000		lpl		r8			; Read Status
0000015f	2B880001		andi 	r8,r8,0x1	; =1 when char received
00000160	C3000005		bez 	noCharReceived
00000161	42501801		lix 	PAR,0x1801	; UART Data
00000162	84805000		lpl		r8
00000163	42800001		lix		r8,1
00000164	C0000002		bra		gotChar
noCharReceived:
00000165	42800000		lix		r8,0
gotChar:
00000166	A1504000		pull	PAR
00000167	A1704000		pull	PC

; writeANSI_UART
; write out a character to both 
;	the ANSI screen and the UART

writeANSI_UART:
00000168	D4FFFF9B		bsr		putCharToANSIScreen
00000169	D4FFFF54		bsr		putCharToUART
0000016a	A1704000		pull	PC
