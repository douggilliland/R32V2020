;
; G001-Hex_Guess_ESP - Guess a number
; Number hex 0x00-0xff
;

banner:			.string "G001-Hex_Guess_ESP"
keyToStart:		.string "Any key to start"
guessString:	.string "Guess a hex number (0x00-0xFF) : "
; lineBuff is 80 characters long
lineBuff:		.string "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
syntaxError:	.string "Bad number error"
tooHigh:		.string "Your guess was too high"
tooLow:			.string "Your guess was too low"
notRight:		.string "Wrong guess"
gotItRight:		.string "Congratulations, you got it right"
numberOfGuesses:	.string "Number of Guesses : "

;
; Read a line from the UART and parse the line
;

main:
00000000	D40000EB		bsr		clearANSIScreenAndUART
00000001	D40000DC		bsr		newLine_ANSI_UART
00000002	42800000		lix		r8,banner.lower
00000003	D40000B8		bsr		printString_ANSI_UART
00000004	D40000D9		bsr		newLine_ANSI_UART
00000005	D40000D8		bsr		newLine_ANSI_UART
00000006	42800014		lix		r8,keyToStart.lower
00000007	D40000B4		bsr		printString_ANSI_UART
waitForKeyHit:
00000008	D400013F		bsr		checkForCharAndDiscard
00000009	39380000		cmpi	r8,0x00
0000000a	D1FFFFFE		beq		waitForKeyHit
0000000b	D4000016		bsr		randomNumber
0000000c	D40000D1		bsr		newLine_ANSI_UART
0000000d	D400004C		bsr		printLong
0000000e	D40000CF		bsr		newLine_ANSI_UART
0000000f	21F80000		addi	r15,r8,0				; r15 has the random number
notRightCode:
00000010	42800028		lix		r8,guessString.lower
00000011	D40000AA		bsr		printString_ANSI_UART
00000012	D400001A		bsr		getLine
00000013	4280004C		lix		r8,lineBuff.lower
00000014	D4000065		bsr		hexToSevenSeg
00000015	2B8800FF		andi	r8,r8,0xff
00000016	D4000043		bsr		printLong
00000017	D40000C6		bsr		newLine_ANSI_UART
	; compare r8 and r15
	; if r8=r15 then you are done
00000018	3838F000		cmp		r8,r15
00000019	D1000005		beq		guessedIt
0000001a	428000E4		lix		r8,notRight.lower
0000001b	D40000A0		bsr		printString_ANSI_UART
0000001c	D40000C1		bsr		newLine_ANSI_UART
0000001d	C0FFFFF3		bra		notRightCode
guessedIt:
0000001e	428000F0		lix		r8,gotItRight.lower
0000001f	D400009C		bsr		printString_ANSI_UART
endStop:
00000020	C0000000		bra		endStop

;
; randomNumber - Generate a random number - 8-bit value
; 0x3800 is the Oscillator clock counter
;

randomNumber:
00000021	A0405000		push	PAR
00000022	42503800		lix		PAR,0x3800
00000023	84805000		lpl		r8
00000024	2B8800FF		andi	r8,r8,0xff
00000025	A1504000		pull	PAR
00000026	A1704000		pull	PC
;
; printMenu - Print the menu
;

printBanner:
00000027	A0408000		push	r8
00000028	42800000		lix		r8,banner.lower
00000029	D4000092		bsr		printString_ANSI_UART
0000002a	A1804000		pull	r8
0000002b	A1704000		pull	PC

;
; getLine - Reads the UART and fills a buffer with the characters received
; r8 received character - Character received from the UART
; r9 is the input buffer length
; r10 used to test the backspace doesn't go past the start of the buffer
; DAR points to lineBuff current character position
;

getLine:
0000002c	A0408000		push	r8
0000002d	A0409000		push	r9
0000002e	A040A000		push	r10
0000002f	A0406000		push	DAR
00000030	4260004C		lix		DAR,lineBuff.lower	; DAR pointer = start of line buffer
00000031	4290004F		lix		r9,79				; number of chars in the line buffer
loopReadLine:
00000032	D4000105		bsr		waitReadPS2_UART		; Get a character from the UART
00000033	D4000128		bsr		writeANSI_UART		; Echo character back to the UART
00000034	3938000D		cmpi	r8,0x0D				; check if received char was end of line
00000035	D1000006		beq		gotEOL
00000036	3938007F		cmpi	r8,0x7F
00000037	D1000009		beq		gotBackspace
00000038	69608000		sdbp	r8
00000039	20992000		add		r9,r9,MINUS1
0000003a	C7FFFFF8		bnz		loopReadLine		; Next char would overflow
	; tbd add code for line too long	
gotEOL:
0000003b	4280000A		lix		r8,0x0A				; Echo line feed after CR
0000003c	D400011F		bsr		writeANSI_UART	; Put the character to the screen
0000003d	D4000073		bsr		putCharToUART		; Echo character back to the UART
0000003e	61600000		sdb		r0					; null at end of line read
0000003f	C0000007		bra		doneHandlingLine
gotBackspace:
00000040	20662000		add		DAR,DAR,MINUS1
00000041	42A0004C		lix		r10,lineBuff.lower	; r10 pointer = start of line buffer
00000042	383A6000		cmp		r10,DAR
00000043	CFFFFFEF		bgt		loopReadLine
00000044	216A0000		addi	DAR,r10,0
00000045	C0FFFFED		bra		loopReadLine
doneHandlingLine:
00000046	A1604000		pull	DAR
00000047	A1A04000		pull	r10
00000048	A1904000		pull	r9
00000049	A1804000		pull	r8
0000004a	A1704000		pull	PC

readSws:
0000004b	A0405000		push	PAR
0000004c	42502000		lix		PAR,0x2000	; Switches address
0000004d	84805000		lpl		r8			; Read switches into r9
0000004e	2B880FFF		andi	r8,r8,0xfff	; just the switches
0000004f	A1504000		pull	PAR
00000050	A1704000		pull	PC
	
;
; printANSICode - Send the ANSI Escape Sequence
; r8 - points to the string
; This routine supplies the ESC
;

printANSICode:
00000051	A0408000		push	r8
00000052	A0408000		push	r8
00000053	4280001B		lix		r8,0x1b			; ESC
00000054	D40000A2		bsr		putCharToANSIScreen
00000055	A1804000		pull	r8
00000056	D4000070		bsr		printString_ANSI
00000057	A1804000		pull	r8
00000058	A1704000		pull	PC

;
; printLong
; r8 contains the long value to print
;

printLong:
00000059	A0408000		push	r8
0000005a	A0409000		push	r9
0000005b	A040A000		push	r10
0000005c	A0408000		push	r8				; temporarily save r8
0000005d	42800030		lix		r8,0x30
0000005e	D40000FD		bsr		writeANSI_UART
0000005f	42800078		lix		r8,0x78
00000060	D40000FB		bsr		writeANSI_UART
00000061	A1804000		pull	r8				; restore r8
00000062	42900008		lix		r9,8			; loop counter
doNextPrintLong:
00000063	34808000		rol1	r8,r8
00000064	34808000		rol1	r8,r8
00000065	34808000		rol1	r8,r8
00000066	34808000		rol1	r8,r8
00000067	D4000007		bsr		printHexVal
00000068	23990001		subi	r9,r9,1
00000069	C7FFFFFA		bnz		doNextPrintLong
0000006a	A1A04000		pull	r10
0000006b	A1904000		pull	r9
0000006c	A1804000		pull	r8
0000006d	A1704000		pull	PC

;
; printHexVal
;

printHexVal:
0000006e	A0408000		push	r8
0000006f	2B88000F		andi	r8,r8,0xf
00000070	39380009		cmpi	r8,9
00000071	CC000004		blt		printHexLetter
00000072	21880030		addi	r8,r8,0x30
00000073	D40000E8		bsr		writeANSI_UART
00000074	C0000003		bra		donePrintHexVal
printHexLetter:
00000075	21880037		addi	r8,r8,0x37		; 'A' - 10
00000076	D40000E5		bsr		writeANSI_UART
donePrintHexVal:
00000077	A1804000		pull	r8
00000078	A1704000		pull	PC

; hexToSevenSeg - Convert a two ASCII digit value into a hex byte
; Passed: r8 points to the start of the hex string
; Returned: r8 contains the hex value of the string
; Put the byte to the Seven Segment Display
;

hexToSevenSeg:
00000079	A0409000		push	r9
0000007a	A0406000		push	DAR
0000007b	A0405000		push	PAR
0000007c	42900000		lix		r9,0
0000007d	20680000		add		DAR,r8,ZERO		; Address of lineBuff (passed into this routine)
0000007e	68806000		ldbp	r8
0000007f	D4000012		bsr		asciiToHex
00000080	2B88000F		andi	r8,r8,0xf
00000081	28998000		or		r9,r9,r8
00000082	30909000		sl1		r9,r9
00000083	30909000		sl1		r9,r9
00000084	30909000		sl1		r9,r9
00000085	30909000		sl1		r9,r9
	;add		DAR,DAR,ONE
00000086	60806000		ldb		r8
00000087	D400000A		bsr		asciiToHex
00000088	2B88000F		andi	r8,r8,0xf
00000089	28998000		or		r9,r9,r8
0000008a	42503000		lix		PAR,0x3000		; seven segment display
0000008b	85509000		spl		r9
0000008c	20890000		add		r8,r9,ZERO
0000008d	A1504000		pull	PAR
0000008e	A1604000		pull	DAR
0000008f	A1904000		pull	r9
00000090	A1704000		pull	PC

;
; asciiToHex - Convert a single ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
; Result is returned in r8
;	0x0-0xf - Legal Values
;	'DEAD' - Not hex character
;

asciiToHex:
00000091	39380066		cmpi	r8,0x66			; past 'f'
00000092	CC000011		blt		a2h_Error
00000093	39380030		cmpi	r8,0x30			; below '0'
00000094	CF00000F		bgt		a2h_Error
00000095	3938003A		cmpi	r8,0x3A			; '0' - '9'
00000096	CF000009		bgt		gotDigit
00000097	39380041		cmpi	r8,0x41			; ':' - '@'
00000098	CF00000B		bgt		a2h_Error
00000099	39380047		cmpi	r8,0x47			; 'A' - 'F'
0000009a	CC000007		blt		gotUpperLetter
0000009b	39380061		cmpi	r8,0x61			; 'G' - 'tick'
0000009c	CC000007		blt		a2h_Error
; Lower case letter
0000009d	23880057		subi	r8,r8,0x57
0000009e	C0000008		bra		doneConvA2H
; number 0-9
gotDigit:
0000009f	23880030		subi	r8,r8,0x30
000000a0	C0000006		bra		doneConvA2H
; A-F
gotUpperLetter:
000000a1	23880037		subi	r8,r8,0x37
000000a2	C0000004		bra		doneConvA2H
a2h_Error:
000000a3	428000A0		lix		r8,syntaxError.lower
000000a4	D4000017		bsr		printString_ANSI_UART
000000a5	4280DEAD		lix		r8,0xDEAD
doneConvA2H:
000000a6	A1704000		pull	PC

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
000000a7	A0405000		push	PAR
000000a8	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
000000a9	84805000		lpl		r8			; Read Status into r8
000000aa	2B880001		andi 	r8,r8,0x1
000000ab	C3FFFFFE		bez 	waitUartRxStat
000000ac	42501801		lix 	PAR,0x1801
000000ad	84805000		lpl		r8
000000ae	A1504000		pull	PAR
000000af	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
000000b0	A0409000		push	r9
000000b1	A0405000		push	PAR
000000b2	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
000000b3	84905000		lpl		r9			; Read Status into r9
000000b4	2B990002		andi	r9,r9,0x2
000000b5	C3FFFFFE		bez 	waitUartTxStat
000000b6	42501801		lix 	PAR,0x1801
000000b7	85508000		spl		r8			; echo the character
000000b8	A1504000		pull	PAR
000000b9	A1904000		pull	r9
000000ba	A1704000		pull	PC
	
;
; printString_ANSI_UART - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI_UART:
000000bb	A0408000		push	r8					; save r8
000000bc	A0406000		push	DAR
000000bd	20680000		add		DAR,r8,ZERO			; set the start of the string
nextChar:
000000be	68806000		ldbp	r8					; get the character01
000000bf	39380000		cmpi	r8,0x0				; Null terminated string
000000c0	D1000003		beq		donePrStr			; done if null
000000c1	D400009A		bsr		writeANSI_UART	; write out the character
000000c2	C0FFFFFC		bra		nextChar
donePrStr:
000000c3	A1604000		pull	DAR					; restore DAR
000000c4	A1804000		pull	r8					; restore r8
000000c5	A1704000		pull	PC					; rts
	
;
; printString_ANSI - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI:
000000c6	A0408000		push	r8					; save r8
000000c7	A0406000		push	DAR
000000c8	20680000		add		DAR,r8,ZERO			; set the start of the string
nextCharANSI:
000000c9	68806000		ldbp	r8					; get the character01
000000ca	39380000		cmpi	r8,0x0				; Null terminated string
000000cb	D1000003		beq		donePrANSIStr		; done if null
000000cc	D400002A		bsr		putCharToANSIScreen	; write out the character
000000cd	C0FFFFFC		bra		nextCharANSI
donePrANSIStr:
000000ce	A1604000		pull	DAR					; restore DAR
000000cf	A1804000		pull	r8					; restore r8
000000d0	A1704000		pull	PC					; rts
	
;
; printLine - Print a screen to the current screen position with CRLF at the end
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printLine:
000000d1	A0408000		push	r8					; save r8
000000d2	A0406000		push	DAR
000000d3	21680000		addi	DAR,r8,0x0			; set the start of the string
nextChar2:
000000d4	68806000		ldbp	r8					; get the character
000000d5	39380000		cmpi	r8,0x0				; Null terminated string
000000d6	D1000003		beq		donePrStr2			; done if null
000000d7	D4FFFFEF		bsr		printString_ANSI	; write out the character
000000d8	C0FFFFFC		bra		nextChar2
donePrStr2:
000000d9	D4000004		bsr		newLine_ANSI_UART
000000da	A1604000		pull	DAR					; restore DAR
000000db	A1804000		pull	r8					; restore r8
000000dc	A1704000		pull	PC					; rts
	
;
; newLine_ANSI_UART - Print out a newLine_ANSI_UART (CR-LF)
;

newLine_ANSI_UART:
000000dd	A0408000		push	r8
000000de	4280000A		lix		r8,0x0A				; Line Feed
000000df	D400007C		bsr		writeANSI_UART	; Put the character to the screen
000000e0	4280000D		lix		r8,0x0D				; Carriage Return
000000e1	D400007A		bsr		writeANSI_UART		; Echo character back to the UART
000000e2	A1804000		pull	r8
000000e3	A1704000		pull	PC

;
; newLine_ANSI - Print out a newLine_ANSI (CR-LF)
;

newLine_ANSI:
000000e4	A0408000		push	r8
000000e5	4280000A		lix		r8,0x0A				; Line Feed
000000e6	D4000010		bsr		putCharToANSIScreen	; Put the character to the screen
000000e7	4280000D		lix		r8,0x0D				; Carriage Return
000000e8	D400000E		bsr		putCharToANSIScreen	; Echo character back to the UART
000000e9	A1804000		pull	r8
000000ea	A1704000		pull	PC

;
; clearANSIScreenAndUART - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearANSIScreenAndUART:
000000eb	A0408000		push	r8				; save r8
000000ec	4280001B		lix		r8,0x1b			; ESC
000000ed	D400006E		bsr		writeANSI_UART
000000ee	4280005B		lix		r8,0x5b			; [
000000ef	D400006C		bsr		writeANSI_UART
000000f0	42800032		lix		r8,0x32			; 2
000000f1	D400006A		bsr		writeANSI_UART
000000f2	4280004A		lix		r8,0x4A			; J
000000f3	D4000068		bsr		writeANSI_UART
000000f4	A1804000		pull	r8
000000f5	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
000000f6	A0409000		push	r9
000000f7	A0405000		push	PAR
000000f8	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
000000f9	84905000		lpl		r9			; Read Status into r9
000000fa	2B990002		andi	r9,r9,0x2
000000fb	C3FFFFFE		bez 	waitScreenTxStat
000000fc	42500001		lix 	PAR,0x1
000000fd	85508000		spl		r8			; echo the character
000000fe	A1504000		pull	PAR
000000ff	A1904000		pull	r9
00000100	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
00000101	A0408000		push	r8
00000102	42800000		lix		r8,0			; first note is 0
00000103	D4000007		bsr 	setNote
00000104	D400000B		bsr		enableBuzzer
00000105	428000FA		lix		r8,250			; count for 1 Sec
00000106	D400001C		bsr		delay_mS		; call delay_ms
00000107	D4000011		bsr		disableBuzzer
00000108	A1804000		pull	r8
00000109	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
; returns note
;

setNote:
0000010a	A0405000		push	PAR
0000010b	42504000		lix		PAR,0x4000
0000010c	85508000		spl		r8
0000010d	A1504000		pull	PAR
0000010e	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
0000010f	A0408000		push	r8
00000110	A0405000		push	PAR
00000111	42502800		lix		PAR,0x2800
00000112	84805000		lpl		r8
00000113	29880010		ori		r8,r8,0x10
00000114	85508000		spl		r8
00000115	A1504000		pull	PAR
00000116	A1804000		pull	r8
00000117	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
00000118	A0408000		push	r8
00000119	A0405000		push	PAR
0000011a	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
0000011b	42502800		lix		PAR,0x2800
0000011c	84805000		lpl		r8
0000011d	2B88FFEF		andi	r8,r8,0xffef
0000011e	85508000		spl		r8
0000011f	A1504000		pull	PAR
00000120	A1804000		pull	r8
00000121	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
00000122	A0409000		push	r9
00000123	42503802		lix		PAR,0x3802		; address of the mSec counter
00000124	84905000		lpl		r9				; read the peripheral counter into r9
00000125	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
00000126	84905000		lpl		r9				; check the elapsed time counter
00000127	38389000		cmp		r8,r9
00000128	CCFFFFFE		blt		loop_delay_mS
00000129	A1904000		pull	r9
0000012a	A1704000		pull	PC

;
; getPS2Char
; returns character received in r8
;

getPS2Char:
0000012b	A0409000		push	r9
0000012c	A0405000		push	PAR
0000012d	42501000		lix		PAR,0x1000	; PS/2 Status
waitPS2RxStat:
0000012e	84905000		lpl		r9			; Read Status into r9
0000012f	2B990001		andi	r9,r9,0x1
00000130	C3FFFFFE		bez 	waitPS2RxStat
getCharFromPS2:
00000131	42500800		lix 	PAR,0x0800
00000132	84805000		lpl		r8
00000133	42501000		lix		PAR,0x1000	; PS/2 Status
whilePS2RxStat:
00000134	A1504000		pull	PAR
00000135	A1904000		pull	r9
00000136	A1704000		pull	PC

; waitReadPS2_UART
; wait for character from either 
;	the PS/2 keyboard and UART serial
; r8 = read character

waitReadPS2_UART:
00000137	A0405000		push	PAR
checkCharFromPS2:
00000138	42501000		lix		PAR,0x1000	; PS/2 Status
00000139	84805000		lpl		r8			; Read Status
0000013a	2B880001		andi	r8,r8,0x1	; =1 when char received
0000013b	C3000004		bez 	checkUARTStat
0000013c	42500800		lix 	PAR,0x0800	; PS/2 Data
0000013d	84805000		lpl		r8
0000013e	C0000007		bra		gotPS2Char
checkUARTStat:
0000013f	42501800		lix		PAR,0x1800	; UART Status
00000140	84805000		lpl		r8			; Read Status
00000141	2B880001		andi 	r8,r8,0x1	; =1 when char received
00000142	C3FFFFF6		bez 	checkCharFromPS2
00000143	42501801		lix 	PAR,0x1801	; UART Data
00000144	84805000		lpl		r8
gotPS2Char:
00000145	A1504000		pull	PAR
00000146	A1704000		pull	PC
	
; checkForCharAndDiscard - Check for a character in UART or PS/2
; Discard the character received
; return whether char was present (1) or no char was present (0)

checkForCharAndDiscard:
00000147	A0405000		push	PAR
00000148	42501000		lix		PAR,0x1000	; PS/2 Status
00000149	84805000		lpl		r8			; Read Status
0000014a	2B880001		andi	r8,r8,0x1	; =1 when char received
0000014b	C3000005		bez 	checkUARTStat2
0000014c	42500800		lix 	PAR,0x0800	; PS/2 Data
0000014d	84805000		lpl		r8			; throw away char
0000014e	42800001		lix		r8,0x1
0000014f	C000000A		bra		gotChar
checkUARTStat2:
00000150	42501800		lix		PAR,0x1800	; UART Status
00000151	84805000		lpl		r8			; Read Status
00000152	2B880001		andi 	r8,r8,0x1	; =1 when char received
00000153	C3000005		bez 	noCharReceived
00000154	42501801		lix 	PAR,0x1801	; UART Data
00000155	84805000		lpl		r8
00000156	42800001		lix		r8,1
00000157	C0000002		bra		gotChar
noCharReceived:
00000158	42800000		lix		r8,0
gotChar:
00000159	A1504000		pull	PAR
0000015a	A1704000		pull	PC

; writeANSI_UART
; write out a character to both 
;	the ANSI screen and the UART

writeANSI_UART:
0000015b	D4FFFF9B		bsr		putCharToANSIScreen
0000015c	D4FFFF54		bsr		putCharToUART
0000015d	A1704000		pull	PC
