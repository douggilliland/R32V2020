; Tetris game
; This program requires a build of R32V2020 that has memory mapped video
; Example: R32V2020_Build_V002_A4_CE6_MMVid

title: 	.string "FakeTris x.x1"
score:	.string "Score : "
scoreValue:	.long	0x0

; Tetris shapes drawn from
;	https://raw.githubusercontent.com/OneLoneCoder/videos/master/OneLoneCoder_Tetris.cpp

tetrisShape0:	.string "..X...X...X...X."
tetrisShape1:	.string "..X..XX...X....."
tetrisShape2:	.string ".....XX..XX....."
tetrisShape3:	.string "..X..XX..X......"
tetrisShape4:	.string ".X...XX...X....."
tetrisShape5:	.string ".X...X...XX....."
tetrisShape16:	.string "..X...X..XX....."

start:
00000000	D40000E2	bsr		clearScreen_mmXGA
; Print the title
00000001	42800000	lix		r8,0x0000			; Upper left corner of screen
00000002	D40000C3	bsr		setScreenCharLoc_mmXGA
00000003	42800000	lix		r8,title.lower		; clear the data memory addr pointer
00000004	D4000074	bsr		printString_mmXGA
; Print the score string
00000005	42800200	lix		r8,0x0200			; Two lines down on left side of screen
00000006	D40000BF	bsr		setScreenCharLoc_mmXGA
00000007	42800010	lix		r8,score.lower		; clear the data memory addr pointer
00000008	D4000070	bsr		printString_mmXGA
; Print the initial score value
00000009	D400005F	bsr		printScore_tetris
; Draw the border of the playfield
0000000a	D400002F	bsr		drawPlayfieldBorder
; Draw the first sprite
0000000b	4280011F	lix		r8,0x011f			; location 31,1
0000000c	D40000F8	bsr		setSpriteLocation_mmXGA
0000000d	428000E2	lix		r8,0xE2				; circle char for now
0000000e	D40000E4	bsr		putSprite_mmXGA		; put sprite on screen
0000000f	428003E8	lix		r8,1000
00000010	C000014A	bra		setTimer_mS
00000011	4260001C	lix		DAR,scoreValue.lower
00000012	42800000	lix		r8,0x0
00000013	65608000	sdl		r8
loopProg:
00000014	D4000156	bsr		checkForCountReached_mS
00000015	39380001	cmpi	r8,1
00000016	D1000058	beq		newScore
00000017	D400012F	bsr		checkGetStat_PS2
00000018	2B88005F	andi	r8,r8,0x5F			; upper to lower
00000019	39380041	cmpi	r8,0x41				; 'a'
0000001a	D1000004	beq		moveSpriteLeft
0000001b	39380044	cmpi	r8,0x44				; 'd'
0000001c	D100000E	beq		moveSpriteRight
0000001d	C0FFFFF7	bra		loopProg			; not an 'a' or 'd'
moveSpriteLeft:
0000001e	426000C0	lix		DAR,currentSpriteX.lower
0000001f	64906000	ldl		r9
00000020	39390015	cmpi	r9,0x15				; check to see if already at left edge
00000021	D1FFFFF3	beq		loopProg
00000022	42800020	lix		r8,0x20				; write out a space to erase sprite
00000023	D40000CF	bsr		putSprite_mmXGA
00000024	23550001	subi	PAR,PAR,1			; go left
00000025	428000E2	lix		r8,0xE2				; circle character (for now)
00000026	64906000	ldl		r9
00000027	23990001	subi	r9,r9,1
00000028	65609000	sdl		r9
00000029	C000000C	bra		storeToScreen
moveSpriteRight:
0000002a	426000C0	lix		DAR,currentSpriteX.lower
0000002b	64906000	ldl		r9
0000002c	39390028	cmpi	r9,0x28				; check to see if already at edge
0000002d	D1FFFFE7	beq		loopProg
0000002e	42800020	lix		r8,0x20				; write out a space to erase sprite
0000002f	D40000C3	bsr		putSprite_mmXGA
00000030	21550001	addi	PAR,PAR,1			; go right
00000031	428000E2	lix		r8,0xE2				; circle character (for now)
00000032	64906000	ldl		r9
00000033	21990001	addi	r9,r9,1
00000034	65609000	sdl		r9
storeToScreen:
00000035	D40000BD	bsr		putSprite_mmXGA
00000036	42800064	lix		r8,100				; wait for a bit
00000037	D400011A	bsr		delay_mS
00000038	C0FFFFDC	bra		loopProg

;
; drawBorder - draw the border around the FakeTis window
;

drawPlayfieldBorder:
00000039	A0408000	push	r8
0000003a	A0409000	push	r9
; Draw upper left corner
0000003b	42800014	lix		r8,0x0014			; location 20,0
0000003c	31808000	sl8		r8,r8				; shift over the address
0000003d	218800CC	addi	r8,r8,0xCC			; upper left corner chars
0000003e	D4000095	bsr		putCharXY_mmXGA		; put upper left corner on screen
0000003f	21550001	addi	PAR,PAR,1			; get ready to draw horizontal line
; Draw top horizontal line
00000040	42900014	lix		r9,0x14				; 20 chars wide top line
anotherHorizTop:
00000041	42800083	lix		r8,0x83				; horizontal line
00000042	89508000	spbp	r8
00000043	23990001	subi	r9,r9,1
00000044	C7FFFFFD	bnz		anotherHorizTop
; Draw upper right corner
00000045	428000CD	lix		r8,0xCD				; upper right corner
00000046	81508000	spb		r8
; Draw vertical left side
00000047	4290001E	lix		r9,0x1E				; 30 rows high
00000048	42800114	lix		r8,0x0114			; location 20,1
00000049	31808000	sl8		r8,r8
0000004a	2188008C	addi	r8,r8,0x8C			; vertical line left side
0000004b	D4000088	bsr		putCharXY_mmXGA		; put first vertical bar to the screen
anotherLeftVert:
0000004c	81508000	spb		r8					; write character to the screen
0000004d	21550040	addi	PAR,PAR,0x40
0000004e	23990001	subi	r9,r9,1
0000004f	C7FFFFFD	bnz		anotherLeftVert
; Draw vertical right side
00000050	4290001E	lix		r9,0x1E				; 30 rows high
00000051	42800129	lix		r8,0x0129			; location 41,1
00000052	31808000	sl8		r8,r8
00000053	2188008B	addi	r8,r8,0x8B			; vertical line right side
00000054	D400007F	bsr		putCharXY_mmXGA		; put first vertical bar to the screen
anotherLeftVert2:
00000055	81508000	spb		r8
00000056	21550040	addi	PAR,PAR,0x40
00000057	23990001	subi	r9,r9,1
00000058	C7FFFFFD	bnz		anotherLeftVert2
; Draw left bottom corner
00000059	42801F14	lix		r8,0x1F14			; location 20,31
0000005a	31808000	sl8		r8,r8				; shift over the address
0000005b	218800CB	addi	r8,r8,0xCB			; lower left corner
0000005c	D4000077	bsr		putCharXY_mmXGA		; put bottom left corner on screen
0000005d	21550001	addi	PAR,PAR,1			; get ready to draw horizontal line
0000005e	42900014	lix		r9,0x14				; 20 chars wide
anotherHorizBottom:
0000005f	42800084	lix		r8,0x84				; horizontal line
00000060	89508000	spbp	r8
00000061	23990001	subi	r9,r9,1
00000062	C7FFFFFD	bnz		anotherHorizBottom
00000063	428000CE	lix		r8,0xCE				; upper right corner
00000064	89508000	spbp	r8
00000065	A1904000	pull	r9
00000066	A1804000	pull	r8
00000067	A1704000	pull	PC

;
; printScore_tetris
;

printScore_tetris:
00000068	42800208	lix		r8,0x0208			; print the score at 8,2
00000069	D400005C	bsr		setScreenCharLoc_mmXGA
0000006a	4260001C	lix		DAR,scoreValue.lower
0000006b	64806000	ldl		r8
0000006c	D400001A	bsr		printLong_mmXGA
0000006d	A1704000	pull	PC

;
; printScore_tetris
;

newScore:
0000006e	A0406000	push	DAR
0000006f	A0408000	push	r8
00000070	4260001C	lix		DAR,scoreValue.lower
00000071	64806000	ldl		r8
00000072	21880001	addi	r8,r8,1
00000073	65608000	sdl		r8
00000074	D4FFFFF4	bsr		printScore_tetris
00000075	A1804000	pull	r8
00000076	A1604000	pull	DAR
00000077	A1704000	pull	PC

; Routines that handle output to Memory Mapped XGA display
; Character set
;	https://github.com/douggilliland/R32V2020/wiki/Memory-Mapped-Display#Extended_Character_Set_Bitmaps

memMappedXGAConstants:	.string "MMX"
screenX:		.LONG	0x0
screenY:		.LONG	0x0
;screenAdr:		.LONG	0x0

;
; printString_mmXGA - Print a string to the screen
; String will wrap around to next line if it goes past the right side
; Minimal protection against going off the scree (just won't print)
; r8 points to the string in data memory
; Globals
;	screenX, screenY - print the first character here
;

printString_mmXGA:
00000078	A0408000	push	r8					; Not required but keeps string pointer the same on return
00000079	A0406000	push	DAR
0000007a	21680000	addi	DAR,r8,0x0			; Set DAR to start of the string
0000007b	D400003D	bsr		setParToCurrentCharLoc_mmXGA
printStringGetChar:
0000007c	68806000	ldbp	r8					; get the character
0000007d	39380000	cmpi	r8,0
0000007e	D1000005	beq		donePrintingString
0000007f	39350800	cmpi	PAR,0x0800			; next character would be off the screen so don't print it
00000080	D1000003	beq		donePrintingString
00000081	89508000	spbp	r8
00000082	C0FFFFFA	bra		printStringGetChar
donePrintingString:
00000083	A1604000	pull	DAR
00000084	A1804000	pull	r8
00000085	A1704000	pull	PC

;
; printLong_mmXGA - Print a long to the screen
; r8 - value to print to the screen
;

printLong_mmXGA:
00000086	A0408000	push	r8
00000087	A0409000	push	r9
00000088	A0408000	push	r8				; temporarily save r8
00000089	42800030	lix		r8,0x30			; print 0x
0000008a	D400001A	bsr		putChar_mmXGA
0000008b	42800078	lix		r8,0x78
0000008c	D4000018	bsr		putChar_mmXGA
0000008d	A1804000	pull	r8				; restore r8
0000008e	42900008	lix		r9,8			; loop counter
doNextprintLong_mmXGA:		; get nibble
0000008f	34808000	rol1	r8,r8
00000090	34808000	rol1	r8,r8
00000091	34808000	rol1	r8,r8
00000092	34808000	rol1	r8,r8
00000093	D4000006	bsr		printHexVal_mmXGA
00000094	23990001	subi	r9,r9,1
00000095	C7FFFFFA	bnz		doNextprintLong_mmXGA
00000096	A1904000	pull	r9
00000097	A1804000	pull	r8
00000098	A1704000	pull	PC

;
; printHexVal_mmXGA
;

printHexVal_mmXGA:
00000099	A0408000	push	r8
0000009a	2B88000F	andi	r8,r8,0xf
0000009b	39380009	cmpi	r8,9
0000009c	CC000004	blt		printHexLetter_mmXGA
0000009d	21880030	addi	r8,r8,0x30
0000009e	D4000006	bsr		putChar_mmXGA
0000009f	C0000003	bra		donePrintHexVal_mmXGA
printHexLetter_mmXGA:
000000a0	21880037	addi	r8,r8,0x37		; 'A' - 10
000000a1	D4000003	bsr		putChar_mmXGA
donePrintHexVal_mmXGA:
000000a2	A1804000	pull	r8
000000a3	A1704000	pull	PC

;
; putChar_mmXGA - Put a character to the screen
; r8 = Character to put to screen
; Globals:
;	screenX, screenY location of the place to put the character
;

putChar_mmXGA:
000000a4	A0409000	push	r9
000000a5	A040A000	push	r10
000000a6	A0405000	push	PAR
000000a7	A0406000	push	DAR
000000a8	426000B0	lix		DAR,screenX.lower	; X location
000000a9	64906000	ldl		r9
000000aa	426000B4	lix		DAR,screenY.lower	; Y location
000000ab	64A06000	ldl		r10
000000ac	25AA0040	muli	r10,r10,0x40
000000ad	205A9000	add		PAR,r10,r9			; PAR points to screen location
000000ae	81508000	spb		r8					; write character to Display
000000af	426000B0	lix		DAR,screenX.lower	; X location
000000b0	64906000	ldl		r9
000000b1	21990001	addi	r9,r9,1
; should compare to see if end of line and increment y taking care to not overflow bottom of screen
000000b2	65609000	sdl		r9
000000b3	A1604000	pull	DAR
000000b4	A1504000	pull	PAR
000000b5	A1A04000	pull	r10
000000b6	A1904000	pull	r9
000000b7	A1704000	pull	PC

;
; setParToCurrentCharLoc_mmXGA - Sets PAR to the current character location
; Globals
;	screenX, screenY - print the first character here
;

setParToCurrentCharLoc_mmXGA:
000000b8	A0408000	push	r8
000000b9	A0409000	push	r9
000000ba	A0406000	push	DAR
000000bb	426000B0	lix		DAR,screenX.lower
000000bc	64806000	ldl		r8
000000bd	426000B4	lix		DAR,screenY.lower
000000be	64906000	ldl		r9					; currentSpriteY is the next location
000000bf	25990040	muli	r9,r9,0x40			; 64 chars wide screen
000000c0	20589000	add		PAR,r8,r9
000000c1	A1604000	pull	DAR
000000c2	A1904000	pull	r9
000000c3	A1804000	pull	r8
000000c4	A1704000	pull	PC

;
; setScreenCharLoc_mmXGA
; r8 - location
; 	d8..d15 = position Y
;	d8..d7 = position X
;

setScreenCharLoc_mmXGA:
000000c5	A0408000	push	r8
000000c6	A0409000	push	r9
000000c7	A0406000	push	DAR
000000c8	33908000	sr8		r9,r8
000000c9	2B9900FF	andi	r9,r9,0x0ff
000000ca	2B8800FF	andi	r8,r8,0x0ff
000000cb	426000B0	lix		DAR,screenX.lower
000000cc	65608000	sdl		r8
000000cd	426000B4	lix		DAR,screenY.lower
000000ce	65609000	sdl		r9
000000cf	A1604000	pull	DAR
000000d0	A1904000	pull	r9
000000d1	A1804000	pull	r8
000000d2	A1704000	pull	PC

;
; putCharXY_mmXGA - Put a single character to the Memory Mapped XGA screen at a X,Y location
; r8 = X,Y,Character to put to screen
; 	d16..d23 = position Y
;	d8..d15 = position X
;	d0..d7 = character to write
; Registers used:
;	r8 - character to write (after processing)
;	r9 - X location
;	r10 - Y location
; Globals:
;	screenX, screenY location of the place to put the character
; Leaves PAR at character location
;

putCharXY_mmXGA:
000000d3	A040A000	push	r10
000000d4	A0409000	push	r9
;	push	PAR
000000d5	33908000	sr8		r9,r8				; r9 has the X location
000000d6	2B8800FF	andi	r8,r8,0xff			; mask off address bits leaving character
000000d7	33A09000	sr8		r10,r9				; r10 has the Y location
000000d8	2BAA00FF	andi	r10,r10,0xff		; mask off any extra bits
000000d9	2B9900FF	andi	r9,r9,0xff			; mask off any extra bits
000000da	255A0040	muli	PAR,r10,0x40
000000db	20559000	add		PAR,PAR,r9
000000dc	81508000	spb		r8					; write character to Display
;	pull	PAR
000000dd	A1904000	pull	r9
000000de	A1A04000	pull	r10
000000df	A1704000	pull	PC

;
; putCharIncrPAR_mmXGA - Put a character to the screen and increment PAR
; Useful for filling line with stuff
; r8 = Character to put to screen
; PAR = set to the current screen location
;

putCharIncrPAR_mmXGA:
000000e0	89508000	spbp	r8			; write character to peripheral bus
000000e1	A1704000	pull	PC

;
; clearScreen_mmXGA - "Clear" the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Performance:
;	Loop writes 4 locations in 6 instructions
;	80 nS/instruction * 6 instructions = 480 nS
;	512 times through loop
;	245.76 uS screen clear time
;

clearScreen_mmXGA:
000000e2	A0405000	push	PAR
000000e3	A0409000	push	r9
000000e4	A0408000	push	r8
000000e5	42500000	lix 	par,0x0000	; start of screen character memory
000000e6	42800020	lix		r8,0x20		; fill with spaces
000000e7	42900200	lix 	r9,0x200	; loopCount	(2K)
looper:
000000e8	89508000	spbp 	r8			; put the character to the screen
000000e9	89508000	spbp 	r8			; put the character to the screen
000000ea	89508000	spbp 	r8			; put the character to the screen
000000eb	89508000	spbp 	r8			; put the character to the screen
000000ec	23990001	subi 	r9,r9,1		; decrement character counter
000000ed	C7FFFFFB	bnz		looper		; loop until complete
000000ee	A1804000	pull	r8
000000ef	A1904000	pull	r9
000000f0	A1504000	pull	PAR
000000f1	A1704000	pull	PC
; Sprites handler

spritesStartHere:	.string "Sprites"
currentSpriteX:	.LONG	0x0
currentSpriteY:	.LONG	0x0
spriteMemLoc:	.LONG	0x0

;
; putSprite_mmXGA - Put a sprite character to the screen
; r8 = Sprite to put to screen
; Globals:
;	currentSpriteX, currentSpriteY location of the place to put the character
;

putSprite_mmXGA:
000000f2	A0409000	push	r9
000000f3	A040A000	push	r10
000000f4	A0405000	push	PAR
000000f5	A0406000	push	DAR
000000f6	426000C0	lix		DAR,currentSpriteX.lower
000000f7	64906000	ldl		r9					; X location
000000f8	426000C4	lix		DAR,currentSpriteY.lower
000000f9	64A06000	ldl		r10					; Y location
000000fa	25AA0040	muli	r10,r10,0x40		; 64 column offset
000000fb	205A9000	add		PAR,r10,r9			; PAR points to screen location
000000fc	81508000	spb		r8					; write character to Display
000000fd	426000C8	lix		DAR,spriteMemLoc.lower
000000fe	65605000	sdl		PAR
000000ff	A1604000	pull	DAR
00000100	A1504000	pull	PAR
00000101	A1A04000	pull	r10
00000102	A1904000	pull	r9
00000103	A1704000	pull	PC

;
; setSpriteLocation_mmXGA
; Sets the variables currentSpriteX and currentSpriteY in data memory
; r8 - screen location
;	d0-d7 = X coordinate
;	d8-d15 = Y coordinate
;

setSpriteLocation_mmXGA:
00000104	A0406000	push	DAR
00000105	A0409000	push	r9
00000106	33908000	sr8		r9,r8
00000107	2B9900FF	andi	r9,r9,0x00ff		; Y
00000108	2B8800FF	andi	r8,r8,0x00ff		; X
00000109	426000C0	lix		DAR,currentSpriteX.lower
0000010a	65608000	sdl		r8					; X location
0000010b	426000C4	lix		DAR,currentSpriteY.lower
0000010c	65609000	sdl		r9					; Y location
0000010d	A1904000	pull	r9
0000010e	A1604000	pull	DAR
0000010f	A1704000	pull	PC

;--------------------------------------------------------------------
; ps2.asm - Functions to read the PS/2 keyboard
;
; Address	Function
; x0800 	Latched Keyboard Data
; x0801 	Latched Keyboard Status
; x0802 	Polled Keyboard Data
; x0803 	Polled Keyboard Status
;
; getChar_PS2
; returns character received in r8
;

getChar_PS2:
00000110	A0405000	push	PAR
00000111	42500801	lix		PAR,0x0801	; PS/2 Status
waitPS2RxStat:
00000112	84805000	lpl		r8			; Read Status into r9
00000113	2B880001	andi 	r8,r8,1
00000114	C3FFFFFE	bez 	waitPS2RxStat
getCharFromPS2:
00000115	42500800	lix 	PAR,0x0800
00000116	84805000	lpl		r8
whilePS2RxStat:
00000117	A1504000	pull	PAR
00000118	A1704000	pull	PC

; waitReadPS2_UART
; wait for character from either
;	the PS/2 keyboard or the UART serial
; r8 = read character

waitReadPS2_UART:
00000119	A0405000	push	PAR
checkCharFromPS2:
0000011a	42500801	lix		PAR,0x0801	; PS/2 Status
0000011b	84805000	lpl		r8			; Read Status
0000011c	2B880001	andi	r8,r8,0x1	; =1 when char received
0000011d	C3000004	bez 	checkUARTStat
0000011e	42500800	lix 	PAR,0x0800	; PS/2 Data
0000011f	84805000	lpl		r8
00000120	C0000007	bra		gotPS2Char
checkUARTStat:
00000121	42501800	lix		PAR,0x1800	; UART Status
00000122	84805000	lpl		r8			; Read Status
00000123	2B880001	andi 	r8,r8,0x1	; =1 when char received
00000124	C3FFFFF6	bez 	checkCharFromPS2
00000125	42501801	lix 	PAR,0x1801	; UART Data
00000126	84805000	lpl		r8
gotPS2Char:
00000127	A1504000	pull	PAR
00000128	A1704000	pull	PC

; checkForCharAndDiscard - Check for a character in UART or PS/2
; Discard the character received
; return whether char was present (1) or no char was present (0)

checkForCharAndDiscard:
00000129	A0405000	push	PAR
0000012a	42500801	lix		PAR,0x0801	; PS/2 Status
0000012b	84805000	lpl		r8			; Read Status
0000012c	2B880001	andi	r8,r8,0x1	; =1 when char received
0000012d	C3000005	bez 	checkUARTStat2
0000012e	42500800	lix 	PAR,0x0800	; PS/2 Data
0000012f	84805000	lpl		r8			; throw away char
00000130	42800001	lix		r8,0x1
00000131	C000000A	bra		gotChar
checkUARTStat2:
00000132	42501800	lix		PAR,0x1800	; UART Status
00000133	84805000	lpl		r8			; Read Status
00000134	2B880001	andi 	r8,r8,0x1	; =1 when char received
00000135	C3000005	bez 	noCharReceived
00000136	42501801	lix 	PAR,0x1801	; UART Data
00000137	84805000	lpl		r8
00000138	42800001	lix		r8,1
00000139	C0000002	bra		gotChar
noCharReceived:
0000013a	42800000	lix		r8,0
gotChar:
0000013b	A1504000	pull	PAR
0000013c	A1704000	pull	PC

;
; waitCharPolled_PS2 - Check the polled character interface
; wait for a character
; return when a character is present
; returns character received in r8
;

waitCharPolled_PS2:
0000013d	A0405000	push	PAR
0000013e	42500803	lix		PAR,0x0803	; PS/2 Status
waitPS2RxStatPolled:
0000013f	84805000	lpl		r8			; Read Status into r8
00000140	2B880001	andi 	r8,r8,0x1
00000141	C3FFFFFE	bez 	waitPS2RxStatPolled
getCharFromPS2Polled:
00000142	42500802	lix 	PAR,0x0802
00000143	84805000	lpl		r8
whilePS2RxStatPolled:
00000144	A1504000	pull	PAR
00000145	A1704000	pull	PC

;
; checkGetStat_PS2 - Checks the polling status
; Polled interface is active while the keyboard key is pressed
; returns
;	-1 if there is no character,
;	character if there is a character
;

checkGetStat_PS2:
00000146	A0405000	push	PAR
00000147	42500803	lix		PAR,0x0803	; PS/2 Status
00000148	84805000	lpl		r8			; Read Status into r8
00000149	2B880001	andi	r8,r8,0x1
0000014a	C3000004	bez		charNotPresent
0000014b	42500802	lix		PAR,0x0802
0000014c	84805000	lpl		r8
0000014d	C0000002	bra		gotCharIn
charNotPresent:
0000014e	20802000	add		r8,ZERO,MINUS1
gotCharIn:
0000014f	A1504000	pull	PAR
00000150	A1704000	pull	PC
;--------------------------------------------------------------------
; timers.asm

longTimeWait:	.long 0x0
longTimeDelta:	.long 0x0

; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
00000151	A0409000	push	r9
00000152	42503802	lix		PAR,0x3802		; address of the mSec counter
00000153	84905000	lpl		r9				; read the peripheral counter into r9
00000154	20898000	add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
00000155	84905000	lpl		r9				; check the elapsed time counter
00000156	38389000	cmp		r8,r9
00000157	CCFFFFFE	blt		loop_delay_mS
00000158	A1904000	pull	r9
00000159	A1704000	pull	PC

;
; setTimer_mS - sets a software timer in mSec from the current mSec time
; Non-blocking routine
; Wrap around problem at 2^32 mS (every 4.3 million seconds = 49 days)
; Needs to be checked from checkForCountReached_mS routine
; longTimeWait - global that contains the terminal count time
; r8 is the number of mS until the counter expires
;

setTimer_mS:
0000015a	A0408000	push	r8
0000015b	A0409000	push	r9
0000015c	A0406000	push	DAR
0000015d	A0405000	push	PAR
0000015e	426000D0	lix		DAR,longTimeDelta.lower
0000015f	65608000	sdl		r8				; keep the delta time - might use it again
00000160	42503802	lix		PAR,0x3802		; address of the mSec counter
00000161	84905000	lpl		r9				; read the peripheral counter into r9
00000162	20898000	add		r8,r9,r8		; terminal counter to wait until is in r8
00000163	426000CC	lix		DAR,longTimeWait.lower
00000164	65608000	sdl		r8
00000165	A1504000	pull	PAR
00000166	A1604000	pull	DAR
00000167	A1904000	pull	r9
00000168	A1804000	pull	r8
00000169	A1704000	pull	PC

;
; checkForCountReached_mS
; Presumptively reloads the terminal count for the next cycle
;	Can be over-riden by calling setTimer_mS again
; Returns
; r8 - 0 = Counter is not yet expired
;      1 = Counter is expired
;

checkForCountReached_mS:
0000016a	A0409000	push	r9
0000016b	A0406000	push	DAR
0000016c	A0405000	push	PAR
0000016d	426000CC	lix		DAR,longTimeWait.lower
0000016e	64806000	ldl		r8
0000016f	42503802	lix		PAR,0x3802		; address of the mSec counter
00000170	84905000	lpl		r9				; read the peripheral counter into r9
00000171	38398000	cmp		r9,r8
00000172	CF000008	bgt		returnTimerNotYet
00000173	426000D0	lix		DAR,longTimeDelta.lower
00000174	64806000	ldl		r8				;  See, we did use the delta time again
00000175	20889000	add		r8,r8,r9
00000176	426000CC	lix		DAR,longTimeWait.lower
00000177	65608000	sdl		r8
00000178	42800001	lix		r8,0x1
00000179	C0000002	bra		timerDone
returnTimerNotYet:
0000017a	42800000	lix		r8,0x0
timerDone:
0000017b	A1504000	pull	PAR
0000017c	A1604000	pull	DAR
0000017d	A1904000	pull	r9
0000017e	A1704000	pull	PC

;
; delay_uS - delay for the number of uSecs
; pass mSec delay in r8
; Uses routine uses r9 (saved and restored)
;

delay_uS:
0000017f	A0409000	push	r9
00000180	A0405000	push	PAR
00000181	42503801	lix		PAR,0x3801		; address of the uSec counter
00000182	84905000	lpl		r9				; read the peripheral counter into r9
00000183	20898000	add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_uS:
00000184	84905000	lpl		r9				; check the elapsed time counter
00000185	38389000	cmp		r8,r9
00000186	CCFFFFFE	blt		loop_delay_uS
00000187	A1504000	pull	PAR
00000188	A1904000	pull	r9
00000189	A1704000	pull	PC

