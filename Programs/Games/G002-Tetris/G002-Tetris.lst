; Read PS/2 keyboard character and put it to the Memory Mapped XGA Screen
; This program requires a build of R32V2020 that has memory mapped video
; Example: R32V2020_Build_V002_A4_CE6_MMVid

prompt: .string "FakeTris 0.01"

start:
00000000	D4000020	bsr		clearScreen_mmXGA
00000001	42500000	lix		par,0				; start of screen
00000002	42600000	lix		dar,prompt.lower	; clear the data memory addr pointer
readDataMemory:
00000003	68806000	ldbp	r8					; get the character
00000004	39380000	cmpi	r8,0
00000005	D1000003	beq		doneWithPrompt
00000006	D4000027	bsr		putChar_mmXGA
00000007	C0FFFFFC	bra		readDataMemory
doneWithPrompt:
00000008	D4000004	bsr		drawTetrisBorder
loopProg:
00000009	D4000038	bsr		getChar_PS2
storeToScreen:
0000000a	D4000023	bsr		putChar_mmXGA
0000000b	C0FFFFFE	bra		loopProg

;
; drawBorder - draw the border around the FakeTis window
;

drawTetrisBorder:
0000000c	A0408000	push	r8
0000000d	A0409000	push	r9
0000000e	42800014	lix		r8,0x0014			; location 20,0
0000000f	D4000020	bsr		setScreenLocation_mmXGA
00000010	428000CC	lix		r8,0xCC				; upper left corner
00000011	D400001C	bsr		putChar_mmXGA
00000012	42900014	lix		r9,0x14				; 20 chars wide
anotherHorizTop:
00000013	42800083	lix		r8,0x83				; horizontal line
00000014	D4000019	bsr		putChar_mmXGA
00000015	23990001	subi	r9,r9,1
00000016	C7FFFFFD	bnz		anotherHorizTop
00000017	428000CD	lix		r8,0xCD				; upper left corner
00000018	D4000015	bsr		putChar_mmXGA
00000019	42800114	lix		r8,0x0114			; location 20,1
0000001a	D4000015	bsr		setScreenLocation_mmXGA
0000001b	4280008C	lix		r8,0x8c				; vertical line
0000001c	D4000011	bsr		putChar_mmXGA

0000001d	A1904000	pull	r9
0000001e	A1804000	pull	r8
0000001f	A1704000	pull	PC

screenX:	.LONG	0x0
screenY:	.LONG	0x0
screenAdr:	.LONG	0x0
;
; clearScreen_XGA - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
;

clearScreen_mmXGA:
00000020	A0405000	push	PAR
00000021	A0409000	push	r9
00000022	A0408000	push	r8
00000023	42500000	lix 	par,0x0000	; start of screen character memory
00000024	42800020	lix		r8,0x20		; fill with spaces
00000025	42900800	lix 	r9,0x800	; loopCount	(2K)
looper:
00000026	89508000	spbp 	r8			; put the character to the screen
00000027	23990001	subi 	r9,r9,1		; decrement character counter
00000028	C7FFFFFE	bnz		looper		; loop until complete
00000029	A1804000	pull	r8
0000002a	A1904000	pull	r9
0000002b	A1504000	pull	PAR
0000002c	A1704000	pull	PC

;
; putChar_MemMapXGA - Put a character to the screen and increment the address
; r8 = Character to put to screen
; PAR = set to the current screen location
;

putChar_mmXGA:
0000002d	89508000	spbp	r8			; write character to peripheral bus
0000002e	A1704000	pull	PC

;
; setScreenLocation_XGA - Set PAR to a particular screen location
; Also sets the variables screenX and screenY
; r8 - screen location
;	d0-d7 = X coordinate
;	d8-d15 = Y coordinate
;

setScreenLocation_mmXGA:
0000002f	A0409000	push	r9
00000030	33908000	sr8		r9,r8
00000031	2B8800FF	andi	r8,r8,0x00ff
00000032	42600010	lix		DAR,screenX.lower
00000033	6D608000	sdlp	r8					; X location
00000034	6D609000	sdlp	r9					; Y location
00000035	25990050	muli	r9,r9,0x50			; location is Y*80+X
00000036	6D609000	sdlp	r9					; Y location * 80
00000037	20598000	add		PAR,r9,r8
00000038	65605000	sdl		PAR					; Y location
00000039	A1904000	pull	r9
0000003a	A1704000	pull	PC

;
; dumpCharSet_xxXGA
;

dumpCharSet_xxXGA:
0000003b	42800000	lix		r8,0x0
nextCharDump:
0000003c	D4FFFFF1	bsr		putChar_mmXGA
0000003d	21880001	addi	r8,r8,1
0000003e	39380100	cmpi	r8,0x100
0000003f	D2FFFFFD	bne		nextCharDump
00000040	A1704000	pull 	PC
;--------------------------------------------------------------------
; ps2.asm - Functions to read the PS/2 keyboard
;
; Address	Function
; x0800 	Latched Keyboard Data
; x0801 	Latched Keyboard Status
; x0802 	Polled Keyboard Data
; x0803 	Polled Keyboard Status
;
; getChar_PS2
; returns character received in r8
;

getChar_PS2:
00000041	A0405000	push	PAR
00000042	42500801	lix		PAR,0x0801	; PS/2 Status
waitPS2RxStat:
00000043	84805000	lpl		r8			; Read Status into r9
00000044	2B880001	andi 	r8,r8,1
00000045	C3FFFFFE	bez 	waitPS2RxStat
getCharFromPS2:
00000046	42500800	lix 	PAR,0x0800
00000047	84805000	lpl		r8
whilePS2RxStat:
00000048	A1504000	pull	PAR
00000049	A1704000	pull	PC

; waitReadPS2_UART
; wait for character from either
;	the PS/2 keyboard or the UART serial
; r8 = read character

waitReadPS2_UART:
0000004a	A0405000	push	PAR
checkCharFromPS2:
0000004b	42500801	lix		PAR,0x0801	; PS/2 Status
0000004c	84805000	lpl		r8			; Read Status
0000004d	2B880001	andi	r8,r8,0x1	; =1 when char received
0000004e	C3000004	bez 	checkUARTStat
0000004f	42500800	lix 	PAR,0x0800	; PS/2 Data
00000050	84805000	lpl		r8
00000051	C0000007	bra		gotPS2Char
checkUARTStat:
00000052	42501800	lix		PAR,0x1800	; UART Status
00000053	84805000	lpl		r8			; Read Status
00000054	2B880001	andi 	r8,r8,0x1	; =1 when char received
00000055	C3FFFFF6	bez 	checkCharFromPS2
00000056	42501801	lix 	PAR,0x1801	; UART Data
00000057	84805000	lpl		r8
gotPS2Char:
00000058	A1504000	pull	PAR
00000059	A1704000	pull	PC

; checkForCharAndDiscard - Check for a character in UART or PS/2
; Discard the character received
; return whether char was present (1) or no char was present (0)

checkForCharAndDiscard:
0000005a	A0405000	push	PAR
0000005b	42500801	lix		PAR,0x0801	; PS/2 Status
0000005c	84805000	lpl		r8			; Read Status
0000005d	2B880001	andi	r8,r8,0x1	; =1 when char received
0000005e	C3000005	bez 	checkUARTStat2
0000005f	42500800	lix 	PAR,0x0800	; PS/2 Data
00000060	84805000	lpl		r8			; throw away char
00000061	42800001	lix		r8,0x1
00000062	C000000A	bra		gotChar
checkUARTStat2:
00000063	42501800	lix		PAR,0x1800	; UART Status
00000064	84805000	lpl		r8			; Read Status
00000065	2B880001	andi 	r8,r8,0x1	; =1 when char received
00000066	C3000005	bez 	noCharReceived
00000067	42501801	lix 	PAR,0x1801	; UART Data
00000068	84805000	lpl		r8
00000069	42800001	lix		r8,1
0000006a	C0000002	bra		gotChar
noCharReceived:
0000006b	42800000	lix		r8,0
gotChar:
0000006c	A1504000	pull	PAR
0000006d	A1704000	pull	PC

;
; waitCharPolled_PS2 - Check the polled character interface
; wait for a character
; return when a character is present
; returns character received in r8
;

waitCharPolled_PS2:
0000006e	A0405000	push	PAR
0000006f	42500803	lix		PAR,0x0803	; PS/2 Status
waitPS2RxStatPolled:
00000070	84805000	lpl		r8			; Read Status into r8
00000071	2B880001	andi 	r8,r8,0x1
00000072	C3FFFFFE	bez 	waitPS2RxStatPolled
getCharFromPS2Polled:
00000073	42500802	lix 	PAR,0x0802
00000074	84805000	lpl		r8
whilePS2RxStatPolled:
00000075	A1504000	pull	PAR
00000076	A1704000	pull	PC

;
; checkGetStat_PS2 - Checks the polling status
; Polled interface is active while the keyboard key is pressed
; returns
;	-1 if there is no character,
;	character if there is a character
;

checkGetStat_PS2:
00000077	A0405000	push	PAR
00000078	42500803	lix		PAR,0x0803	; PS/2 Status
00000079	84805000	lpl		r8			; Read Status into r8
0000007a	2B880001	andi	r8,r8,0x1
0000007b	C3000004	bez		charNotPresent
0000007c	42500802	lix		PAR,0x0802
0000007d	84805000	lpl		r8
0000007e	C0000002	bra		gotCharIn
charNotPresent:
0000007f	20802000	add		r8,ZERO,MINUS1
gotCharIn:
00000080	A1504000	pull	PAR
00000081	A1704000	pull	PC
