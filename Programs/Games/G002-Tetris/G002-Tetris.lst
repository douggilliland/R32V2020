; Read PS/2 keyboard character and put it to the Memory Mapped XGA Screen
; This program requires a build of R32V2020 that has memory mapped video
; Example: R32V2020_Build_V002_A4_CE6_MMVid

prompt: .string "FakeTris 0.01"

start:
00000000	D4000037	bsr		clearScreen_mmXGA
00000001	42500000	lix		par,0				; start of screen
00000002	42600000	lix		dar,prompt.lower	; clear the data memory addr pointer
readDataMemory:
00000003	68806000	ldbp	r8					; get the character
00000004	39380000	cmpi	r8,0
00000005	D1000003	beq		doneWithPrompt
00000006	D400003E	bsr		putChar_mmXGA
00000007	C0FFFFFC	bra		readDataMemory
doneWithPrompt:
00000008	D4000004	bsr		drawTetrisBorder
loopProg:
00000009	D400004F	bsr		getChar_PS2
storeToScreen:
0000000a	D400003A	bsr		putChar_mmXGA
0000000b	C0FFFFFE	bra		loopProg

;
; drawBorder - draw the border around the FakeTis window
;

drawTetrisBorder:
0000000c	A0408000	push	r8
0000000d	A0409000	push	r9
0000000e	42800014	lix		r8,0x0014			; location 20,0
0000000f	D4000037	bsr		setScreenLocation_mmXGA
00000010	428000CC	lix		r8,0xCC				; upper left corner
00000011	D4000033	bsr		putChar_mmXGA
00000012	42900014	lix		r9,0x14				; 20 chars wide
anotherHorizTop:
00000013	42800083	lix		r8,0x83				; horizontal line
00000014	D4000030	bsr		putChar_mmXGA
00000015	23990001	subi	r9,r9,1
00000016	C7FFFFFD	bnz		anotherHorizTop
00000017	428000CD	lix		r8,0xCD				; upper right corner
00000018	D400002C	bsr		putChar_mmXGA
; vertical left side
00000019	4290001E	lix		r9,0x1E				; 30 rows high
0000001a	42800114	lix		r8,0x0114			; location 20,0
0000001b	D400002B	bsr		setScreenLocation_mmXGA
0000001c	4280008C	lix		r8,0x8C				; vertical line
anotherLeftVert:
0000001d	D4000027	bsr		putChar_mmXGA
0000001e	2155003F	addi	PAR,PAR,0x3F
0000001f	23990001	subi	r9,r9,1
00000020	C7FFFFFD	bnz		anotherLeftVert
; vertical right side
00000021	4290001E	lix		r9,0x1E				; 30 rows high
00000022	42800129	lix		r8,0x0129			; location 41,1
00000023	D4000023	bsr		setScreenLocation_mmXGA
00000024	4280008B	lix		r8,0x8B				; vertical line
anotherLeftVert2:
00000025	D400001F	bsr		putChar_mmXGA
00000026	2155003F	addi	PAR,PAR,0x3F
00000027	23990001	subi	r9,r9,1
00000028	C7FFFFFD	bnz		anotherLeftVert2
; Draw bottom box
00000029	42801F14	lix		r8,0x1F14			; location 20,0
0000002a	D400001C	bsr		setScreenLocation_mmXGA
0000002b	428000CB	lix		r8,0xCB				; lower left corner
0000002c	D4000018	bsr		putChar_mmXGA
0000002d	42900014	lix		r9,0x14				; 20 chars wide
anotherHorizBottom:
0000002e	42800084	lix		r8,0x84				; horizontal line
0000002f	D4000015	bsr		putChar_mmXGA
00000030	23990001	subi	r9,r9,1
00000031	C7FFFFFD	bnz		anotherHorizBottom
00000032	428000CE	lix		r8,0xCE				; upper right corner
00000033	D4000011	bsr		putChar_mmXGA

00000034	A1904000	pull	r9
00000035	A1804000	pull	r8
00000036	A1704000	pull	PC

screenX:	.LONG	0x0
screenY:	.LONG	0x0
screenAdr:	.LONG	0x0
;
; clearScreen_XGA - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
;

clearScreen_mmXGA:
00000037	A0405000	push	PAR
00000038	A0409000	push	r9
00000039	A0408000	push	r8
0000003a	42500000	lix 	par,0x0000	; start of screen character memory
0000003b	42800020	lix		r8,0x20		; fill with spaces
0000003c	42900800	lix 	r9,0x800	; loopCount	(2K)
looper:
0000003d	89508000	spbp 	r8			; put the character to the screen
0000003e	23990001	subi 	r9,r9,1		; decrement character counter
0000003f	C7FFFFFE	bnz		looper		; loop until complete
00000040	A1804000	pull	r8
00000041	A1904000	pull	r9
00000042	A1504000	pull	PAR
00000043	A1704000	pull	PC

;
; putChar_MemMapXGA - Put a character to the screen and increment the address
; r8 = Character to put to screen
; PAR = set to the current screen location
;

putChar_mmXGA:
00000044	89508000	spbp	r8			; write character to peripheral bus
00000045	A1704000	pull	PC

;
; setScreenLocation_XGA - Set PAR to a particular screen location
; Also sets the variables screenX and screenY
; r8 - screen location
;	d0-d7 = X coordinate
;	d8-d15 = Y coordinate
;

setScreenLocation_mmXGA:
00000046	A0409000	push	r9
00000047	33908000	sr8		r9,r8
00000048	2B8800FF	andi	r8,r8,0x00ff
00000049	42600010	lix		DAR,screenX.lower
0000004a	6D608000	sdlp	r8					; X location
0000004b	6D609000	sdlp	r9					; Y location
0000004c	25990040	muli	r9,r9,0x40			; location is Y*63+X
0000004d	6D609000	sdlp	r9					; Y location * 64
0000004e	20598000	add		PAR,r9,r8
0000004f	65605000	sdl		PAR					; Y location
00000050	A1904000	pull	r9
00000051	A1704000	pull	PC

;
; dumpCharSet_xxXGA
;

dumpCharSet_xxXGA:
00000052	42800000	lix		r8,0x0
nextCharDump:
00000053	D4FFFFF1	bsr		putChar_mmXGA
00000054	21880001	addi	r8,r8,1
00000055	39380100	cmpi	r8,0x100
00000056	D2FFFFFD	bne		nextCharDump
00000057	A1704000	pull 	PC
;--------------------------------------------------------------------
; ps2.asm - Functions to read the PS/2 keyboard
;
; Address	Function
; x0800 	Latched Keyboard Data
; x0801 	Latched Keyboard Status
; x0802 	Polled Keyboard Data
; x0803 	Polled Keyboard Status
;
; getChar_PS2
; returns character received in r8
;

getChar_PS2:
00000058	A0405000	push	PAR
00000059	42500801	lix		PAR,0x0801	; PS/2 Status
waitPS2RxStat:
0000005a	84805000	lpl		r8			; Read Status into r9
0000005b	2B880001	andi 	r8,r8,1
0000005c	C3FFFFFE	bez 	waitPS2RxStat
getCharFromPS2:
0000005d	42500800	lix 	PAR,0x0800
0000005e	84805000	lpl		r8
whilePS2RxStat:
0000005f	A1504000	pull	PAR
00000060	A1704000	pull	PC

; waitReadPS2_UART
; wait for character from either
;	the PS/2 keyboard or the UART serial
; r8 = read character

waitReadPS2_UART:
00000061	A0405000	push	PAR
checkCharFromPS2:
00000062	42500801	lix		PAR,0x0801	; PS/2 Status
00000063	84805000	lpl		r8			; Read Status
00000064	2B880001	andi	r8,r8,0x1	; =1 when char received
00000065	C3000004	bez 	checkUARTStat
00000066	42500800	lix 	PAR,0x0800	; PS/2 Data
00000067	84805000	lpl		r8
00000068	C0000007	bra		gotPS2Char
checkUARTStat:
00000069	42501800	lix		PAR,0x1800	; UART Status
0000006a	84805000	lpl		r8			; Read Status
0000006b	2B880001	andi 	r8,r8,0x1	; =1 when char received
0000006c	C3FFFFF6	bez 	checkCharFromPS2
0000006d	42501801	lix 	PAR,0x1801	; UART Data
0000006e	84805000	lpl		r8
gotPS2Char:
0000006f	A1504000	pull	PAR
00000070	A1704000	pull	PC

; checkForCharAndDiscard - Check for a character in UART or PS/2
; Discard the character received
; return whether char was present (1) or no char was present (0)

checkForCharAndDiscard:
00000071	A0405000	push	PAR
00000072	42500801	lix		PAR,0x0801	; PS/2 Status
00000073	84805000	lpl		r8			; Read Status
00000074	2B880001	andi	r8,r8,0x1	; =1 when char received
00000075	C3000005	bez 	checkUARTStat2
00000076	42500800	lix 	PAR,0x0800	; PS/2 Data
00000077	84805000	lpl		r8			; throw away char
00000078	42800001	lix		r8,0x1
00000079	C000000A	bra		gotChar
checkUARTStat2:
0000007a	42501800	lix		PAR,0x1800	; UART Status
0000007b	84805000	lpl		r8			; Read Status
0000007c	2B880001	andi 	r8,r8,0x1	; =1 when char received
0000007d	C3000005	bez 	noCharReceived
0000007e	42501801	lix 	PAR,0x1801	; UART Data
0000007f	84805000	lpl		r8
00000080	42800001	lix		r8,1
00000081	C0000002	bra		gotChar
noCharReceived:
00000082	42800000	lix		r8,0
gotChar:
00000083	A1504000	pull	PAR
00000084	A1704000	pull	PC

;
; waitCharPolled_PS2 - Check the polled character interface
; wait for a character
; return when a character is present
; returns character received in r8
;

waitCharPolled_PS2:
00000085	A0405000	push	PAR
00000086	42500803	lix		PAR,0x0803	; PS/2 Status
waitPS2RxStatPolled:
00000087	84805000	lpl		r8			; Read Status into r8
00000088	2B880001	andi 	r8,r8,0x1
00000089	C3FFFFFE	bez 	waitPS2RxStatPolled
getCharFromPS2Polled:
0000008a	42500802	lix 	PAR,0x0802
0000008b	84805000	lpl		r8
whilePS2RxStatPolled:
0000008c	A1504000	pull	PAR
0000008d	A1704000	pull	PC

;
; checkGetStat_PS2 - Checks the polling status
; Polled interface is active while the keyboard key is pressed
; returns
;	-1 if there is no character,
;	character if there is a character
;

checkGetStat_PS2:
0000008e	A0405000	push	PAR
0000008f	42500803	lix		PAR,0x0803	; PS/2 Status
00000090	84805000	lpl		r8			; Read Status into r8
00000091	2B880001	andi	r8,r8,0x1
00000092	C3000004	bez		charNotPresent
00000093	42500802	lix		PAR,0x0802
00000094	84805000	lpl		r8
00000095	C0000002	bra		gotCharIn
charNotPresent:
00000096	20802000	add		r8,ZERO,MINUS1
gotCharIn:
00000097	A1504000	pull	PAR
00000098	A1704000	pull	PC
