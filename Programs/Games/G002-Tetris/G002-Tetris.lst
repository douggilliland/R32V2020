; Tetris game
; This program requires a build of R32V2020 that has memory mapped video
; Example: R32V2020_Build_V002_A4_CE6_MMVid

title: .string "FakeTris 0.01"
; Tetris shapes from
;	https://raw.githubusercontent.com/OneLoneCoder/videos/master/OneLoneCoder_Tetris.cpp
tetrisShape0:	.string "..X...X...X...X."
tetrisShape1:	.string "..X..XX...X....."
tetrisShape2:	.string ".....XX..XX....."
tetrisShape3:	.string "..X..XX..X......"
tetrisShape4:	.string ".X...XX...X....."
tetrisShape5:	.string ".X...X...XX....."
tetrisShape16:	.string "..X...X..XX....."

start:
00000000	D4000084	bsr		clearScreen_mmXGA
printTitle:
00000001	42500000	lix		par,0				; start of screen
00000002	42600000	lix		dar,title.lower	; clear the data memory addr pointer
readDataMemory:
00000003	68806000	ldbp	r8					; get the character
00000004	39380000	cmpi	r8,0
00000005	D1000003	beq		doneWithPrompt
00000006	D4000065	bsr		putCharIncrPAR_mmXGA
00000007	C0FFFFFC	bra		readDataMemory
doneWithPrompt:
; Draw the border of the playfield
00000008	D4000027	bsr		drawPlayfieldBorder
; Draw the first sprite
00000009	4280011F	lix		r8,0x011F			; location 31,1
0000000a	D400009C	bsr		setSpriteLocation_mmXGA
0000000b	428000E2	lix		r8,0xE2				; circle char for now
0000000c	D4000088	bsr		putSprite_mmXGA		; put sprite on screen
loopProg:
0000000d	D40000DB	bsr		checkGetStat_PS2
0000000e	2B88005F	andi	r8,r8,0x5F			; upper to lower
0000000f	39380041	cmpi	r8,0x41				; 'a'
00000010	D1000004	beq		moveSpriteLeft
00000011	39380044	cmpi	r8,0x44				; 'd'
00000012	D100000E	beq		moveSpriteRight
00000013	C0FFFFFA	bra		loopProg			; not an 'a' or 'd'
moveSpriteLeft:
00000014	426000B0	lix		DAR,currentSpriteX.lower
00000015	64906000	ldl		r9
00000016	39390015	cmpi	r9,0x15				; check to see if already at left edge
00000017	D1FFFFF6	beq		loopProg
00000018	42800020	lix		r8,0x20				; write out a space to erase sprite
00000019	D400007B	bsr		putSprite_mmXGA
0000001a	23550001	subi	PAR,PAR,1			; go left
0000001b	428000E2	lix		r8,0xE2				; circle character (for now)
0000001c	64906000	ldl		r9
0000001d	23990001	subi	r9,r9,1
0000001e	65609000	sdl		r9
0000001f	C000000C	bra		storeToScreen
moveSpriteRight:
00000020	426000B0	lix		DAR,currentSpriteX.lower
00000021	64906000	ldl		r9
00000022	39390028	cmpi	r9,0x28				; check to see if already at edge
00000023	D1FFFFEA	beq		loopProg
00000024	42800020	lix		r8,0x20				; write out a space to erase sprite
00000025	D400006F	bsr		putSprite_mmXGA
00000026	21550001	addi	PAR,PAR,1			; go right
00000027	428000E2	lix		r8,0xE2				; circle character (for now)
00000028	64906000	ldl		r9
00000029	21990001	addi	r9,r9,1
0000002a	65609000	sdl		r9
storeToScreen:
0000002b	D4000069	bsr		putSprite_mmXGA
0000002c	42800064	lix		r8,100				; wait for a bit
0000002d	D40000C6	bsr		delay_mS
0000002e	C0FFFFDF	bra		loopProg

;
; drawBorder - draw the border around the FakeTis window
;

drawPlayfieldBorder:
0000002f	A0408000	push	r8
00000030	A0409000	push	r9
; Draw upper left corner
00000031	42800014	lix		r8,0x0014			; location 20,0
00000032	31808000	sl8		r8,r8				; shift over the address
00000033	218800CC	addi	r8,r8,0xCC			; upper left corner chars
00000034	D400002A	bsr		putCharXY_mmXGA		; put upper left corner on screen
00000035	21550001	addi	PAR,PAR,1			; get ready to draw horizontal line
; Draw top horizontal line
00000036	42900014	lix		r9,0x14				; 20 chars wide top line
anotherHorizTop:
00000037	42800083	lix		r8,0x83				; horizontal line
00000038	89508000	spbp	r8
00000039	23990001	subi	r9,r9,1
0000003a	C7FFFFFD	bnz		anotherHorizTop
; Draw upper right corner
0000003b	428000CD	lix		r8,0xCD				; upper right corner
0000003c	81508000	spb		r8
; Draw vertical left side
0000003d	4290001E	lix		r9,0x1E				; 30 rows high
0000003e	42800114	lix		r8,0x0114			; location 20,1
0000003f	31808000	sl8		r8,r8
00000040	2188008C	addi	r8,r8,0x8C			; vertical line left side
00000041	D400001D	bsr		putCharXY_mmXGA		; put first vertical bar to the screen
anotherLeftVert:
00000042	81508000	spb		r8					; write character to the screen
00000043	21550040	addi	PAR,PAR,0x40
00000044	23990001	subi	r9,r9,1
00000045	C7FFFFFD	bnz		anotherLeftVert
; Draw vertical right side
00000046	4290001E	lix		r9,0x1E				; 30 rows high
00000047	42800129	lix		r8,0x0129			; location 41,1
00000048	31808000	sl8		r8,r8
00000049	2188008B	addi	r8,r8,0x8B			; vertical line right side
0000004a	D4000014	bsr		putCharXY_mmXGA		; put first vertical bar to the screen
anotherLeftVert2:
0000004b	81508000	spb		r8
0000004c	21550040	addi	PAR,PAR,0x40
0000004d	23990001	subi	r9,r9,1
0000004e	C7FFFFFD	bnz		anotherLeftVert2
; Draw left bottom corner
0000004f	42801F14	lix		r8,0x1F14			; location 20,31
00000050	31808000	sl8		r8,r8				; shift over the address
00000051	218800CB	addi	r8,r8,0xCB			; lower left corner
00000052	D400000C	bsr		putCharXY_mmXGA		; put bottom left corner on screen
00000053	21550001	addi	PAR,PAR,1			; get ready to draw horizontal line
00000054	42900014	lix		r9,0x14				; 20 chars wide
anotherHorizBottom:
00000055	42800084	lix		r8,0x84				; horizontal line
00000056	89508000	spbp	r8
00000057	23990001	subi	r9,r9,1
00000058	C7FFFFFD	bnz		anotherHorizBottom
00000059	428000CE	lix		r8,0xCE				; upper right corner
0000005a	89508000	spbp	r8

0000005b	A1904000	pull	r9
0000005c	A1804000	pull	r8
0000005d	A1704000	pull	PC

screenX:		.LONG	0x0
screenY:		.LONG	0x0
screenAdr:		.LONG	0x0
;
; clearScreen_mmXGA - "Clear" the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Performance:
;	Loop writes 4 locations in 6 instructions
;	80 nS/instruction * 6 instructions = 480 nS
;	512 times through loop
;	245.76 uS screen clear time
;

;
; putCharXY_mmXGA - Put a character to the screen at a X,Y location
; r8 = X,Y,Character to put to screen
; 	d16..d23 = position Y
;	d8..d15 = position X
;	d0..d7 = character to write
; Registers used:
;	r8 - character to write (after processing)
;	r9 - X location
;	r10 - Y location
; Globals:
;	screenX, screenY location of the place to put the sprite character
;

putCharXY_mmXGA:
0000005e	A040A000	push	r10
0000005f	A0409000	push	r9
;	push	PAR
00000060	33908000	sr8		r9,r8				; r9 has the X location
00000061	2B8800FF	andi	r8,r8,0xff			; mask off address bits leaving character
00000062	33A09000	sr8		r10,r9				; r10 has the Y location
00000063	2BAA00FF	andi	r10,r10,0xff		; mask off any extra bits
00000064	2B9900FF	andi	r9,r9,0xff			; mask off any extra bits
00000065	255A0040	muli	PAR,r10,0x40
00000066	20559000	add		PAR,PAR,r9
00000067	81508000	spb		r8					; write character to Display
;	pull	PAR
00000068	A1904000	pull	r9
00000069	A1A04000	pull	r10
0000006a	A1704000	pull	PC

;
; putCharIncrPAR_mmXGA - Put a character to the screen and increment PAR
; Useful for filling line with stuff
; r8 = Character to put to screen
; PAR = set to the current screen location
;

putCharIncrPAR_mmXGA:
0000006b	89508000	spbp	r8			; write character to peripheral bus
0000006c	A1704000	pull	PC

;
; putChar_mmXGA - Put a character to the screen
; r8 = Character to put to screen
; Globals:
;	screenX, screenY location of the place to put the sprite character
;

putChar_mmXGA:
0000006d	A0409000	push	r9
0000006e	A0405000	push	PAR
0000006f	4260009C	lix		DAR,screenX.lower	; X location
00000070	64806000	ldl		r8
00000071	426000A0	lix		DAR,screenY.lower	; Y location
00000072	64906000	ldl		r9
00000073	31909000	sl8		r9,r9
00000074	20589000	add		PAR,r8,r9			; PAR points to screen location
00000075	81508000	spb		r8					; write character to Display
00000076	A1504000	pull	PAR
00000077	A1904000	pull	r9
00000078	A1704000	pull	PC

;
; setParToCurrentCharLoc_mmXGA - Sets PAR to the current character location
;

setParToCurrentCharLoc_mmXGA:
00000079	A0408000	push	r8
0000007a	A0409000	push	r9
0000007b	426000B0	lix		DAR,currentSpriteX.lower
0000007c	64806000	ldl		r8
0000007d	426000B4	lix		DAR,currentSpriteY.lower
0000007e	64906000	ldl		r9					; currentSpriteY is the next location
0000007f	25990040	muli	r9,r9,0x40			; 64 chars wide screen
00000080	20589000	add		PAR,r8,r9
00000081	A1904000	pull	r9
00000082	A1804000	pull	r8
00000083	A1704000	pull	PC

clearScreen_mmXGA:
00000084	A0405000	push	PAR
00000085	A0409000	push	r9
00000086	A0408000	push	r8
00000087	42500000	lix 	par,0x0000	; start of screen character memory
00000088	42800020	lix		r8,0x20		; fill with spaces
00000089	42900200	lix 	r9,0x200	; loopCount	(2K)
looper:
0000008a	89508000	spbp 	r8			; put the character to the screen
0000008b	89508000	spbp 	r8			; put the character to the screen
0000008c	89508000	spbp 	r8			; put the character to the screen
0000008d	89508000	spbp 	r8			; put the character to the screen
0000008e	23990001	subi 	r9,r9,1		; decrement character counter
0000008f	C7FFFFFB	bnz		looper		; loop until complete
00000090	A1804000	pull	r8
00000091	A1904000	pull	r9
00000092	A1504000	pull	PAR
00000093	A1704000	pull	PC

;
; dumpCharSet_xxXGA
; Loaded to
;	https://github.com/douggilliland/R32V2020/wiki/Memory-Mapped-Display#Extended_Character_Set_Bitmaps
;

; dumpCharSet_xxXGA:
; lix		r8,0x0
; nextCharDump:
; bsr		putChar_mmXGA
; addi	r8,r8,1
; cmpi	r8,0x100
; bne		nextCharDump
; pull 	PC
; Sprites handler

spritesStartHere:	.string "Sprites"
currentSpriteX:	.LONG	0x0
currentSpriteY:	.LONG	0x0
spriteMemLoc:	.LONG	0x0

;
; putSprite_mmXGA - Put a sprite character to the screen
; r8 = Sprite to put to screen
; Globals:
;	currentSpriteX, currentSpriteY location of the place to put the character
;

putSprite_mmXGA:
00000094	A0409000	push	r9
00000095	A040A000	push	r10
00000096	A0405000	push	PAR
00000097	A0406000	push	DAR
00000098	426000B0	lix		DAR,currentSpriteX.lower
00000099	64906000	ldl		r9					; X location
0000009a	426000B4	lix		DAR,currentSpriteY.lower
0000009b	64A06000	ldl		r10					; Y location
0000009c	25AA0040	muli	r10,r10,0x40		; 64 column offset
0000009d	205A9000	add		PAR,r10,r9			; PAR points to screen location
0000009e	81508000	spb		r8					; write character to Display
0000009f	426000B8	lix		DAR,spriteMemLoc.lower
000000a0	65605000	sdl		PAR
000000a1	A1604000	pull	DAR
000000a2	A1504000	pull	PAR
000000a3	A1A04000	pull	r10
000000a4	A1904000	pull	r9
000000a5	A1704000	pull	PC

;
; setSpriteLocation_mmXGA
; Sets the variables currentSpriteX and currentSpriteY in data memory
; r8 - screen location
;	d0-d7 = X coordinate
;	d8-d15 = Y coordinate
;

setSpriteLocation_mmXGA:
000000a6	A0406000	push	DAR
000000a7	A0409000	push	r9
000000a8	33908000	sr8		r9,r8
000000a9	2B9900FF	andi	r9,r9,0x00ff		; Y
000000aa	2B8800FF	andi	r8,r8,0x00ff		; X
000000ab	426000B0	lix		DAR,currentSpriteX.lower
000000ac	65608000	sdl		r8					; X location
000000ad	426000B4	lix		DAR,currentSpriteY.lower
000000ae	65609000	sdl		r9					; Y location
000000af	A1904000	pull	r9
000000b0	A1604000	pull	DAR
000000b1	A1704000	pull	PC

;--------------------------------------------------------------------
; ps2.asm - Functions to read the PS/2 keyboard
;
; Address	Function
; x0800 	Latched Keyboard Data
; x0801 	Latched Keyboard Status
; x0802 	Polled Keyboard Data
; x0803 	Polled Keyboard Status
;
; getChar_PS2
; returns character received in r8
;

getChar_PS2:
000000b2	A0405000	push	PAR
000000b3	42500801	lix		PAR,0x0801	; PS/2 Status
waitPS2RxStat:
000000b4	84805000	lpl		r8			; Read Status into r9
000000b5	2B880001	andi 	r8,r8,1
000000b6	C3FFFFFE	bez 	waitPS2RxStat
getCharFromPS2:
000000b7	42500800	lix 	PAR,0x0800
000000b8	84805000	lpl		r8
whilePS2RxStat:
000000b9	A1504000	pull	PAR
000000ba	A1704000	pull	PC

; waitReadPS2_UART
; wait for character from either
;	the PS/2 keyboard or the UART serial
; r8 = read character

waitReadPS2_UART:
000000bb	A0405000	push	PAR
checkCharFromPS2:
000000bc	42500801	lix		PAR,0x0801	; PS/2 Status
000000bd	84805000	lpl		r8			; Read Status
000000be	2B880001	andi	r8,r8,0x1	; =1 when char received
000000bf	C3000004	bez 	checkUARTStat
000000c0	42500800	lix 	PAR,0x0800	; PS/2 Data
000000c1	84805000	lpl		r8
000000c2	C0000007	bra		gotPS2Char
checkUARTStat:
000000c3	42501800	lix		PAR,0x1800	; UART Status
000000c4	84805000	lpl		r8			; Read Status
000000c5	2B880001	andi 	r8,r8,0x1	; =1 when char received
000000c6	C3FFFFF6	bez 	checkCharFromPS2
000000c7	42501801	lix 	PAR,0x1801	; UART Data
000000c8	84805000	lpl		r8
gotPS2Char:
000000c9	A1504000	pull	PAR
000000ca	A1704000	pull	PC

; checkForCharAndDiscard - Check for a character in UART or PS/2
; Discard the character received
; return whether char was present (1) or no char was present (0)

checkForCharAndDiscard:
000000cb	A0405000	push	PAR
000000cc	42500801	lix		PAR,0x0801	; PS/2 Status
000000cd	84805000	lpl		r8			; Read Status
000000ce	2B880001	andi	r8,r8,0x1	; =1 when char received
000000cf	C3000005	bez 	checkUARTStat2
000000d0	42500800	lix 	PAR,0x0800	; PS/2 Data
000000d1	84805000	lpl		r8			; throw away char
000000d2	42800001	lix		r8,0x1
000000d3	C000000A	bra		gotChar
checkUARTStat2:
000000d4	42501800	lix		PAR,0x1800	; UART Status
000000d5	84805000	lpl		r8			; Read Status
000000d6	2B880001	andi 	r8,r8,0x1	; =1 when char received
000000d7	C3000005	bez 	noCharReceived
000000d8	42501801	lix 	PAR,0x1801	; UART Data
000000d9	84805000	lpl		r8
000000da	42800001	lix		r8,1
000000db	C0000002	bra		gotChar
noCharReceived:
000000dc	42800000	lix		r8,0
gotChar:
000000dd	A1504000	pull	PAR
000000de	A1704000	pull	PC

;
; waitCharPolled_PS2 - Check the polled character interface
; wait for a character
; return when a character is present
; returns character received in r8
;

waitCharPolled_PS2:
000000df	A0405000	push	PAR
000000e0	42500803	lix		PAR,0x0803	; PS/2 Status
waitPS2RxStatPolled:
000000e1	84805000	lpl		r8			; Read Status into r8
000000e2	2B880001	andi 	r8,r8,0x1
000000e3	C3FFFFFE	bez 	waitPS2RxStatPolled
getCharFromPS2Polled:
000000e4	42500802	lix 	PAR,0x0802
000000e5	84805000	lpl		r8
whilePS2RxStatPolled:
000000e6	A1504000	pull	PAR
000000e7	A1704000	pull	PC

;
; checkGetStat_PS2 - Checks the polling status
; Polled interface is active while the keyboard key is pressed
; returns
;	-1 if there is no character,
;	character if there is a character
;

checkGetStat_PS2:
000000e8	A0405000	push	PAR
000000e9	42500803	lix		PAR,0x0803	; PS/2 Status
000000ea	84805000	lpl		r8			; Read Status into r8
000000eb	2B880001	andi	r8,r8,0x1
000000ec	C3000004	bez		charNotPresent
000000ed	42500802	lix		PAR,0x0802
000000ee	84805000	lpl		r8
000000ef	C0000002	bra		gotCharIn
charNotPresent:
000000f0	20802000	add		r8,ZERO,MINUS1
gotCharIn:
000000f1	A1504000	pull	PAR
000000f2	A1704000	pull	PC
;--------------------------------------------------------------------
; timers.asm

; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
000000f3	A0409000	push	r9
000000f4	42503802	lix		PAR,0x3802		; address of the mSec counter
000000f5	84905000	lpl		r9				; read the peripheral counter into r9
000000f6	20898000	add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000f7	84905000	lpl		r9				; check the elapsed time counter
000000f8	38389000	cmp		r8,r9
000000f9	CCFFFFFE	blt		loop_delay_mS
000000fa	A1904000	pull	r9
000000fb	A1704000	pull	PC

;
; delay_uS - delay for the number of uSecs
; pass mSec delay in r8
; Uses routine uses r9 (saved and restored)
;

delay_uS:
000000fc	A0409000	push	r9
000000fd	A0405000	push	PAR
000000fe	42503801	lix		PAR,0x3801		; address of the uSec counter
000000ff	84905000	lpl		r9				; read the peripheral counter into r9
00000100	20898000	add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_uS:
00000101	84905000	lpl		r9				; check the elapsed time counter
00000102	38389000	cmp		r8,r9
00000103	CCFFFFFE	blt		loop_delay_uS
00000104	A1504000	pull	PAR
00000105	A1904000	pull	r9
00000106	A1704000	pull	PC

