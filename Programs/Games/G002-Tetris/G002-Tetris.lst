; Tetris game
; This program requires a build of R32V2020 that has memory mapped video
; Example: R32V2020_Build_V002_A4_CE6_MMVid

prompt: .string "FakeTris 0.01"
; Tetris shapes from
;	https://raw.githubusercontent.com/OneLoneCoder/videos/master/OneLoneCoder_Tetris.cpp
tetrisShape0:	.string "..X...X...X...X."
tetrisShape1:	.string "..X..XX...X....."
tetrisShape2:	.string ".....XX..XX....."
tetrisShape3:	.string "..X..XX..X......"
tetrisShape4:	.string ".X...XX...X....."
tetrisShape5:	.string ".X...X...XX....."
tetrisShape16:	.string "..X...X..XX....."
currentCharLocn:	.long 0x0

start:
00000000	D4000056	bsr		clearScreen_mmXGA
00000001	42500000	lix		par,0				; start of screen
00000002	42600000	lix		dar,prompt.lower	; clear the data memory addr pointer
readDataMemory:
00000003	68806000	ldbp	r8					; get the character
00000004	39380000	cmpi	r8,0
00000005	D1000003	beq		doneWithPrompt
00000006	D400005D	bsr		putCharIncr_mmXGA
00000007	C0FFFFFC	bra		readDataMemory
doneWithPrompt:
00000008	D4000023	bsr		drawTetrisBorder
putUpSprite:
00000009	4280011F	lix		r8,0x011F			; location 20,0
0000000a	D400005D	bsr		setScreenLocation_mmXGA
0000000b	428000E2	lix		r8,0xE2				; circle character (for now)
0000000c	D4000059	bsr		putChar_mmXGA
loopProg:
0000000d	D40000AC	bsr		checkGetStat_PS2
0000000e	2B88005F	andi	r8,r8,0x5F			; upper to lower
0000000f	39380041	cmpi	r8,0x41				; 'a'
00000010	D1000004	beq		moveCharLeft
00000011	39380044	cmpi	r8,0x44				; 'd'
00000012	D100000C	beq		moveCharRight
00000013	C0FFFFFA	bra		loopProg			; not an 'a' or 'd'
moveCharLeft:
00000014	D400005F	bsr		setParToCurrentCharLoc_mmXGA
00000015	42800020	lix		r8,0x20				; write out a space
00000016	D400004F	bsr		putChar_mmXGA
00000017	23550001	subi	PAR,PAR,1			; go right
00000018	428000E2	lix		r8,0xE2				; circle character (for now)
00000019	426000A0	lix		DAR,screenX.lower
0000001a	64906000	ldl		r9
0000001b	23990001	subi	r9,r9,1
0000001c	65609000	sdl		r9
0000001d	C000000A	bra		storeToScreen
moveCharRight:
0000001e	D4000055	bsr		setParToCurrentCharLoc_mmXGA
0000001f	42800020	lix		r8,0x20				; write out a space
00000020	D4000045	bsr		putChar_mmXGA
00000021	21550001	addi	PAR,PAR,1			; got left
00000022	428000E2	lix		r8,0xE2				; circle character (for now)
00000023	426000A0	lix		DAR,screenX.lower
00000024	64906000	ldl		r9
00000025	21990001	addi	r9,r9,1
00000026	65609000	sdl		r9
storeToScreen:
00000027	D400003E	bsr		putChar_mmXGA
00000028	428000C8	lix		r8,200				; wait for a bit
00000029	D400009B	bsr		delay_mS
0000002a	C0FFFFE3	bra		loopProg

;
; drawBorder - draw the border around the FakeTis window
;

drawTetrisBorder:
0000002b	A0408000	push	r8
0000002c	A0409000	push	r9
0000002d	42800014	lix		r8,0x0014			; location 20,0
0000002e	D4000039	bsr		setScreenLocation_mmXGA
0000002f	428000CC	lix		r8,0xCC				; upper left corner
00000030	D4000033	bsr		putCharIncr_mmXGA
00000031	42900014	lix		r9,0x14				; 20 chars wide
anotherHorizTop:
00000032	42800083	lix		r8,0x83				; horizontal line
00000033	D4000030	bsr		putCharIncr_mmXGA
00000034	23990001	subi	r9,r9,1
00000035	C7FFFFFD	bnz		anotherHorizTop
00000036	428000CD	lix		r8,0xCD				; upper right corner
00000037	D400002C	bsr		putCharIncr_mmXGA
; vertical left side
00000038	4290001E	lix		r9,0x1E				; 30 rows high
00000039	42800114	lix		r8,0x0114			; location 20,0
0000003a	D400002D	bsr		setScreenLocation_mmXGA
0000003b	4280008C	lix		r8,0x8C				; vertical line
anotherLeftVert:
0000003c	D4000027	bsr		putCharIncr_mmXGA
0000003d	2155003F	addi	PAR,PAR,0x3F
0000003e	23990001	subi	r9,r9,1
0000003f	C7FFFFFD	bnz		anotherLeftVert
; vertical right side
00000040	4290001E	lix		r9,0x1E				; 30 rows high
00000041	42800129	lix		r8,0x0129			; location 41,1
00000042	D4000025	bsr		setScreenLocation_mmXGA
00000043	4280008B	lix		r8,0x8B				; vertical line
anotherLeftVert2:
00000044	D400001F	bsr		putCharIncr_mmXGA
00000045	2155003F	addi	PAR,PAR,0x3F
00000046	23990001	subi	r9,r9,1
00000047	C7FFFFFD	bnz		anotherLeftVert2
; Draw bottom box
00000048	42801F14	lix		r8,0x1F14			; location 20,0
00000049	D400001E	bsr		setScreenLocation_mmXGA
0000004a	428000CB	lix		r8,0xCB				; lower left corner
0000004b	D4000018	bsr		putCharIncr_mmXGA
0000004c	42900014	lix		r9,0x14				; 20 chars wide
anotherHorizBottom:
0000004d	42800084	lix		r8,0x84				; horizontal line
0000004e	D4000015	bsr		putCharIncr_mmXGA
0000004f	23990001	subi	r9,r9,1
00000050	C7FFFFFD	bnz		anotherHorizBottom
00000051	428000CE	lix		r8,0xCE				; upper right corner
00000052	D4000011	bsr		putCharIncr_mmXGA

00000053	A1904000	pull	r9
00000054	A1804000	pull	r8
00000055	A1704000	pull	PC

screenX:	.LONG	0x0
screenY:	.LONG	0x0
screenAdr:	.LONG	0x0
;
; clearScreen_XGA - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
;

clearScreen_mmXGA:
00000056	A0405000	push	PAR
00000057	A0409000	push	r9
00000058	A0408000	push	r8
00000059	42500000	lix 	par,0x0000	; start of screen character memory
0000005a	42800020	lix		r8,0x20		; fill with spaces
0000005b	42900800	lix 	r9,0x800	; loopCount	(2K)
looper:
0000005c	89508000	spbp 	r8			; put the character to the screen
0000005d	23990001	subi 	r9,r9,1		; decrement character counter
0000005e	C7FFFFFE	bnz		looper		; loop until complete
0000005f	A1804000	pull	r8
00000060	A1904000	pull	r9
00000061	A1504000	pull	PAR
00000062	A1704000	pull	PC

;
; putCharIncr_mmXGA - Put a character to the screen and increment PAR
; r8 = Character to put to screen
; PAR = set to the current screen location
;

putCharIncr_mmXGA:
00000063	89508000	spbp	r8			; write character to peripheral bus
00000064	A1704000	pull	PC

;
; putChar_mmXGA - Put a character to the screen
; r8 = Character to put to screen
; PAR = set to the current screen location
;

putChar_mmXGA:
00000065	81508000	spb		r8			; write character to peripheral bus
00000066	A1704000	pull	PC

;
; setScreenLocation_XGA - Set PAR to a particular screen location
; Also sets the variables screenX and screenY in memory
; r8 - screen location
;	d0-d7 = X coordinate
;	d8-d15 = Y coordinate
; PAR - Peripheral Address Register - set to the screen address of the current char
;

setScreenLocation_mmXGA:
00000067	A0409000	push	r9
00000068	33908000	sr8		r9,r8
00000069	2B8800FF	andi	r8,r8,0x00ff
0000006a	426000A0	lix		DAR,screenX.lower
0000006b	6D608000	sdlp	r8					; X location
0000006c	6D609000	sdlp	r9					; Y location
0000006d	25990040	muli	r9,r9,0x40			; location is Y*64+X
0000006e	6D609000	sdlp	r9					; Y location * 64
0000006f	20598000	add		PAR,r9,r8
00000070	65605000	sdl		PAR					; Y location
00000071	A1904000	pull	r9
00000072	A1704000	pull	PC

;
; setParToCurrentCharLoc_mmXGA - Sets PAR to the current character location
;

setParToCurrentCharLoc_mmXGA:
00000073	A0408000	push	r8
00000074	A0409000	push	r9
00000075	426000A0	lix		DAR,screenX.lower
00000076	6C806000	ldlp	r8
00000077	64906000	ldl		r9					; screenY is the next location
00000078	25990040	muli	r9,r9,0x40			; 64 chars wide screen
00000079	20589000	add		PAR,r8,r9
0000007a	A1904000	pull	r9
0000007b	A1804000	pull	r8
0000007c	A1704000	pull	PC

;
; dumpCharSet_xxXGA
;

dumpCharSet_xxXGA:
0000007d	42800000	lix		r8,0x0
nextCharDump:
0000007e	D4FFFFE7	bsr		putChar_mmXGA
0000007f	21880001	addi	r8,r8,1
00000080	39380100	cmpi	r8,0x100
00000081	D2FFFFFD	bne		nextCharDump
00000082	A1704000	pull 	PC
;--------------------------------------------------------------------
; ps2.asm - Functions to read the PS/2 keyboard
;
; Address	Function
; x0800 	Latched Keyboard Data
; x0801 	Latched Keyboard Status
; x0802 	Polled Keyboard Data
; x0803 	Polled Keyboard Status
;
; getChar_PS2
; returns character received in r8
;

getChar_PS2:
00000083	A0405000	push	PAR
00000084	42500801	lix		PAR,0x0801	; PS/2 Status
waitPS2RxStat:
00000085	84805000	lpl		r8			; Read Status into r9
00000086	2B880001	andi 	r8,r8,1
00000087	C3FFFFFE	bez 	waitPS2RxStat
getCharFromPS2:
00000088	42500800	lix 	PAR,0x0800
00000089	84805000	lpl		r8
whilePS2RxStat:
0000008a	A1504000	pull	PAR
0000008b	A1704000	pull	PC

; waitReadPS2_UART
; wait for character from either
;	the PS/2 keyboard or the UART serial
; r8 = read character

waitReadPS2_UART:
0000008c	A0405000	push	PAR
checkCharFromPS2:
0000008d	42500801	lix		PAR,0x0801	; PS/2 Status
0000008e	84805000	lpl		r8			; Read Status
0000008f	2B880001	andi	r8,r8,0x1	; =1 when char received
00000090	C3000004	bez 	checkUARTStat
00000091	42500800	lix 	PAR,0x0800	; PS/2 Data
00000092	84805000	lpl		r8
00000093	C0000007	bra		gotPS2Char
checkUARTStat:
00000094	42501800	lix		PAR,0x1800	; UART Status
00000095	84805000	lpl		r8			; Read Status
00000096	2B880001	andi 	r8,r8,0x1	; =1 when char received
00000097	C3FFFFF6	bez 	checkCharFromPS2
00000098	42501801	lix 	PAR,0x1801	; UART Data
00000099	84805000	lpl		r8
gotPS2Char:
0000009a	A1504000	pull	PAR
0000009b	A1704000	pull	PC

; checkForCharAndDiscard - Check for a character in UART or PS/2
; Discard the character received
; return whether char was present (1) or no char was present (0)

checkForCharAndDiscard:
0000009c	A0405000	push	PAR
0000009d	42500801	lix		PAR,0x0801	; PS/2 Status
0000009e	84805000	lpl		r8			; Read Status
0000009f	2B880001	andi	r8,r8,0x1	; =1 when char received
000000a0	C3000005	bez 	checkUARTStat2
000000a1	42500800	lix 	PAR,0x0800	; PS/2 Data
000000a2	84805000	lpl		r8			; throw away char
000000a3	42800001	lix		r8,0x1
000000a4	C000000A	bra		gotChar
checkUARTStat2:
000000a5	42501800	lix		PAR,0x1800	; UART Status
000000a6	84805000	lpl		r8			; Read Status
000000a7	2B880001	andi 	r8,r8,0x1	; =1 when char received
000000a8	C3000005	bez 	noCharReceived
000000a9	42501801	lix 	PAR,0x1801	; UART Data
000000aa	84805000	lpl		r8
000000ab	42800001	lix		r8,1
000000ac	C0000002	bra		gotChar
noCharReceived:
000000ad	42800000	lix		r8,0
gotChar:
000000ae	A1504000	pull	PAR
000000af	A1704000	pull	PC

;
; waitCharPolled_PS2 - Check the polled character interface
; wait for a character
; return when a character is present
; returns character received in r8
;

waitCharPolled_PS2:
000000b0	A0405000	push	PAR
000000b1	42500803	lix		PAR,0x0803	; PS/2 Status
waitPS2RxStatPolled:
000000b2	84805000	lpl		r8			; Read Status into r8
000000b3	2B880001	andi 	r8,r8,0x1
000000b4	C3FFFFFE	bez 	waitPS2RxStatPolled
getCharFromPS2Polled:
000000b5	42500802	lix 	PAR,0x0802
000000b6	84805000	lpl		r8
whilePS2RxStatPolled:
000000b7	A1504000	pull	PAR
000000b8	A1704000	pull	PC

;
; checkGetStat_PS2 - Checks the polling status
; Polled interface is active while the keyboard key is pressed
; returns
;	-1 if there is no character,
;	character if there is a character
;

checkGetStat_PS2:
000000b9	A0405000	push	PAR
000000ba	42500803	lix		PAR,0x0803	; PS/2 Status
000000bb	84805000	lpl		r8			; Read Status into r8
000000bc	2B880001	andi	r8,r8,0x1
000000bd	C3000004	bez		charNotPresent
000000be	42500802	lix		PAR,0x0802
000000bf	84805000	lpl		r8
000000c0	C0000002	bra		gotCharIn
charNotPresent:
000000c1	20802000	add		r8,ZERO,MINUS1
gotCharIn:
000000c2	A1504000	pull	PAR
000000c3	A1704000	pull	PC
;--------------------------------------------------------------------
; timers.asm

; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
000000c4	A0409000	push	r9
000000c5	42503802	lix		PAR,0x3802		; address of the mSec counter
000000c6	84905000	lpl		r9				; read the peripheral counter into r9
000000c7	20898000	add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000c8	84905000	lpl		r9				; check the elapsed time counter
000000c9	38389000	cmp		r8,r9
000000ca	CCFFFFFE	blt		loop_delay_mS
000000cb	A1904000	pull	r9
000000cc	A1704000	pull	PC

;
; delay_uS - delay for the number of uSecs
; pass mSec delay in r8
; Uses routine uses r9 (saved and restored)
;

delay_uS:
000000cd	A0409000	push	r9
000000ce	A0405000	push	PAR
000000cf	42503801	lix		PAR,0x3801		; address of the uSec counter
000000d0	84905000	lpl		r9				; read the peripheral counter into r9
000000d1	20898000	add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_uS:
000000d2	84905000	lpl		r9				; check the elapsed time counter
000000d3	38389000	cmp		r8,r9
000000d4	CCFFFFFE	blt		loop_delay_uS
000000d5	A1504000	pull	PAR
000000d6	A1904000	pull	r9
000000d7	A1704000	pull	PC

