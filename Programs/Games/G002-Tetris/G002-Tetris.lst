; Tetris game
; This program requires a build of R32V2020 that has memory mapped video
; Example: R32V2020_Build_V002_A4_CE6_MMVid

title: 	.string "FakeTris x.x1"
score:	.string "Score : "
scoreValue:	.long	0x0

; Tetris shapes drawn from
;	https://raw.githubusercontent.com/OneLoneCoder/videos/master/OneLoneCoder_Tetris.cpp

tetrisShape0:	.string "..X...X...X...X."
tetrisShape1:	.string "..X..XX...X....."
tetrisShape2:	.string ".....XX..XX....."
tetrisShape3:	.string "..X..XX..X......"
tetrisShape4:	.string ".X...XX...X....."
tetrisShape5:	.string ".X...X...XX....."
tetrisShape16:	.string "..X...X..XX....."

start:
00000000	D40000D0	bsr		clearScreen_mmXGA
; Print the title
00000001	42800000	lix		r8,0x0000			; Upper left corner of screen
00000002	D40000B1	bsr		setScreenCharLoc_mmXGA
00000003	42800000	lix		r8,title.lower		; clear the data memory addr pointer
00000004	D4000062	bsr		printString_mmXGA
; Print the score string
00000005	42800200	lix		r8,0x0200			; Two lines down on left side of screen
00000006	D40000AD	bsr		setScreenCharLoc_mmXGA
00000007	42800010	lix		r8,score.lower		; clear the data memory addr pointer
00000008	D400005E	bsr		printString_mmXGA
; Print the initial score value
00000009	D4000057	bsr		printScore_tetris
; Draw the border of the playfield
0000000a	D4000027	bsr		drawPlayfieldBorder
; Draw the first sprite
0000000b	4280011F	lix		r8,0x011f			; location 31,1
0000000c	D40000E6	bsr		setSpriteLocation_mmXGA
0000000d	428000E2	lix		r8,0xE2				; circle char for now
0000000e	D40000D2	bsr		putSprite_mmXGA		; put sprite on screen
loopProg:
0000000f	D4000125	bsr		checkGetStat_PS2
00000010	2B88005F	andi	r8,r8,0x5F			; upper to lower
00000011	39380041	cmpi	r8,0x41				; 'a'
00000012	D1000004	beq		moveSpriteLeft
00000013	39380044	cmpi	r8,0x44				; 'd'
00000014	D100000E	beq		moveSpriteRight
00000015	C0FFFFFA	bra		loopProg			; not an 'a' or 'd'
moveSpriteLeft:
00000016	426000C0	lix		DAR,currentSpriteX.lower
00000017	64906000	ldl		r9
00000018	39390015	cmpi	r9,0x15				; check to see if already at left edge
00000019	D1FFFFF6	beq		loopProg
0000001a	42800020	lix		r8,0x20				; write out a space to erase sprite
0000001b	D40000C5	bsr		putSprite_mmXGA
0000001c	23550001	subi	PAR,PAR,1			; go left
0000001d	428000E2	lix		r8,0xE2				; circle character (for now)
0000001e	64906000	ldl		r9
0000001f	23990001	subi	r9,r9,1
00000020	65609000	sdl		r9
00000021	C000000C	bra		storeToScreen
moveSpriteRight:
00000022	426000C0	lix		DAR,currentSpriteX.lower
00000023	64906000	ldl		r9
00000024	39390028	cmpi	r9,0x28				; check to see if already at edge
00000025	D1FFFFEA	beq		loopProg
00000026	42800020	lix		r8,0x20				; write out a space to erase sprite
00000027	D40000B9	bsr		putSprite_mmXGA
00000028	21550001	addi	PAR,PAR,1			; go right
00000029	428000E2	lix		r8,0xE2				; circle character (for now)
0000002a	64906000	ldl		r9
0000002b	21990001	addi	r9,r9,1
0000002c	65609000	sdl		r9
storeToScreen:
0000002d	D40000B3	bsr		putSprite_mmXGA
0000002e	42800064	lix		r8,100				; wait for a bit
0000002f	D4000110	bsr		delay_mS
00000030	C0FFFFDF	bra		loopProg

;
; drawBorder - draw the border around the FakeTis window
;

drawPlayfieldBorder:
00000031	A0408000	push	r8
00000032	A0409000	push	r9
; Draw upper left corner
00000033	42800014	lix		r8,0x0014			; location 20,0
00000034	31808000	sl8		r8,r8				; shift over the address
00000035	218800CC	addi	r8,r8,0xCC			; upper left corner chars
00000036	D400008B	bsr		putCharXY_mmXGA		; put upper left corner on screen
00000037	21550001	addi	PAR,PAR,1			; get ready to draw horizontal line
; Draw top horizontal line
00000038	42900014	lix		r9,0x14				; 20 chars wide top line
anotherHorizTop:
00000039	42800083	lix		r8,0x83				; horizontal line
0000003a	89508000	spbp	r8
0000003b	23990001	subi	r9,r9,1
0000003c	C7FFFFFD	bnz		anotherHorizTop
; Draw upper right corner
0000003d	428000CD	lix		r8,0xCD				; upper right corner
0000003e	81508000	spb		r8
; Draw vertical left side
0000003f	4290001E	lix		r9,0x1E				; 30 rows high
00000040	42800114	lix		r8,0x0114			; location 20,1
00000041	31808000	sl8		r8,r8
00000042	2188008C	addi	r8,r8,0x8C			; vertical line left side
00000043	D400007E	bsr		putCharXY_mmXGA		; put first vertical bar to the screen
anotherLeftVert:
00000044	81508000	spb		r8					; write character to the screen
00000045	21550040	addi	PAR,PAR,0x40
00000046	23990001	subi	r9,r9,1
00000047	C7FFFFFD	bnz		anotherLeftVert
; Draw vertical right side
00000048	4290001E	lix		r9,0x1E				; 30 rows high
00000049	42800129	lix		r8,0x0129			; location 41,1
0000004a	31808000	sl8		r8,r8
0000004b	2188008B	addi	r8,r8,0x8B			; vertical line right side
0000004c	D4000075	bsr		putCharXY_mmXGA		; put first vertical bar to the screen
anotherLeftVert2:
0000004d	81508000	spb		r8
0000004e	21550040	addi	PAR,PAR,0x40
0000004f	23990001	subi	r9,r9,1
00000050	C7FFFFFD	bnz		anotherLeftVert2
; Draw left bottom corner
00000051	42801F14	lix		r8,0x1F14			; location 20,31
00000052	31808000	sl8		r8,r8				; shift over the address
00000053	218800CB	addi	r8,r8,0xCB			; lower left corner
00000054	D400006D	bsr		putCharXY_mmXGA		; put bottom left corner on screen
00000055	21550001	addi	PAR,PAR,1			; get ready to draw horizontal line
00000056	42900014	lix		r9,0x14				; 20 chars wide
anotherHorizBottom:
00000057	42800084	lix		r8,0x84				; horizontal line
00000058	89508000	spbp	r8
00000059	23990001	subi	r9,r9,1
0000005a	C7FFFFFD	bnz		anotherHorizBottom
0000005b	428000CE	lix		r8,0xCE				; upper right corner
0000005c	89508000	spbp	r8
0000005d	A1904000	pull	r9
0000005e	A1804000	pull	r8
0000005f	A1704000	pull	PC

;
; printScore_tetris
;

printScore_tetris:

; lix		r8,0x0204			;
; bsr		setScreenCharLoc_mmXGA
; lix		r8,0x33
; bsr		putChar_mmXGA
; lix		r8,0x34
; bsr		putChar_mmXGA

00000060	42800208	lix		r8,0x0208			;
00000061	D4000052	bsr		setScreenCharLoc_mmXGA
00000062	4260001C	lix		DAR,scoreValue.lower
00000063	64806000	ldl		r8
00000064	D4000010	bsr		printLong_mmXGA
00000065	A1704000	pull	PC

; Routines that handle output to Memory Mapped XGA display
; Character set
;	https://github.com/douggilliland/R32V2020/wiki/Memory-Mapped-Display#Extended_Character_Set_Bitmaps

memMappedXGAConstants:	.string "MMX"
screenX:		.LONG	0x0
screenY:		.LONG	0x0
;screenAdr:		.LONG	0x0

;
; printString_mmXGA - Print a string to the screen
; String will wrap around to next line if it goes past the right side
; Minimal protection against going off the scree (just won't print)
; r8 points to the string in data memory
; Globals
;	screenX, screenY - print the first character here
;

printString_mmXGA:
00000066	A0408000	push	r8					; Not required but keeps string pointer the same on return
00000067	A0406000	push	DAR
00000068	21680000	addi	DAR,r8,0x0			; Set DAR to start of the string
00000069	D400003D	bsr		setParToCurrentCharLoc_mmXGA
printStringGetChar:
0000006a	68806000	ldbp	r8					; get the character
0000006b	39380000	cmpi	r8,0
0000006c	D1000005	beq		donePrintingString
0000006d	39350800	cmpi	PAR,0x0800			; next character would be off the screen so don't print it
0000006e	D1000003	beq		donePrintingString
0000006f	89508000	spbp	r8
00000070	C0FFFFFA	bra		printStringGetChar
donePrintingString:
00000071	A1604000	pull	DAR
00000072	A1804000	pull	r8
00000073	A1704000	pull	PC

;
; printLong_mmXGA - Print a long to the screen
; r8 - value to print to the screen
;

printLong_mmXGA:
00000074	A0408000	push	r8
00000075	A0409000	push	r9
00000076	A0408000	push	r8				; temporarily save r8
00000077	42800030	lix		r8,0x30			; print 0x
00000078	D400001A	bsr		putChar_mmXGA
00000079	42800078	lix		r8,0x78
0000007a	D4000018	bsr		putChar_mmXGA
0000007b	A1804000	pull	r8				; restore r8
0000007c	42900008	lix		r9,8			; loop counter
doNextprintLong_mmXGA:		; get nibble
0000007d	34808000	rol1	r8,r8
0000007e	34808000	rol1	r8,r8
0000007f	34808000	rol1	r8,r8
00000080	34808000	rol1	r8,r8
00000081	D4000006	bsr		printHexVal_mmXGA
00000082	23990001	subi	r9,r9,1
00000083	C7FFFFFA	bnz		doNextprintLong_mmXGA
00000084	A1904000	pull	r9
00000085	A1804000	pull	r8
00000086	A1704000	pull	PC

;
; printHexVal_mmXGA
;

printHexVal_mmXGA:
00000087	A0408000	push	r8
00000088	2B88000F	andi	r8,r8,0xf
00000089	39380009	cmpi	r8,9
0000008a	CC000004	blt		printHexLetter_mmXGA
0000008b	21880030	addi	r8,r8,0x30
0000008c	D4000006	bsr		putChar_mmXGA
0000008d	C0000003	bra		donePrintHexVal_mmXGA
printHexLetter_mmXGA:
0000008e	21880037	addi	r8,r8,0x37		; 'A' - 10
0000008f	D4000003	bsr		putChar_mmXGA
donePrintHexVal_mmXGA:
00000090	A1804000	pull	r8
00000091	A1704000	pull	PC

;
; putChar_mmXGA - Put a character to the screen
; r8 = Character to put to screen
; Globals:
;	screenX, screenY location of the place to put the character
;

putChar_mmXGA:
00000092	A0409000	push	r9
00000093	A040A000	push	r10
00000094	A0405000	push	PAR
00000095	A0406000	push	DAR
00000096	426000B0	lix		DAR,screenX.lower	; X location
00000097	64906000	ldl		r9
00000098	426000B4	lix		DAR,screenY.lower	; Y location
00000099	64A06000	ldl		r10
0000009a	25AA0040	muli	r10,r10,0x40
0000009b	205A9000	add		PAR,r10,r9			; PAR points to screen location
0000009c	81508000	spb		r8					; write character to Display
0000009d	426000B0	lix		DAR,screenX.lower	; X location
0000009e	64906000	ldl		r9
0000009f	21990001	addi	r9,r9,1
; should compare to see if end of line and increment y taking care to not overflow bottom of screen
000000a0	65609000	sdl		r9
000000a1	A1604000	pull	DAR
000000a2	A1504000	pull	PAR
000000a3	A1A04000	pull	r10
000000a4	A1904000	pull	r9
000000a5	A1704000	pull	PC

;
; setParToCurrentCharLoc_mmXGA - Sets PAR to the current character location
; Globals
;	screenX, screenY - print the first character here
;

setParToCurrentCharLoc_mmXGA:
000000a6	A0408000	push	r8
000000a7	A0409000	push	r9
000000a8	A0406000	push	DAR
000000a9	426000B0	lix		DAR,screenX.lower
000000aa	64806000	ldl		r8
000000ab	426000B4	lix		DAR,screenY.lower
000000ac	64906000	ldl		r9					; currentSpriteY is the next location
000000ad	25990040	muli	r9,r9,0x40			; 64 chars wide screen
000000ae	20589000	add		PAR,r8,r9
000000af	A1604000	pull	DAR
000000b0	A1904000	pull	r9
000000b1	A1804000	pull	r8
000000b2	A1704000	pull	PC

;
; setScreenCharLoc_mmXGA
; r8 - location
; 	d8..d15 = position Y
;	d8..d7 = position X
;

setScreenCharLoc_mmXGA:
000000b3	A0408000	push	r8
000000b4	A0409000	push	r9
000000b5	A0406000	push	DAR
000000b6	33908000	sr8		r9,r8
000000b7	2B9900FF	andi	r9,r9,0x0ff
000000b8	2B8800FF	andi	r8,r8,0x0ff
000000b9	426000B0	lix		DAR,screenX.lower
000000ba	65608000	sdl		r8
000000bb	426000B4	lix		DAR,screenY.lower
000000bc	65609000	sdl		r9
000000bd	A1604000	pull	DAR
000000be	A1904000	pull	r9
000000bf	A1804000	pull	r8
000000c0	A1704000	pull	PC

;
; putCharXY_mmXGA - Put a single character to the Memory Mapped XGA screen at a X,Y location
; r8 = X,Y,Character to put to screen
; 	d16..d23 = position Y
;	d8..d15 = position X
;	d0..d7 = character to write
; Registers used:
;	r8 - character to write (after processing)
;	r9 - X location
;	r10 - Y location
; Globals:
;	screenX, screenY location of the place to put the character
; Leaves PAR at character location
;

putCharXY_mmXGA:
000000c1	A040A000	push	r10
000000c2	A0409000	push	r9
;	push	PAR
000000c3	33908000	sr8		r9,r8				; r9 has the X location
000000c4	2B8800FF	andi	r8,r8,0xff			; mask off address bits leaving character
000000c5	33A09000	sr8		r10,r9				; r10 has the Y location
000000c6	2BAA00FF	andi	r10,r10,0xff		; mask off any extra bits
000000c7	2B9900FF	andi	r9,r9,0xff			; mask off any extra bits
000000c8	255A0040	muli	PAR,r10,0x40
000000c9	20559000	add		PAR,PAR,r9
000000ca	81508000	spb		r8					; write character to Display
;	pull	PAR
000000cb	A1904000	pull	r9
000000cc	A1A04000	pull	r10
000000cd	A1704000	pull	PC

;
; putCharIncrPAR_mmXGA - Put a character to the screen and increment PAR
; Useful for filling line with stuff
; r8 = Character to put to screen
; PAR = set to the current screen location
;

putCharIncrPAR_mmXGA:
000000ce	89508000	spbp	r8			; write character to peripheral bus
000000cf	A1704000	pull	PC

;
; clearScreen_mmXGA - "Clear" the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Performance:
;	Loop writes 4 locations in 6 instructions
;	80 nS/instruction * 6 instructions = 480 nS
;	512 times through loop
;	245.76 uS screen clear time
;

clearScreen_mmXGA:
000000d0	A0405000	push	PAR
000000d1	A0409000	push	r9
000000d2	A0408000	push	r8
000000d3	42500000	lix 	par,0x0000	; start of screen character memory
000000d4	42800020	lix		r8,0x20		; fill with spaces
000000d5	42900200	lix 	r9,0x200	; loopCount	(2K)
looper:
000000d6	89508000	spbp 	r8			; put the character to the screen
000000d7	89508000	spbp 	r8			; put the character to the screen
000000d8	89508000	spbp 	r8			; put the character to the screen
000000d9	89508000	spbp 	r8			; put the character to the screen
000000da	23990001	subi 	r9,r9,1		; decrement character counter
000000db	C7FFFFFB	bnz		looper		; loop until complete
000000dc	A1804000	pull	r8
000000dd	A1904000	pull	r9
000000de	A1504000	pull	PAR
000000df	A1704000	pull	PC
; Sprites handler

spritesStartHere:	.string "Sprites"
currentSpriteX:	.LONG	0x0
currentSpriteY:	.LONG	0x0
spriteMemLoc:	.LONG	0x0

;
; putSprite_mmXGA - Put a sprite character to the screen
; r8 = Sprite to put to screen
; Globals:
;	currentSpriteX, currentSpriteY location of the place to put the character
;

putSprite_mmXGA:
000000e0	A0409000	push	r9
000000e1	A040A000	push	r10
000000e2	A0405000	push	PAR
000000e3	A0406000	push	DAR
000000e4	426000C0	lix		DAR,currentSpriteX.lower
000000e5	64906000	ldl		r9					; X location
000000e6	426000C4	lix		DAR,currentSpriteY.lower
000000e7	64A06000	ldl		r10					; Y location
000000e8	25AA0040	muli	r10,r10,0x40		; 64 column offset
000000e9	205A9000	add		PAR,r10,r9			; PAR points to screen location
000000ea	81508000	spb		r8					; write character to Display
000000eb	426000C8	lix		DAR,spriteMemLoc.lower
000000ec	65605000	sdl		PAR
000000ed	A1604000	pull	DAR
000000ee	A1504000	pull	PAR
000000ef	A1A04000	pull	r10
000000f0	A1904000	pull	r9
000000f1	A1704000	pull	PC

;
; setSpriteLocation_mmXGA
; Sets the variables currentSpriteX and currentSpriteY in data memory
; r8 - screen location
;	d0-d7 = X coordinate
;	d8-d15 = Y coordinate
;

setSpriteLocation_mmXGA:
000000f2	A0406000	push	DAR
000000f3	A0409000	push	r9
000000f4	33908000	sr8		r9,r8
000000f5	2B9900FF	andi	r9,r9,0x00ff		; Y
000000f6	2B8800FF	andi	r8,r8,0x00ff		; X
000000f7	426000C0	lix		DAR,currentSpriteX.lower
000000f8	65608000	sdl		r8					; X location
000000f9	426000C4	lix		DAR,currentSpriteY.lower
000000fa	65609000	sdl		r9					; Y location
000000fb	A1904000	pull	r9
000000fc	A1604000	pull	DAR
000000fd	A1704000	pull	PC

;--------------------------------------------------------------------
; ps2.asm - Functions to read the PS/2 keyboard
;
; Address	Function
; x0800 	Latched Keyboard Data
; x0801 	Latched Keyboard Status
; x0802 	Polled Keyboard Data
; x0803 	Polled Keyboard Status
;
; getChar_PS2
; returns character received in r8
;

getChar_PS2:
000000fe	A0405000	push	PAR
000000ff	42500801	lix		PAR,0x0801	; PS/2 Status
waitPS2RxStat:
00000100	84805000	lpl		r8			; Read Status into r9
00000101	2B880001	andi 	r8,r8,1
00000102	C3FFFFFE	bez 	waitPS2RxStat
getCharFromPS2:
00000103	42500800	lix 	PAR,0x0800
00000104	84805000	lpl		r8
whilePS2RxStat:
00000105	A1504000	pull	PAR
00000106	A1704000	pull	PC

; waitReadPS2_UART
; wait for character from either
;	the PS/2 keyboard or the UART serial
; r8 = read character

waitReadPS2_UART:
00000107	A0405000	push	PAR
checkCharFromPS2:
00000108	42500801	lix		PAR,0x0801	; PS/2 Status
00000109	84805000	lpl		r8			; Read Status
0000010a	2B880001	andi	r8,r8,0x1	; =1 when char received
0000010b	C3000004	bez 	checkUARTStat
0000010c	42500800	lix 	PAR,0x0800	; PS/2 Data
0000010d	84805000	lpl		r8
0000010e	C0000007	bra		gotPS2Char
checkUARTStat:
0000010f	42501800	lix		PAR,0x1800	; UART Status
00000110	84805000	lpl		r8			; Read Status
00000111	2B880001	andi 	r8,r8,0x1	; =1 when char received
00000112	C3FFFFF6	bez 	checkCharFromPS2
00000113	42501801	lix 	PAR,0x1801	; UART Data
00000114	84805000	lpl		r8
gotPS2Char:
00000115	A1504000	pull	PAR
00000116	A1704000	pull	PC

; checkForCharAndDiscard - Check for a character in UART or PS/2
; Discard the character received
; return whether char was present (1) or no char was present (0)

checkForCharAndDiscard:
00000117	A0405000	push	PAR
00000118	42500801	lix		PAR,0x0801	; PS/2 Status
00000119	84805000	lpl		r8			; Read Status
0000011a	2B880001	andi	r8,r8,0x1	; =1 when char received
0000011b	C3000005	bez 	checkUARTStat2
0000011c	42500800	lix 	PAR,0x0800	; PS/2 Data
0000011d	84805000	lpl		r8			; throw away char
0000011e	42800001	lix		r8,0x1
0000011f	C000000A	bra		gotChar
checkUARTStat2:
00000120	42501800	lix		PAR,0x1800	; UART Status
00000121	84805000	lpl		r8			; Read Status
00000122	2B880001	andi 	r8,r8,0x1	; =1 when char received
00000123	C3000005	bez 	noCharReceived
00000124	42501801	lix 	PAR,0x1801	; UART Data
00000125	84805000	lpl		r8
00000126	42800001	lix		r8,1
00000127	C0000002	bra		gotChar
noCharReceived:
00000128	42800000	lix		r8,0
gotChar:
00000129	A1504000	pull	PAR
0000012a	A1704000	pull	PC

;
; waitCharPolled_PS2 - Check the polled character interface
; wait for a character
; return when a character is present
; returns character received in r8
;

waitCharPolled_PS2:
0000012b	A0405000	push	PAR
0000012c	42500803	lix		PAR,0x0803	; PS/2 Status
waitPS2RxStatPolled:
0000012d	84805000	lpl		r8			; Read Status into r8
0000012e	2B880001	andi 	r8,r8,0x1
0000012f	C3FFFFFE	bez 	waitPS2RxStatPolled
getCharFromPS2Polled:
00000130	42500802	lix 	PAR,0x0802
00000131	84805000	lpl		r8
whilePS2RxStatPolled:
00000132	A1504000	pull	PAR
00000133	A1704000	pull	PC

;
; checkGetStat_PS2 - Checks the polling status
; Polled interface is active while the keyboard key is pressed
; returns
;	-1 if there is no character,
;	character if there is a character
;

checkGetStat_PS2:
00000134	A0405000	push	PAR
00000135	42500803	lix		PAR,0x0803	; PS/2 Status
00000136	84805000	lpl		r8			; Read Status into r8
00000137	2B880001	andi	r8,r8,0x1
00000138	C3000004	bez		charNotPresent
00000139	42500802	lix		PAR,0x0802
0000013a	84805000	lpl		r8
0000013b	C0000002	bra		gotCharIn
charNotPresent:
0000013c	20802000	add		r8,ZERO,MINUS1
gotCharIn:
0000013d	A1504000	pull	PAR
0000013e	A1704000	pull	PC
;--------------------------------------------------------------------
; timers.asm

; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
0000013f	A0409000	push	r9
00000140	42503802	lix		PAR,0x3802		; address of the mSec counter
00000141	84905000	lpl		r9				; read the peripheral counter into r9
00000142	20898000	add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
00000143	84905000	lpl		r9				; check the elapsed time counter
00000144	38389000	cmp		r8,r9
00000145	CCFFFFFE	blt		loop_delay_mS
00000146	A1904000	pull	r9
00000147	A1704000	pull	PC

;
; delay_uS - delay for the number of uSecs
; pass mSec delay in r8
; Uses routine uses r9 (saved and restored)
;

delay_uS:
00000148	A0409000	push	r9
00000149	A0405000	push	PAR
0000014a	42503801	lix		PAR,0x3801		; address of the uSec counter
0000014b	84905000	lpl		r9				; read the peripheral counter into r9
0000014c	20898000	add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_uS:
0000014d	84905000	lpl		r9				; check the elapsed time counter
0000014e	38389000	cmp		r8,r9
0000014f	CCFFFFFE	blt		loop_delay_uS
00000150	A1504000	pull	PAR
00000151	A1904000	pull	r9
00000152	A1704000	pull	PC

