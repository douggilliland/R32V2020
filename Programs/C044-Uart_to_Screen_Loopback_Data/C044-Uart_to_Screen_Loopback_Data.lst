hello:	.string "R32V2020"
screenPtr:	.long 0x0000
screenBase:	.long 0x0
; Read UART character and put it to the SVGA Display
start:
00000000	D4000022		bsr	clearScreen
00000001	42800000		lix	r8,0x0			; Move cursor to home position
00000002	D400003B		bsr	setCharPos
readDataMemory:
00000003	42600000		lix	dar,hello.lower
00000004	64806000		ldl	r8			; get the long again
00000005	39808000		ens r8,r8		; endian swap for right byte order
00000006	D4000028		bsr	putChar
00000007	33808000		sr8	r8,r8
00000008	D4000026		bsr	putChar
00000009	33808000		sr8	r8,r8
0000000a	D4000024		bsr	putChar
0000000b	33808000		sr8	r8,r8
0000000c	D4000022		bsr	putChar
0000000d	20661000		add	dar,dar,r1	; increment the data pointer
0000000e	64806000		ldl	r8			; get the long again
0000000f	39808000		ens r8,r8		; endian swap for right byte order
00000010	D400001E		bsr	putChar
00000011	33808000		sr8	r8,r8
00000012	D400001C		bsr	putChar
00000013	33808000		sr8	r8,r8
00000014	D400001A		bsr	putChar
00000015	33808000		sr8	r8,r8
00000016	D4000018		bsr	putChar
00000017	4280000A		lix	r8,0xa			; Move cursor past banner
00000018	D4000025		bsr	setCharPos
readUartStatus:
00000019	40501800		lil	par,0x1800	; UART Status
waitUartRxChar:
0000001a	84905000		lpl	r9			; Read Status into r9
0000001b	25991000		and r9,r9,r1
0000001c	C3FFFFFE		bez waitUartRxChar
getCharFromUart:
0000001d	40501801		lil par,0x1801
0000001e	84805000		lpl	r8
0000001f	85508000		spl	r8			; echo the character
putCharToScreen:
00000020	D400000E		bsr	putChar		; put the character to the screen
00000021	C0FFFFF8		bra	readUartStatus

;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
;

clearScreen:
00000022	A0409000		push	r9				; save r9
00000023	A0408000		push	r8				; save r8
00000024	42800000		lix	r8,0x0			; set screen position to home
00000025	D4000018		bsr	setCharPos
00000026	42800020		lix	r8,0x0020		; fill with spaces
00000027	429007FE		lix r9,0x7FE		; loopCount	(1K minus 1)
looper:
00000028	D4000006		bsr	putChar
00000029	20992000		add r9,r9,MINUS1	; decrement character counter
0000002a	D2FFFFFE		bne	looper			; loop until complete
0000002b	A1804000		pull	r8
0000002c	A1904000		pull	r9
0000002d	A1704000		pull	PC				; rts

;
; putChar - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putChar:
0000002e	A040A000		push	r10					; save r10
0000002f	A0409000		push	r9					; save r9
00000030	A0406000		push	DAR
00000031	41900000		liu	r9,screenPtr.upper
00000032	4090000C		lil	r9,screenPtr.lower	; r9 is the ptr to screenPtr
00000033	20690000		add	DAR,r9,r0			; DAR points to screenPtr
00000034	64A06000		ldl	r10					; r10 has screenPtr value
00000035	205A0000		add	PAR,r10,r0			; Set PAR to screenPtr
00000036	81508000		spb	r8					; write character to screen
00000037	20AA1000		add	r10,r10,ONE			; increment screen pointer
00000038	6560A000		sdl	r10					; save new pointer
00000039	A1604000		pull DAR					; restore r9
0000003a	A1904000		pull r9					; restore r9
0000003b	A1A04000		pull r10					; restore r10
0000003c	A1704000		pull	PC					; rts

; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; screenBase has the base address of the screen memory
; screenPtr contains the address of the current char position

setCharPos:
0000003d	A0409000		push	r9						; save r9
0000003e	A040A000		push	r10						; save r10
0000003f	41A00000		liu	r10,screenBase.upper
00000040	40A00010		lil	r10,screenBase.lower
00000041	206A0000		add	DAR,r10,ZERO			; DAR points to the screenBase
00000042	64A06000		ldl	r10						; r10 has the screen base address
00000043	20A80000		add	r10,r8,ZERO				; add passed position to base
00000044	41900000		liu	r9,screenPtr.upper
00000045	4090000C		lil	r9,screenPtr.lower		; r9 is the ptr to screenPtr
00000046	20690000		add	DAR,r9,ZERO				; DAR points to screenPtr
00000047	6560A000		sdl	r10						; store new screen address
00000048	A1A04000		pull r10						; restore r10
00000049	A1904000		pull r9						; restore r9
0000004a	A1704000		pull	PC						; rts
