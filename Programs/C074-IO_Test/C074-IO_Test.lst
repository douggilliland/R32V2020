;
; C074-IO_Test - Read a line from the UART serial input
; Echo line to the serial port and to the screen
; Parse the line
;

prompt:			.string "R32V2020> "
; lineBuff is 80 characters long
lineBuff:		.string "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
syntaxError:	.string "Syntax error"
runningString:	.string "Running..."
hitAnyKey:		.string "Hit any key to exit..."
menuItem_01:	.string "01-Ring LED Test      "
menuItem_02:	.string "02-7 Segment LED Test "
menuItem_03:	.string "03-Pushbutton Test    "
menuItem_04:	.string "04-DIP Switch Test    "
menuItem_05:	.string "05-ANSI Screen Test   "
menuItem_06:	.string "06-Serial Port Test   "
menuItem_07:	.string "07-MCP23008 I2C Test  "
menuItem_08:	.string "08-MCP4231 SPI Test   "
menuItem_09:	.string "09-PS/2 Keyboard Test "
menuItem_10:	.string "10-Buzzer Test        "
menuItem_11:	.string "11-Timers Test        "
menuItem_12:	.string "12-TBD Test           "

;
; Read a line from the UART and parse the line
;

main:
00000000	D400026E		bsr		clearScreen
00000001	D4000004		bsr		printMenu
00000002	D400001E		bsr		getLine
00000003	D4000043		bsr		parseLine
00000004	C0FFFFFC		bra		main

;
; printMenu - Print the menu
;

printMenu:
00000005	A0408000		push	r8
00000006	42800094		lix		r8,menuItem_01.lower
00000007	D4000248		bsr		printString
00000008	428000AC		lix		r8,menuItem_02.lower
00000009	D4000246		bsr		printString
0000000a	428000C4		lix		r8,menuItem_03.lower
0000000b	D400024F		bsr		printLine
0000000c	428000DC		lix		r8,menuItem_04.lower
0000000d	D4000242		bsr		printString
0000000e	428000F4		lix		r8,menuItem_05.lower
0000000f	D4000240		bsr		printString
00000010	4280010C		lix		r8,menuItem_06.lower
00000011	D4000249		bsr		printLine
00000012	42800124		lix		r8,menuItem_07.lower
00000013	D400023C		bsr		printString
00000014	4280013C		lix		r8,menuItem_08.lower
00000015	D400023A		bsr		printString
00000016	42800154		lix		r8,menuItem_09.lower
00000017	D4000243		bsr		printLine
00000018	4280016C		lix		r8,menuItem_10.lower
00000019	D4000236		bsr		printString
0000001a	42800184		lix		r8,menuItem_11.lower
0000001b	D400023F		bsr		printLine
0000001c	42800000		lix		r8,prompt.lower
0000001d	D4000232		bsr		printString
0000001e	A1804000		pull	r8
0000001f	A1704000		pull	PC

;
; getLine - Reads the UART and fills a buffer with the characters received
; r8 received character - Character received from the UART
; r9 is constant - ENTER key on keyboard
; r10 is the input buffer length
; r11 is the BACK key on keyboard
; r12 used to test the backspace doesn't go past the start of the buffer
; DAR points to lineBuff current character position
;

getLine:
00000020	A0408000		push	r8
00000021	A0409000		push	r9
00000022	A040A000		push	r10
00000023	A040B000		push	r11
00000024	A040C000		push	r12
00000025	A0406000		push	DAR
00000026	4260000C		lix		DAR,lineBuff.lower	; DAR pointer = start of line buffer
00000027	42B0007F		lix		r11,0x7F			; BACK key - rubout
00000028	42A0004F		lix		r10,79				; number of chars in the line buffer
00000029	4290000D		lix		r9,0x0D				; ENTER key - ends the line
loopReadLine:
0000002a	D400020E		bsr		waitGetCharFromUART	; Get a character from the UART
0000002b	D4000252		bsr		putCharToANSIScreen	; Put the character to the screen
0000002c	D4000215		bsr		putCharToUART		; Echo character back to the UART
0000002d	30389000		cmp		r8,r9				; check if received char was end of line
0000002e	D1000006		beq		gotEOL
0000002f	3038B000		cmp		r8,r11
00000030	D1000009		beq		gotBackspace
00000031	69608000		sdbp	r8
;	add		DAR,DAR,ONE			; increment to next long in buffer
00000032	20AA2000		add		r10,r10,MINUS1
00000033	C7FFFFF7		bnz		loopReadLine		; Next char would overflow
	; tbd add code for line too long	
gotEOL:
00000034	4280000A		lix		r8,0x0A				; Echo line feed after CR
00000035	D4000248		bsr		putCharToANSIScreen	; Put the character to the screen
00000036	D400020B		bsr		putCharToUART		; Echo character back to the UART
00000037	61600000		sdb		r0					; null at end of line read
00000038	C0000007		bra		doneHandlingLine
gotBackspace:
00000039	20662000		add		DAR,DAR,MINUS1
0000003a	42C0000C		lix		r12,lineBuff.lower	; r12 pointer = start of line buffer
0000003b	303C6000		cmp		r12,DAR
0000003c	CFFFFFEE		bgt		loopReadLine
0000003d	206C0000		add		DAR,r12,r0
0000003e	C0FFFFEC		bra		loopReadLine
doneHandlingLine:
0000003f	A1604000		pull	DAR
00000040	A1C04000		pull	r12
00000041	A1B04000		pull	r11
00000042	A1A04000		pull	r10
00000043	A1904000		pull	r9
00000044	A1804000		pull	r8
00000045	A1704000		pull	PC

;
; parseLine - 
; line is in lineBuff
;

parseLine:
00000046	A0408000		push	r8
00000047	A0409000		push	r9
00000048	A0406000		push	DAR
00000049	4280000C		lix		r8,lineBuff.lower
0000004a	D40001AB		bsr		hexToSevenSeg
; Check to see if the command is 0x01
0000004b	42900001		lix		r9,0x01
0000004c	30389000		cmp		r8,r9
0000004d	D2000003		bne		skipTo2
0000004e	D400003E		bsr		testRoutine1
0000004f	C0000037		bra		doneTests
; Check to see if the command is 0x02
skipTo2:
00000050	42900002		lix		r9,0x02
00000051	30389000		cmp		r8,r9
00000052	D2000003		bne		skipTo3
00000053	D4000055		bsr		testRoutine2
00000054	C0000032		bra		doneTests
; Check to see if the command is 0x03
skipTo3:
00000055	42900003		lix		r9,0x03
00000056	30389000		cmp		r8,r9
00000057	D2000003		bne		skipTo4
00000058	D400006A		bsr		testRoutine3
00000059	C000002D		bra		doneTests
; Check to see if the command is 0x04
skipTo4:
0000005a	42900004		lix		r9,0x04
0000005b	30389000		cmp		r8,r9
0000005c	D2000003		bne		skipTo5
0000005d	D4000087		bsr		testRoutine4
0000005e	C0000028		bra		doneTests
; Check to see if the command is 0x05
skipTo5:
0000005f	42900005		lix		r9,0x05
00000060	30389000		cmp		r8,r9
00000061	D2000003		bne		skipTo6
00000062	D4000096		bsr		testRoutine5
00000063	C0000023		bra		doneTests
; Check to see if the command is 0x06
skipTo6:
00000064	42900006		lix		r9,0x06
00000065	30389000		cmp		r8,r9
00000066	D2000003		bne		skipTo7
00000067	D40000A0		bsr		testRoutine6
00000068	C000001E		bra		doneTests
; Check to see if the command is 0x07
skipTo7:
00000069	42900007		lix		r9,0x07
0000006a	30389000		cmp		r8,r9
0000006b	D2000003		bne		skipTo8
0000006c	D40000AA		bsr		testRoutine7
0000006d	C0000019		bra		doneTests
; Check to see if the command is 0x08
skipTo8:
0000006e	42900008		lix		r9,0x08
0000006f	30389000		cmp		r8,r9
00000070	D2000003		bne		skipTo9
00000071	D4000119		bsr		testRoutine8
00000072	C0000014		bra		doneTests
; Check to see if the command is 0x09
skipTo9:
00000073	42900009		lix		r9,0x09
00000074	30389000		cmp		r8,r9
00000075	D2000003		bne		skipTo10
00000076	D400013C		bsr		testRoutine9
00000077	C000000F		bra		doneTests
; Check to see if the command is 0x10
skipTo10:
00000078	42900010		lix		r9,0x10
00000079	30389000		cmp		r8,r9
0000007a	D2000003		bne		skipTo11
0000007b	D4000145		bsr		testRoutine10
0000007c	C000000A		bra		doneTests
;
skipTo11:
0000007d	42900011		lix		r9,0x11
0000007e	30389000		cmp		r8,r9
0000007f	D2000003		bne		skipTo12
00000080	D400014B		bsr		testRoutine11
00000081	C0000005		bra		doneTests

skipTo12:
00000082	A0408000		push	r8
00000083	42800060		lix		r8,syntaxError.lower
00000084	D40001CB		bsr		printString
00000085	A1804000		pull	r8
doneTests:
00000086	428007D0		lix		r8,2000
00000087	D400022C		bsr		delay_mS
00000088	A1604000		pull	DAR
00000089	A1904000		pull	r9
0000008a	A1804000		pull	r8
0000008b	A1704000		pull	PC
	
;
; Test Ring LEDs
;

testRoutine1:
0000008c	A0408000		push	r8
0000008d	A0409000		push	r9
0000008e	42800070		lix		r8,runningString.lower
0000008f	D40001C0		bsr		printString
00000090	42800094		lix		r8,menuItem_01.lower
00000091	D40001C9		bsr		printLine
00000092	42901000		lix		r9,0x1000			; ring has been circled
reload:
00000093	42800001		lix		r8,1
loopLEDRing:
00000094	D400000D		bsr		putValueToRingLEDs	; put the switches to the 7 Segment LED
00000095	A0408000		push	r8
00000096	428000FA		lix		r8,250				; wait for 1 second
00000097	D400021C		bsr		delay_mS
00000098	A1804000		pull	r8
00000099	25808000		sl1		r8,r8
0000009a	30389000		cmp		r8,r9
0000009b	D2FFFFF9		bne		loopLEDRing
	;bra		reload
0000009c	42800000		lix		r8,0
0000009d	D4000004		bsr		putValueToRingLEDs	; put the switches to the 7 Segment LED
0000009e	A1904000		pull	r9
0000009f	A1804000		pull	r8
000000a0	A1704000		pull	PC
	
; putValueToRingLEDs
; passed r8 - value to send to the ring LEDs

putValueToRingLEDs:
000000a1	A0405000		push	PAR
000000a2	A0408000		push	r8
000000a3	42504800		lix		PAR,0x4800		; Ring LED address
000000a4	85508000		spl		r8				; Write out LED bits
000000a5	A1804000		pull	r8
000000a6	A1504000		pull	PAR
000000a7	A1704000		pull	PC

;
; Seven Segment Display Test
;

testRoutine2:
000000a8	A0408000		push	r8
000000a9	42800070		lix		r8,runningString.lower
000000aa	D40001A5		bsr		printString
000000ab	428000AC		lix		r8,menuItem_02.lower
000000ac	D40001AE		bsr		printLine
000000ad	41801234		liu		r8,0x1234
000000ae	40805678		lil		r8,0x5678
000000af	D400000C		bsr		wr7Seg8Dig
000000b0	428007D0		lix		r8,2000
000000b1	D4000202		bsr		delay_mS
000000b2	4180ABCD		liu		r8,0xABCD
000000b3	4080EF12		lil		r8,0xEF12
000000b4	D4000007		bsr		wr7Seg8Dig
000000b5	428007D0		lix		r8,2000
000000b6	D40001FD		bsr		delay_mS
000000b7	42800000		lix		r8,0x0
000000b8	D4000003		bsr		wr7Seg8Dig
000000b9	A1804000		pull	r8
000000ba	A1704000		pull	PC
	
; wr7Seg8Dig
; passed r8 - value to send to the 7 seg display

wr7Seg8Dig:
000000bb	A0405000		push	PAR
000000bc	A0408000		push	r8
000000bd	42503000		lix		PAR,0x3000		; Seven Segment LED lines
000000be	85508000		spl		r8				; Write out LED bits
000000bf	A1804000		pull	r8
000000c0	A1504000		pull	PAR
000000c1	A1704000		pull	PC
	
;
; Pushbutton Test
;

testRoutine3:
000000c2	A0408000		push	r8
000000c3	A0409000		push	r9
000000c4	A040A000		push	r10
000000c5	42800070		lix		r8,runningString.lower
000000c6	D4000189		bsr		printString
000000c7	428000C4		lix		r8,menuItem_03.lower
000000c8	D4000192		bsr		printLine
000000c9	42A00000		lix		r10,0x0
loopSwRead:
000000ca	D4000011		bsr		readSws		; returns switches and pushbuttons in r8
000000cb	42900007		lix		r9,0x7
000000cc	23889000		and		r8,r8,r9
000000cd	42900030		lix		r9,0x30
000000ce	20889000		add		r8,r8,r9
000000cf	3038A000		cmp		r8,r10
000000d0	D1FFFFFA		beq		loopSwRead
000000d1	20A80000		add		r10,r8,r0
000000d2	D40001AB		bsr		putCharToANSIScreen
000000d3	D4000193		bsr		newLine
000000d4	428000FA		lix		r8,250
000000d5	D40001DE		bsr		delay_mS
000000d6	C0FFFFF4		bra		loopSwRead
000000d7	A1A04000		pull	r10
000000d8	A1904000		pull	r9
000000d9	A1804000		pull	r8
000000da	A1704000		pull	PC
	
;
; readSws
; switches value returned in r8
; switches are high when pressed
; Switches d0-d2 are the pushbutton switches (inverted)
; 	Pushbutton switches are debounced
; Switches d3-10 are the DIP switches (not inverted)
;

readSws:
000000db	A0405000		push	PAR
000000dc	A0409000		push	r9
000000dd	42900007		lix		r9,0x7
000000de	42502000		lix		PAR,0x2000	; Switches address
000000df	84805000		lpl		r8			; Read switches into r9
000000e0	24889000		xor		r8,r8,r9
000000e1	A1904000		pull	r9
000000e2	A1504000		pull	PAR
000000e3	A1704000		pull	PC
	
;
; DIP Switch Test
;

testRoutine4:
000000e4	42800070		lix		r8,runningString.lower
000000e5	D400016A		bsr		printString
000000e6	428000DC		lix		r8,menuItem_04.lower
000000e7	D4000173		bsr		printLine
000000e8	42A00000		lix		r10,0x0
loopSwRead2:
000000e9	D4FFFFF2		bsr		readSws		; returns switches and pushbuttons in r8
000000ea	27808000		sr1		r8,r8
000000eb	27808000		sr1		r8,r8
000000ec	27808000		sr1		r8,r8
000000ed	27808000		sr1		r8,r8
000000ee	429000FF		lix		r9,0xff
000000ef	23889000		and		r8,r8,r9
000000f0	3038A000		cmp		r8,r10
000000f1	D1FFFFF8		beq		loopSwRead2
000000f2	20A80000		add		r10,r8,r0
000000f3	D4FFFFC8		bsr		wr7Seg8Dig
;	bsr		newLine
000000f4	428000FA		lix		r8,250
000000f5	D40001BE		bsr		delay_mS
000000f6	C0FFFFF3		bra		loopSwRead2
000000f7	A1704000		pull	PC
	
;
; ANSI Screen Test
;

testRoutine5:
000000f8	A0408000		push	r8
000000f9	A0409000		push	r9
000000fa	42800070		lix		r8,runningString.lower
000000fb	D4000154		bsr		printString
000000fc	428000F4		lix		r8,menuItem_05.lower
000000fd	D400015D		bsr		printLine
000000fe	429000FF		lix		r9,0xff		; end with backspace
000000ff	42800020		lix		r8,0x20			; start with a space
anotherCharT5:
00000100	D400017D		bsr		putCharToANSIScreen
00000101	20881000		add		r8,r8,ONE
00000102	30389000		cmp		r8,r9
00000103	D2FFFFFD		bne		anotherCharT5
00000104	A1904000		pull	r9
00000105	A1804000		pull	r8
00000106	A1704000		pull	PC
	
;
; Serial Port Test
;

testRoutine6:
00000107	A0408000		push	r8
00000108	A0409000		push	r9
00000109	42800070		lix		r8,runningString.lower
0000010a	D4000145		bsr		printString
0000010b	4280010C		lix		r8,menuItem_06.lower
0000010c	D400014E		bsr		printLine
0000010d	4290007F		lix		r9,0x7f			; end with backspace
0000010e	42800020		lix		r8,0x20			; start with a space
anotherCharT6:
0000010f	D4000132		bsr		putCharToUART
00000110	20881000		add		r8,r8,ONE
00000111	30389000		cmp		r8,r9
00000112	D2FFFFFD		bne		anotherCharT6
00000113	A1904000		pull	r9
00000114	A1804000		pull	r8
00000115	A1704000		pull	PC
	
;
; MCP23008 I2C Test
;

testRoutine7:
00000116	42800070		lix		r8,runningString.lower
00000117	D4000138		bsr		printString
00000118	42800124		lix		r8,menuItem_07.lower
00000119	D4000141		bsr		printLine
; Code to initialize I2CIO8 card
0000011a	D4000016		bsr		init_Regs_I2CIO8	; initialize the MCP23008 on the I2CIO8
restartLoop:
0000011b	42800008		lix		r8,0x08
loopMain:
0000011c	D400002F		bsr		wrI2CAdrDat_MCP23008	; write to LEDs
0000011d	D4000006		bsr		delayFromJumpers
0000011e	27808000		sr1		r8,r8					; shift LED bit right by 1
0000011f	30380000		cmp		r8,r0
00000120	D2FFFFFC		bne		loopMain
00000121	C0FFFFFA		bra		restartLoop				; restart the shifting
00000122	A1704000		pull	PC
	
;
; delayFromJumpers - Set delay based on header value
; returns: nothing (restores registers at return)
;

delayFromJumpers:
00000123	A0409000		push	r9
00000124	A0408000		push	r8
00000125	D4000034	 	bsr		readI2CDat_MCP23008		; read headers into r8
00000126	24882000		xor		r8,r8,MINUS1			; invert headers
00000127	429000F0		lix		r9,0xF0
00000128	23889000		and		r8,r8,r9				; keep 8 bits
00000129	25808000		sl1		r8,r8
0000012a	25808000		sl1		r8,r8
0000012b	25808000		sl1		r8,r8
0000012c	D4000187		bsr		delay_mS
0000012d	A1804000		pull	r8
0000012e	A1904000		pull	r9
0000012f	A1704000		pull	PC

;
; init_Regs_I2CIO8 - Set IO Dir
;

init_Regs_I2CIO8:
00000130	A0408000		push	r8
	; Write 0x22 to IOCON register (not sequential operations)
00000131	42800001		lix		r8,0x01		; I2C_Ctrl = START
00000132	D400004A		bsr		write_I2C_Ctrl_Reg
00000133	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
00000134	D4000039		bsr		write_I2C_Data_Address_Reg
00000135	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
00000136	D4000046		bsr		write_I2C_Ctrl_Reg
00000137	42800005		lix		r8,0x05		; MCP23008 IOCON
00000138	D4000035		bsr		write_I2C_Data_Address_Reg
00000139	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
0000013a	D4000042		bsr		write_I2C_Ctrl_Reg	
0000013b	42800022		lix		r8,0x22		; SEQOP = Disabled, INTPOL = Active-high
0000013c	D4000031		bsr		write_I2C_Data_Address_Reg
	; Write 0xF0 to Direction Control register
0000013d	42800001		lix		r8,0x01		; I2C_Ctrl = START
0000013e	D400003E		bsr		write_I2C_Ctrl_Reg
0000013f	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
00000140	D400002D		bsr		write_I2C_Data_Address_Reg
00000141	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
00000142	D400003A		bsr		write_I2C_Ctrl_Reg
00000143	42800000		lix		r8,0x00		; MCP23008 IODIR
00000144	D4000029		bsr		write_I2C_Data_Address_Reg
00000145	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
00000146	D4000036		bsr		write_I2C_Ctrl_Reg
00000147	428000F0		lix		r8,0xF0		; Input and output bits
00000148	D4000025		bsr		write_I2C_Data_Address_Reg
00000149	A1804000		pull	r8
0000014a	A1704000		pull	PC

;
; wrI2CAdrDat_MCP23008 - Write address to the I2C bus
; Address 0x5800 -> DATA (write/read) or SLAVE ADDRESS (write)  
; Address 0x5801 -> Command/Status Register (write/read)
; r8 is the value to write
;

wrI2CAdrDat_MCP23008:
0000014b	A0408000		push	r8
0000014c	42800001		lix		r8,0x01		; I2C_Ctrl = START
0000014d	D400002F		bsr		write_I2C_Ctrl_Reg
0000014e	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
0000014f	D400001E		bsr		write_I2C_Data_Address_Reg
00000150	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
00000151	D400002B		bsr		write_I2C_Ctrl_Reg	
00000152	4280000A		lix		r8,0x0A		; MCP23008 OLAT
00000153	D400001A		bsr		write_I2C_Data_Address_Reg
00000154	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
00000155	D4000027		bsr		write_I2C_Ctrl_Reg	
00000156	A1804000		pull	r8			; Data to write is in r8
00000157	D4000016		bsr		write_I2C_Data_Address_Reg
00000158	A1704000		pull	PC
	
;
; readI2CDat_MCP23008 - Read data from the I2C bus
; Address 0x5800 -> DATA (write/read) or SLAVE ADDRESS (write)  
; Address 0x5801 -> Command/Status Register (write/read)
; r8 is the value to write
;

readI2CDat_MCP23008:
	; write the GPIO address register
00000159	42800001		lix		r8,0x01		; I2C_Ctrl = START
0000015a	D4000022		bsr		write_I2C_Ctrl_Reg
0000015b	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
0000015c	D4000011		bsr		write_I2C_Data_Address_Reg
0000015d	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
0000015e	D400001E		bsr		write_I2C_Ctrl_Reg	
0000015f	42800009		lix		r8,0x09		; MCP23008 - GPIO register address
00000160	D400000D		bsr		write_I2C_Data_Address_Reg
	; Read the GPIO line value
00000161	42800001		lix		r8,0x01		; I2C_Ctrl = START
00000162	D400001A		bsr		write_I2C_Ctrl_Reg
00000163	42800041		lix		r8,0x41		; I2C read command at slave address = 0x20
00000164	D4000009		bsr		write_I2C_Data_Address_Reg
00000165	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
00000166	D4000016		bsr		write_I2C_Ctrl_Reg	
00000167	D400000C		bsr		read_I2C_Data_Reg
00000168	A0408000		push	r8
00000169	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
0000016a	D4000012		bsr		write_I2C_Ctrl_Reg	
0000016b	A1804000		pull	r8
0000016c	A1704000		pull	PC
	
;
; write_I2C_Data_Address_Reg
;

write_I2C_Data_Address_Reg:
0000016d	A0405000		push	PAR
0000016e	42505800		lix		PAR,0x5800	; I2C Address/register
0000016f	85508000		spl		r8			; Write control register
00000170	D4000011		bsr		i2c_ack
00000171	A1504000		pull	PAR
00000172	A1704000		pull	PC

;
; read_I2C_Data_Reg - Read I2C data into r8
;

read_I2C_Data_Reg:
00000173	A0405000		push	PAR
00000174	42505800		lix		PAR,0x5800	; I2C Data Address
00000175	42800054		lix		r8,0x54
00000176	85508000		spl		r8
00000177	D400000A		bsr		i2c_ack
00000178	42505800		lix		PAR,0x5800	; I2C Data Address
00000179	84805000		lpl		r8
0000017a	A1504000		pull	PAR
0000017b	A1704000		pull	PC
	
;
; write_I2C_Ctrl_Reg
; Command Register (write):
;	bit 7-2	= Reserved
;	bit 1-0	= 
;		00: IDLE
;		01: START
;		10: nSTART
;		11: STOP
;

write_I2C_Ctrl_Reg:
0000017c	A0405000		push	PAR
0000017d	42505801		lix		PAR,0x5801	; I2C Control register
0000017e	85508000		spl		r8			; Write control register
0000017f	A1504000		pull	PAR
00000180	A1704000		pull	PC

;
; i2c_ack - wait for transfer to complete
; Status Register (read):
;	bit 7-2	= Reserved
;	bit 1 	= ERROR 	(I2C transaction error)
;	bit 0 	= BUSY 	(I2C bus busy)
;

i2c_ack:
00000181	A0405000		push	PAR
00000182	A0408000		push	r8
00000183	42505801		lix		PAR,0x5801	; Control register
i2c_ack_loop:
00000184	84805000		lpl		r8
00000185	23881000		and		r8,r8,r1	; busy bit is least significant bit
00000186	C4FFFFFE		be1		i2c_ack_loop
00000187	A1804000		pull	r8
00000188	A1504000		pull	PAR
00000189	A1704000		pull	PC

;
; MCP4231 SPI Test
;

testRoutine8:
0000018a	42800070		lix		r8,runningString.lower
0000018b	D40000C4		bsr		printString
0000018c	4280013C		lix		r8,menuItem_08.lower
0000018d	D40000CD		bsr		printLine
; Write ramp output to SPI-POTX2
; x6000-x67FF (2KB)	- SPI Address Range
; x6000 - d0-d7 = Write value
; x6001 - d0 = Write Chip Select line
; x6002 - d0 = Busy flag
0000018e	42900080		lix		r9,0x80				; loop terminal count
reloadr8:
0000018f	42800000		lix		r8,0x00				; sent out low voltage from pot
loopForever:
00000190	D4000006		bsr		writeSPI0
00000191	20881000		add		r8,r8,r1
00000192	30389000		cmp		r8,r9
00000193	D2FFFFFD		bne		loopForever
00000194	C0FFFFFB		bra		reloadr8
00000195	A1704000		pull	PC
	
;
; writeSPI0 - Write to the first SPI pot
; r8 contains the data to write out
; 16-bit command Fig 7-1 in the data sheet
;

writeSPI0:
00000196	A0408000		push	r8
00000197	42800000		lix		r8,0x00			; start chip select
00000198	42506001		lix		PAR,0x6001		; Chip Select Address
00000199	85508000		spl		r8				; Turn on Chip Select
0000019a	42800000		lix		r8,0x00			; register select - REG0
0000019b	42506000		lix		PAR,0x6000		; Data address
0000019c	85508000		spl		r8				; Store data to the SPI bus
0000019d	D400000B		bsr		waitSPITxRdy	; Wait for Tx Ready
0000019e	A1804000		pull	r8				; data to write
0000019f	A0408000		push	r8
000001a0	42506000		lix		PAR,0x6000		; data address
000001a1	85508000		spl		r8				; Store data to the SPI bus
000001a2	D4000006		bsr		waitSPITxRdy	; Wait for Tx Ready
000001a3	42800001		lix		r8,0x01			; end chip select
000001a4	42506001		lix		PAR,0x6001		; Chip select address
000001a5	85508000		spl		r8				; Turn off chip select
000001a6	A1804000		pull	r8
000001a7	A1704000		pull	PC				; return	

;
; waitSPITxRdy - wait for SPI transfer to be complete
; Don't write until the busy cycles high then low
; R32V2020 is much faster than the SPI interface
; Need to wait for the busy to get set and the cleared again
;

waitSPITxRdy:
000001a8	A0408000		push	r8			; save r8 since it's used by calling function(s)
000001a9	42506002		lix		PAR,0x6002	; SPI busy bit address
loopSPIRdy:				; wait until busy gets set
000001aa	84805000		lpl		r8			; load the busy bit
000001ab	30380000		cmp		r8,r0		; 0 = not yet set
000001ac	D1FFFFFE		beq		loopSPIRdy	; wait until busy is set
loopSPIRdy2:			; wait while busy is set
000001ad	84805000		lpl		r8			; load the busy bit
000001ae	30381000		cmp		r8,r1		; 1 = busy is set
000001af	D1FFFFFE		beq		loopSPIRdy2	; still busy
000001b0	A1804000		pull	r8			; restore r8
000001b1	A1704000		pull	PC			; return

;
; PS/2 Keyboard Test
; 0x0D
;

testRoutine9:
000001b2	A0408000		push	r8
000001b3	A0409000		push	r9
000001b4	42800070		lix		r8,runningString.lower
000001b5	D400009A		bsr		printString
000001b6	42800154		lix		r8,menuItem_09.lower
000001b7	D40000A3		bsr		printLine
000001b8	4290000D		lix		r9,0x0D
loopForeverT9:
000001b9	D4000103		bsr		getPS2Char
000001ba	D40000C3		bsr		putCharToANSIScreen
000001bb	30389000		cmp		r8,r9
000001bc	D2FFFFFD		bne		loopForeverT9
000001bd	A1904000		pull	r9
000001be	A1804000		pull	r8
000001bf	A1704000		pull	PC

;
; Buzzer Test
;

testRoutine10:
000001c0	A0408000		push	r8
000001c1	42800070		lix		r8,runningString.lower
000001c2	D400008D		bsr		printString
000001c3	4280016C		lix		r8,menuItem_10.lower
000001c4	D4000096		bsr		printLine
000001c5	D40000D6		bsr		enableBuzzer
000001c6	42800100		lix		r8,0x100
000001c7	D40000EC		bsr		delay_mS
000001c8	D40000DF		bsr		disableBuzzer
000001c9	A1804000		pull	r8
000001ca	A1704000		pull	PC
	
;
; Timers Test
; 	Address	Timer
; 	X3800	Elapsed Time Counter
;	X3801	MicroSeconds Counter
;	X3802	Milliseconds Counter
;	X3803	CPU Instruction Counter
;

testRoutine11:
000001cb	A0408000		push	r8
000001cc	42800070		lix		r8,runningString.lower
000001cd	D4000082		bsr		printString
000001ce	42800184		lix		r8,menuItem_11.lower
000001cf	D400008B		bsr		printLine
000001d0	D4000003		bsr		testTimers
000001d1	A1804000		pull	r8
000001d2	A1704000		pull	PC
	
testTimers:
000001d3	A0408000		push	r8
000001d4	A0409000		push	r9
000001d5	A0405000		push	PAR
000001d6	42503803		lix		PAR,0x3803		; CPU Instruction Convert
000001d7	84905000		lpl		r9				; Get the counter value
000001d8	24992000		xor		r9,r9,MINUS1	; two's complement of the value read in
000001d9	20991000		add		r9,r9,ONE
000001da	00000000		nop
000001db	00000000		nop
000001dc	00000000		nop
000001dd	00000000		nop
000001de	00000000		nop
000001df	84805000		lpl		r8
000001e0	20898000		add		r8,r9,r8
000001e1	42900008		lix		r9,0x08			; The above should have taken 8 CPU cycles
000001e2	30398000		cmp		r9,r8
000001e3	D1000005		beq		CPUCycleTimerDone
000001e4	42503000		lix		PAR,0x3000
000001e5	4180DEAD		liu		r8,0xDEAD
000001e6	40800001		lil		r8,0x0001
000001e7	85508000		spl		r8	
CPUCycleTimerDone:
000001e8	A1504000		pull	PAR
000001e9	A1904000		pull	r9
000001ea	A1804000		pull	r8
000001eb	A1704000		pull	PC

;
; TBD Test
;

testRoutine12:
000001ec	A0408000		push	r8
000001ed	A0409000		push	r9
000001ee	42800070		lix		r8,runningString.lower
000001ef	D4000060		bsr		printString
000001f0	4280019C		lix		r8,menuItem_12.lower
000001f1	D4000069		bsr		printLine
	;
000001f2	A1904000		pull	r9
000001f3	A1804000		pull	r8
000001f4	A1704000		pull	PC
	
;
; hexToSevenSeg - Convert a two ASCII digit value into a hex byte
; Passed: r8 points to the start of the hex string
; Returned: r8 contains the hex value of the string
; Put the byte to the Seven Segment Display
;

hexToSevenSeg:
000001f5	A0409000		push	r9
000001f6	A0406000		push	DAR
000001f7	A0405000		push	PAR
000001f8	42900000		lix		r9,0
000001f9	20680000		add		DAR,r8,ZERO		; Address of lineBuff (passed into this routine)
000001fa	68806000		ldbp	r8
000001fb	D4000010		bsr		asciiToHex
000001fc	22998000		or		r9,r9,r8
000001fd	25909000		sl1		r9,r9
000001fe	25909000		sl1		r9,r9
000001ff	25909000		sl1		r9,r9
00000200	25909000		sl1		r9,r9
	;add		DAR,DAR,ONE
00000201	60806000		ldb		r8
00000202	D4000009		bsr		asciiToHex
00000203	22998000		or		r9,r9,r8
00000204	42503000		lix		PAR,0x3000		; seven segment display
00000205	85509000		spl		r9
00000206	20890000		add		r8,r9,ZERO
00000207	A1504000		pull	PAR
00000208	A1604000		pull	DAR
00000209	A1904000		pull	r9
0000020a	A1704000		pull	PC

;
; asciiToHex - Convert a single ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
; Result is returned in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
;

asciiToHex:
0000020b	A0409000		push	r9
0000020c	42900066		lix		r9,0x66		; check if letter is > 'f'
0000020d	30398000		cmp		r9,r8
0000020e	CF000025		bgt		a2h_Error
0000020f	42900030		lix		r9,0x30		; check if letter is < '0'
00000210	30398000		cmp		r9,r8	
00000211	CC000022		blt		a2h_Error
00000212	4290003A		lix		r9,0x3A		; check if letter is between '0' and '9' inclusively
00000213	30398000		cmp		r9,r8
00000214	CC000011		blt		gotDigit
00000215	42900041		lix		r9,0x41		; check if letter is between '9' and 'A' exclusively
00000216	30398000		cmp		r9,r8
00000217	CC00001C		blt		a2h_Error
00000218	42900047		lix		r9,0x47		; check if letter is between 'A' and F' inclusively
00000219	30398000		cmp		r9,r8
0000021a	CC000012		blt		gotUpperLetter
0000021b	42900061		lix		r9,0x61		; check if between 'F' and 'a' exclusively
0000021c	30398000		cmp		r9,r8
0000021d	CC000016		blt		a2h_Error
; Lower case letter
0000021e	42900057		lix		r9,0x57
0000021f	24992000		xor		r9,r9,MINUS1
00000220	20991000		add		r9,r9,ONE
00000221	20889000		add		r8,r8,r9
00000222	4290000F		lix		r9,0x0F
00000223	23889000		and		r8,r8,r9
00000224	C0000012		bra		doneConvA2H
gotDigit:
00000225	42900030		lix		r9,0x30
00000226	24992000		xor		r9,r9,MINUS1
00000227	20991000		add		r9,r9,ONE
00000228	20889000		add		r8,r8,r9
00000229	4290000F		lix		r9,0x0F
0000022a	23889000		and		r8,r8,r9
0000022b	C000000B		bra		doneConvA2H
gotUpperLetter:
0000022c	42900037		lix		r9,0x37
0000022d	24992000		xor		r9,r9,MINUS1
0000022e	20991000		add		r9,r9,ONE
0000022f	20889000		add		r8,r8,r9
00000230	4290000F		lix		r9,0x0F
00000231	23889000		and		r8,r8,r9
00000232	C0000004		bra		doneConvA2H
a2h_Error:
00000233	42800060		lix		r8,syntaxError.lower
00000234	D400001B		bsr		printString
00000235	4280DEAD		lix		r8,0xDEAD
doneConvA2H:
00000236	A1904000		pull	r9
00000237	A1704000		pull	PC

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
00000238	A0405000		push	PAR
00000239	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
0000023a	84805000		lpl		r8			; Read Status into r8
0000023b	23881000		and 	r8,r8,ONE
0000023c	C3FFFFFE		bez 	waitUartRxStat
0000023d	42501801		lix 	PAR,0x1801
0000023e	84805000		lpl		r8
0000023f	A1504000		pull	PAR
00000240	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
00000241	A0409000		push	r9
00000242	A0405000		push	PAR
00000243	A040A000		push	r10
00000244	42A00002		lix		r10,0x2
00000245	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
00000246	84905000		lpl		r9			; Read Status into r9
00000247	2399A000		and 	r9,r9,r10
00000248	C3FFFFFE		bez 	waitUartTxStat
00000249	42501801		lix 	PAR,0x1801
0000024a	85508000		spl		r8			; echo the character
0000024b	A1A04000		pull	r10
0000024c	A1504000		pull	PAR
0000024d	A1904000		pull	r9
0000024e	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
0000024f	A0408000		push	r8					; save r8
00000250	A0406000		push	DAR
00000251	20680000		add		DAR,r8,ZERO			; set the start of the string
nextChar:
00000252	68806000		ldbp	r8					; get the character01
00000253	30380000		cmp		r8,ZERO				; Null terminated string
00000254	D1000003		beq		donePrStr			; done if null
00000255	D4000028		bsr		putCharToANSIScreen	; write out the character
00000256	C0FFFFFC		bra		nextChar
donePrStr:
00000257	A1604000		pull	DAR					; restore DAR
00000258	A1804000		pull	r8					; restore r8
00000259	A1704000		pull	PC					; rts
	
;
; printLine - Print a screen to the current screen position with CRLF at the end
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printLine:
0000025a	A0408000		push	r8					; save r8
0000025b	A0406000		push	DAR
0000025c	20680000		add		DAR,r8,ZERO			; set the start of the string
nextChar2:
0000025d	68806000		ldbp		r8					; get the character
0000025e	30380000		cmp		r8,ZERO				; Null terminated string
0000025f	D1000003		beq		donePrStr2			; done if null
00000260	D400001D		bsr		putCharToANSIScreen	; write out the character
	;add		DAR,DAR,r1			; Point to next character
00000261	C0FFFFFC		bra		nextChar2
donePrStr2:
00000262	D4000004		bsr		newLine
00000263	A1604000		pull	DAR					; restore DAR
00000264	A1804000		pull	r8					; restore r8
00000265	A1704000		pull	PC					; rts
	
;
; newLine - Print out a newline (CR-LF)
;

newLine:
00000266	A0408000		push	r8
00000267	4280000A		lix		r8,0x0A				; Line Feed
00000268	D4000015		bsr		putCharToANSIScreen	; Put the character to the screen
00000269	4280000D		lix		r8,0x0D				; Carriage Return
0000026a	D4000013		bsr		putCharToANSIScreen	; Put the character to the screen
0000026b	D4FFFFD6		bsr		putCharToUART		; Echo character back to the UART
0000026c	A1804000		pull	r8
0000026d	A1704000		pull	PC

;
; clearScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen:
0000026e	A0408000		push	r8				; save r8
0000026f	4280001B		lix		r8,0x1b			; ESC
00000270	D400000D		bsr		putCharToANSIScreen
00000271	D4FFFFD0		bsr		putCharToUART
00000272	4280005B		lix		r8,0x5b			; [
00000273	D400000A		bsr		putCharToANSIScreen
00000274	D4FFFFCD		bsr		putCharToUART
00000275	42800032		lix		r8,0x32			; 2
00000276	D4000007		bsr		putCharToANSIScreen
00000277	D4FFFFCA		bsr		putCharToUART
00000278	4280004A		lix		r8,0x4A			; J
00000279	D4000004		bsr		putCharToANSIScreen
0000027a	D4FFFFC7		bsr		putCharToUART
0000027b	A1804000		pull	r8
0000027c	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
0000027d	A0409000		push	r9
0000027e	A0405000		push	PAR
0000027f	A040A000		push	r10
00000280	42A00002		lix		r10,0x2		; TxReady bit
00000281	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
00000282	84905000		lpl		r9			; Read Status into r9
00000283	2399A000		and 	r9,r9,r10
00000284	C3FFFFFE		bez 	waitScreenTxStat
00000285	42500001		lix 	PAR,0x1
00000286	85508000		spl		r8			; echo the character
00000287	A1A04000		pull	r10
00000288	A1504000		pull	PAR
00000289	A1904000		pull	r9
0000028a	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
0000028b	A0408000		push	r8
0000028c	42800000		lix		r8,0			; first note is 0
0000028d	D4000007		bsr 	setNote
0000028e	D400000D		bsr		enableBuzzer
0000028f	428000FA		lix		r8,250			; count for 1 Sec
00000290	D4000023		bsr		delay_mS		; call delay_ms
00000291	D4000016		bsr		disableBuzzer
00000292	A1804000		pull	r8
00000293	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
00000294	A0408000		push	r8
00000295	A0405000		push	PAR
00000296	42504000		lix		PAR,0x4000
00000297	85508000		spl		r8
00000298	A1504000		pull	PAR
00000299	A1804000		pull	r8
0000029a	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
0000029b	A0409000		push	r9
0000029c	A0408000		push	r8
0000029d	A0405000		push	PAR
0000029e	42900010		lix		r9,0x0010		; Buzzer Enable line
0000029f	42502800		lix		PAR,0x2800
000002a0	84805000		lpl		r8
000002a1	22889000		or		r8,r8,r9
000002a2	85508000		spl		r8
000002a3	A1504000		pull	PAR
000002a4	A1804000		pull	r8
000002a5	A1904000		pull	r9
000002a6	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
000002a7	A0409000		push	r9
000002a8	A0408000		push	r8
000002a9	A0405000		push	PAR
000002aa	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
000002ab	42502800		lix		PAR,0x2800
000002ac	84805000		lpl		r8
000002ad	23889000		and		r8,r8,r9
000002ae	85508000		spl		r8
000002af	A1504000		pull	PAR
000002b0	A1804000		pull	r8
000002b1	A1904000		pull	r9
000002b2	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
000002b3	A0409000		push	r9
000002b4	42503802		lix		PAR,0x3802		; address of the mSec counter
000002b5	84905000		lpl		r9				; read the peripheral counter into r9
000002b6	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000002b7	84905000		lpl		r9				; check the elapsed time counter
000002b8	30389000		cmp		r8,r9
000002b9	CCFFFFFE		blt		loop_delay_mS
000002ba	A1904000		pull	r9
000002bb	A1704000		pull	PC

;
; getPS2Char
; returns character received in r8
;

getPS2Char:
000002bc	A0409000		push	r9
000002bd	A0405000		push	PAR
000002be	42501000		lix	PAR,0x1000	; PS/2 Status
waitPS2RxStat:
000002bf	84905000		lpl	r9			; Read Status into r9
000002c0	23991000		and r9,r9,r1
000002c1	C3FFFFFE		bez waitPS2RxStat
getCharFromPS2:
000002c2	42500800		lix PAR,0x0800
000002c3	84805000		lpl	r8
000002c4	42501000		lix	PAR,0x1000	; PS/2 Status
whilePS2RxStat:
000002c5	A1504000		pull	PAR
000002c6	A1904000		pull	r9
000002c7	A1704000		pull	PC

