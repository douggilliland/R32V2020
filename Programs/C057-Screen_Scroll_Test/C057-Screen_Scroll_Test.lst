hello:	.string "R32V2020> This is a long string."
screenPtr:	.long 0x0000
screenBase:	.long 0x0

;
; Screen scroll test
;

main:
00000000	42503802		lix		PAR,0x3802	; msec timer
00000001	84905000		lpl		r9			; read the timer into r8
00000002	A0409000		push	r9			; save r9 on the stack
00000003	D400006C		bsr		clearScreen
00000004	42503802		lix		PAR,0x3802	; msec timer
00000005	84805000		lpl		r8			; read the timer into r8
00000006	A1904000		pull	r9
00000007	24992000		xor		r9,r9,MINUS1
00000008	20991000		add		r9,r9,ONE
00000009	20889000		add		r8,r8,r9
0000000a	42503000		lix		PAR,0x3000
0000000b	85508000		spl		r8			; mSecs that the screen clear took
0000000c	42800040		lix	r8,64			; Move cursor to two rows down on the screen
0000000d	D400007E		bsr	setCharPos
0000000e	42800000		lix	r8,hello.lower
0000000f	D4000041		bsr	printString
; second copy of the string
00000010	428007C0		lix	r8,1984			; Move cursor to the bottom row of the screen
00000011	D400007A		bsr	setCharPos
00000012	42800000		lix	r8,hello.lower
00000013	D400003D		bsr	printString
00000014	42801388		lix	r8,5000			; wait 5 secs
00000015	D4000084		bsr	delay_mS
00000016	D4000006		bsr	scrollScreen
;	lix	r8,500			; wait 0.5 secs
;	bsr	delay_mS
00000017	D4000005		bsr	scrollScreen
;	lix	r8,500			; wait 0.5 secs
;	bsr	delay_mS
00000018	D4000004		bsr	scrollScreen
;	lix	r8,500			; wait 0.5 secs
;	bsr	delay_mS
00000019	D4000003		bsr	scrollScreen
;	lix	r8,500			; wait 0.5 secs
;	bsr	delay_mS
0000001a	D4000002		bsr	scrollScreen
loopPosition:
0000001b	C0000000		bra	loopPosition

scrollScreen:
0000001c	A0408000		push	r8
0000001d	A0409000		push	r9
0000001e	A040A000		push	r10
0000001f	A040B000		push	r11
00000020	42800040		lix	r8,64
00000021	42900000		lix	r9,0
00000022	42B00800		lix	r11,2048
loopMove:
00000023	20580000		add	PAR,r8,ZERO		; Source
00000024	84A05000		lpl	r10
00000025	20590000		add	PAR,r9,ZERO		; destination
00000026	8550A000		spl	r10
00000027	20881000		add	r8,r8,ONE
00000028	20991000		add	r9,r9,ONE
00000029	3038B000		cmp	r8,r11
0000002a	D2FFFFF9		bne	loopMove
0000002b	42800020		lix	r8,0x20		; fill with spaces
0000002c	42900800		lix	r9,2048
0000002d	425007C0		lix PAR,1984
loopFillSpaces:
0000002e	83508000		sps	r8
0000002f	20551000		add	PAR,PAR,ONE
00000030	30359000		cmp	PAR,r9
00000031	D2FFFFFD		bne	loopFillSpaces
00000032	A1B04000		pull	r11
00000033	A1A04000		pull	r10
00000034	A1904000		pull	r9
00000035	A1804000		pull	r8
00000036	A1704000		pull	PC

;
; getUARTChar
; returns character received in r8
;

getUARTChar:
00000037	A0409000		push	r9
00000038	A0405000		push	PAR
00000039	42501800		lix	PAR,0x1800	; UART Status
waitUartRxStat:
0000003a	84905000		lpl	r9			; Read Status into r9
0000003b	23991000		and r9,r9,ONE
0000003c	C3FFFFFE		bez waitUartRxStat
getCharFromUart:
0000003d	42501801		lix PAR,0x1801
0000003e	84805000		lpl	r8
0000003f	A1504000		pull	PAR
00000040	A1904000		pull	r9
00000041	A1704000		pull	PC

;
; putUARTChar - Put a character to the UART
; passed character in r8 is sent out the UART
;

putUARTChar:
00000042	A0409000		push	r9
00000043	A0405000		push	PAR
00000044	A040A000		push	r10
00000045	42A00002		lix	r10,0x2
00000046	42501800		lix	PAR,0x1800	; UART Status
waitUartTxStat:
00000047	84905000		lpl	r9			; Read Status into r9
00000048	2399A000		and r9,r9,r10
00000049	C3FFFFFE		bez waitUartTxStat
0000004a	42501801		lix PAR,0x1801
0000004b	85508000		spl	r8			; echo the character
0000004c	A1A04000		pull	r10
0000004d	A1504000		pull	PAR
0000004e	A1904000		pull	r9
0000004f	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string
; strings are null terminated
; strings are bytes packed into long words
;

printString:
00000050	A0408000		push	r8				; save r8
00000051	A0409000		push	r9				; save r9
00000052	A0406000		push	DAR
00000053	20680000		add	DAR,r8,ZERO		; set the start of the string
nextLong:
00000054	64806000		ldl	r8				; get the string
00000055	31808000		ens	r8,r8			; swap the endian
00000056	429000FF		lix	r9,0xff			; mask for null termination check
00000057	23998000		and	r9,r9,r8
00000058	C3000013		bez	donePrStr
00000059	D4000022		bsr	putChar			; write out the character
0000005a	28808000		sr8	r8,r8
0000005b	429000FF		lix	r9,0xff			; mask for null termination check
0000005c	23998000		and	r9,r9,r8
0000005d	C300000E		bez	donePrStr
0000005e	D400001D		bsr	putChar			; write out the character
0000005f	28808000		sr8	r8,r8
00000060	429000FF		lix	r9,0xff			; mask for null termination check
00000061	23998000		and	r9,r9,r8
00000062	C3000009		bez	donePrStr
00000063	D4000018		bsr	putChar			; write out the character
00000064	28808000		sr8	r8,r8
00000065	429000FF		lix	r9,0xff			; mask for null termination check
00000066	23998000		and	r9,r9,r8
00000067	C3000004		bez	donePrStr
00000068	D4000013		bsr	putChar			; write out the character
lastOfLong:
00000069	20661000		add	DAR,DAR,ONE
0000006a	C0FFFFEA		bra	nextLong
donePrStr:
0000006b	A1604000		pull	DAR				; restore DAR
0000006c	A1904000		pull	r9				; restore r9
0000006d	A1804000		pull	r8				; restore r8
0000006e	A1704000		pull	PC				; rts
	
;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
;

clearScreen:
0000006f	A0409000		push	r9				; save r9
00000070	A0408000		push	r8				; save r8
00000071	42800000		lix	r8,0x0			; set screen position to home
00000072	D4000019		bsr	setCharPos
00000073	42800020		lix	r8,0x0020		; fill with spaces
00000074	429007FE		lix r9,0x7FE		; loopCount	(1K minus 1)
looper:
00000075	D4000006		bsr	putChar
00000076	20992000		add r9,r9,MINUS1	; decrement character counter
00000077	D2FFFFFE		bne	looper			; loop until complete
00000078	A1804000		pull	r8
00000079	A1904000		pull	r9
0000007a	A1704000		pull	PC				; rts

;
; putChar - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putChar:
0000007b	A040A000		push	r10					; save r10
0000007c	A0409000		push	r9					; save r9
0000007d	A0406000		push	DAR
0000007e	A0405000		push	PAR
0000007f	42900009		lix	r9,screenPtr.lower	; r9 is the ptr to screenPtr
00000080	20690000		add	DAR,r9,ZERO			; DAR points to screenPtr
00000081	64A06000		ldl	r10					; r10 has screenPtr value
00000082	205A0000		add	PAR,r10,ZERO		; Set PAR to screenPtr
00000083	81508000		spb	r8					; write character to screen
00000084	20AA1000		add	r10,r10,ONE			; increment screen pointer
00000085	6560A000		sdl	r10					; save new pointer
00000086	A1504000		pull PAR					; restore PAR
00000087	A1604000		pull DAR					; restore DAR
00000088	A1904000		pull r9					; restore r9
00000089	A1A04000		pull r10					; restore r10
0000008a	A1704000		pull	PC					; rts

;
; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; screenBase has the base address of the screen memory
; screenPtr contains the address of the current char position
;

setCharPos:
0000008b	A0409000		push	r9						; save r9
0000008c	A040A000		push	r10						; save r10
0000008d	A0406000		push	DAR						; save DAR
0000008e	42A0000A		lix	r10,screenBase.lower
0000008f	206A0000		add	DAR,r10,ZERO			; DAR points to the screenBase
00000090	64A06000		ldl	r10						; r10 has the screen base address
00000091	20A80000		add	r10,r8,ZERO				; add passed position to base
00000092	42900009		lix	r9,screenPtr.lower		; r9 is the ptr to screenPtr
00000093	20690000		add	DAR,r9,ZERO				; DAR points to screenPtr
00000094	6560A000		sdl	r10						; store new screen address
00000095	A1604000		pull DAR						; restore DAR
00000096	A1A04000		pull r10						; restore r10
00000097	A1904000		pull r9						; restore r9
00000098	A1704000		pull	PC						; rts

; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Uses routine uses r9

delay_mS:
00000099	A0409000		push	r9
0000009a	42503802		lix	PAR,0x3802		; address of the mSec counter
0000009b	84905000		lpl	r9				; read the peripheral counter into r9
0000009c	20898000		add	r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
0000009d	84905000		lpl	r9				; check the elapsed time counter
0000009e	30389000		cmp	r8,r9
0000009f	CCFFFFFE		blt	loop_delay_mS
000000a0	A1904000		pull	r9
000000a1	A1704000		pull	r7
