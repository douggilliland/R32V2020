helloWorld: 	.string "R32V2020"
; Read 32-bit elapsed time counter and put to 7 seg display
start:
00000000	42400000		lix	SAR,helloWorld.LOWER
;	add	SAR,r0,r0	; Initialize Stack Pointer (used for return address)
00000001	A2407000		sss	r7			; push the call address -1
00000002	C0000027		bra	clearScreen
00000003	20500000		add	par,r0,r0	; start of screen
readDataMemory:
00000004	20600000		add	dar,r0,r0	; clear the data memory addr pointer
00000005	64806000		ldl	r8			; get the long again
00000006	39808000		ens r8,r8		; endian swap for right byte order
00000007	A2407000		sss	r7			; store PC on the stack
00000008	C000002B		bra	putChar
00000009	33808000		sr8	r8,r8
0000000a	A2407000		sss	r7
0000000b	C0000028		bra	putChar
0000000c	33808000		sr8	r8,r8
0000000d	A2407000		sss	r7
0000000e	C0000025		bra	putChar
0000000f	33808000		sr8	r8,r8
00000010	A2407000		sss	r7
00000011	C0000022		bra	putChar
00000012	20661000		add	dar,dar,r1	; increment the data pointer
00000013	64806000		ldl	r8			; get the long again
00000014	39808000		ens r8,r8		; endian swap for right byte order
00000015	A2407000		sss	r7			; store PC on the stack
00000016	C000001D		bra	putChar
00000017	33808000		sr8	r8,r8
00000018	A2407000		sss	r7
00000019	C000001A		bra	putChar
0000001a	33808000		sr8	r8,r8
0000001b	A2407000		sss	r7
0000001c	C0000017		bra	putChar
0000001d	33808000		sr8	r8,r8
0000001e	A2407000		sss	r7
0000001f	C0000014		bra	putChar
readETCounter:
00000020	42803800		lix	r8,0x3800
00000021	42903000		lix	r9,0x3000
loopETCounter:
00000022	20580000		add	par,r8,r0	; counter address
00000023	84A05000		lpl	r10			; get the counter value
00000024	33A0A000		sr8	r10,r10	; get the top 16-bits of the counter
00000025	33A0A000		sr8	r10,r10
00000026	20590000		add par,r9,r0	; Seven Segment Address
00000027	8550A000		spl	r10			; store value
00000028	C0FFFFFA		bra	loopETCounter
;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
;

clearScreen:
00000029	20500000		add par,r0,r0	; start of screen character memory
0000002a	42800020		lix	r8,0x0020	; fill with spaces
0000002b	429007FE		lix r9,0x7FE	; loopCount	(1K minus 1)
looper:
0000002c	81508000		spb r8			; put the character to the screen
0000002d	20551000		add	par,par,r1	; Increment screen pointer
0000002e	20992000		add r9,r9,r2	; decrement character counter
0000002f	D2FFFFFD		bne	looper		; loop until complete
00000030	A3A04000		lss	r10			; load calling address
00000031	20AA1000		add	r10,r10,r1	; skip the call
00000032	207A1000		add	r7,r10,r1	; jump to the next address (rts)

;
; putChar - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putChar:
00000033	81508000		spb	r8			; write character to peripheral bus
00000034	20551000		add	par,par,r1	; Go to the next character position	
00000035	A3A04000		lss	r10			; load calling address
00000036	20AA1000		add	r10,r10,r1	; inc by 1 to skip the call
00000037	207A1000		add	r7,r10,r1	; jump to the next address (rts)
	