; P005-SDHC_Card_Test - Test the SDHC Card interface
; Testing on A-ESTF FPGA development card
;	http://land-boards.com/blwiki/index.php?title=A-ESTF_V2_EP4CE22_Board
; Not all FPGA cards have built-in SD Card sockets
; On other cards, should be able to wire up to IO pins (if there are any)
; Dumps SD Card to the ANSI VGA screen
;
; There are three types of SD cards
; SDSC - Standard Capacity SD cards (up to 2 GB)
; SDHC - High Capacity SD cards (>2GB up to 32 GB)
; SDXC - Extra Capacity SD cards (>32 GB)
;
; For SDSC, the read/write address parameter is a 512-byte aligned byte 
; address. ie, it has 9 low address bits explicitly set to 0. 
; 23 of the 24 programmable address bits select the 512-byte block.
; This gives an address capacity of 2^23 * 512 = 4GB
; The SDLBA registers are used like this:
;  31 30 29 28.27 26 25 24.23 22 21 20.19 18 17 16.15 14 13 12.11 10 09 08.07 06 05 04.03 02 01 00
; +------- SDLBA2 -----+------- SDLBA1 --------+------- SDLBA0 --------+ 0  0  0  0  0  0  0  0  0
;
; For SDHC, the read/write address parameter is the ordinal number of 512-byte block ie, 
; the 9 low address bits are implicity 0. 
; The 24 programmable address bits select the 512-byte block.
; This gives an address capacity of 2^24 * 512 = 8GByte.
; SDHC can be upto 32GByte but this design can only access the low 8GByte 
; (could add SDLBA3 to get the extra address lines if required).
; The SDLBA registers are used like this:
;  31 30 29 28.27 26 25 24.23 22 21 20.19 18 17 16.15 14 13 12.11 10 09 08.07 06 05 04.03 02 01 00
;   0  0  0  0  0  0  0  0+---------- SDLBA2 -----+------- SDLBA1 --------+------- SDLBA0 --------+
;
; There is a constant in the VHDL code which needs to be set to match the card type.
;	signal sdhc : std_logic := '0';
;	-- set to 0 for SDSC cards
;	-- set to non-0 for SDHC cards
;
; Original VHDL code was based on the Multicomp design by Grant Searle
; Enhanced by Neal Crook to support SDHC cards
; SDHC can be upto 32GByte but this design can only access the low 8GByte
; Code for R32V2020 RISC CPU
;
; SD Card base address is x1000
; Register Addresses
;    0x1000    SDDATA        read/write data
;    0x1001    SDSTATUS      read
;    0x1001    SDCONTROL     write
;    0x1002    SDLBA0        write-only
;    0x1003    SDLBA1        write-only
;    0x1004    SDLBA2        write-only (only bits 6:0 are valid)
;
; To read a 512-byte block from the SDCARD:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to read from
; Write 0 to SDCONTROL to issue read command
; Loop 512 times:
;     Wait until SDSTATUS=0xE0 (read byte ready, block busy)
;     Read byte from SDDATA
;
; To write a 512-byte block to the SDCARD:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to write to
; Write 1 to SDCONTROL to issue write command
; Loop 512 times:
;     Wait until SDSTATUS=0xA0 (block busy)
;     Write byte to SDDATA
;


prompt:	.string "(R32V2020) SDHC Dump Utility v0.0.1"
missingHandshake: .string "*** Run PuTTY and enable hardware handshake ***"
screenPtr:	.long 0x0000
screenBase:	.long 0x0
syntaxError:	.string "*** Bad number error (at a2h_Error) ***"
anyKeyToContinue:	.string "Hit any key to continue"
blockNumber:	.string "Block Address : 0x"

;
; Write the second block of the SD card with a fixed pattern of data
; Read an SD card block - one block at a time
; Prints the contents of the block to the ANSI screen
; Hit a key on the PS/2 keyboard to advance to the next block
; r9 = block number
;

main:
00000000	D4000099		bsr		clearScreen_ANSI
00000001	42800000		lix		r8,prompt.lower
00000002	D400008C		bsr		printString_ANSI
00000003	D400018B		bsr		newLine_ANSI
00000004	4280000A		lix		r8,10					; give the SD card 10 mS
00000005	D40000AA		bsr		delay_mS
00000006	42800200		lix		r8,512					; write to the second block
00000007	D400003A		bsr		writeBlock_SDCard
00000008	42900000		lix		r9,0					; start with block 0
readNextBlock:
00000009	4280009C		lix		r8,blockNumber.lower	; Block Number message
0000000a	D4000084		bsr		printString_ANSI
0000000b	21890000		addi	r8,r9,0					; print the current block number
0000000c	D40000FB		bsr		printLong_ANSI
0000000d	D4000181		bsr		newLine_ANSI
0000000e	21890000		addi	r8,r9,0					; r9 holds block number, pass in r8
0000000f	D4000009		bsr		readDumpBlock_SDCard
00000010	D400017E		bsr		newLine_ANSI
00000011	42800084		lix		r8,anyKeyToContinue.lower
00000012	D400007C		bsr		printString_ANSI
00000013	D400004F		bsr		getChar_PS2
00000014	D400017A		bsr		newLine_ANSI
00000015	21990001		addi	r9,r9,1					; Go to next block address
00000016	C0FFFFF3		bra		readNextBlock
loopForever:
00000017	C0000000		bra		loopForever
	

;
; readBlock_SDCard
;
; To read a 512-byte block from the SDCARD:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to read from
; Write 0 to SDCONTROL to issue read command
; Loop 512 times:
;     Wait until SDSTATUS=0xE0 (read byte ready, block busy)
;     Read byte from SDDATA
; r8 = Block number
;  31 30 29 28.27 26 25 24.23 22 21 20.19 18 17 16.15 14 13 12.11 10 09 08.07 06 05 04.03 02 01 00
; +------- SDLBA2 -----+------- SDLBA1 --------+------- SDLBA0 --------+ 0  0  0  0  0  0  0  0  0
;

readDumpBlock_SDCard:
00000018	A0408000		push	r8
00000019	A0409000		push	r9
0000001a	A040A000		push	r10
0000001b	A040B000		push	r11
0000001c	A0405000		push	PAR
0000001d	42501001		lix		PAR,0x1001			; SDSTATUS
waitForSDStatusRdRdy:
0000001e	84905000		lpl		r9
0000001f	39390080		cmpi	r9,0x80
00000020	D2FFFFFE		bne		waitForSDStatusRdRdy
;	sr8		r8,r8				; Shift SD card block address right by 9 bits for SD cards
;	sr1		r8,r8
00000021	42501002		lix		PAR,0x1002
00000022	89508000		spbp	r8					; SDLBA0
00000023	33808000		sr8		r8,r8
00000024	89508000		spbp	r8					; SDLBA1
00000025	33808000		sr8		r8,r8
00000026	81508000		spb		r8					; SDLBA2
00000027	42900000		lix		r9,0				; Write 0 to SDCONTROL to issue read command
00000028	42501001		lix		PAR,0x1001			; SDCONTROL
00000029	81509000		spb		r9
0000002a	42900200		lix		r9,512				; 512 characters to read
0000002b	42B00018		lix		r11,24				; print newLine_ANSI every 24 values
nextSDReadChar:
0000002c	42501001		lix		PAR,0x1001			; SDSTATUS
waitSDCharPresent:
0000002d	80A05000		lpb		r10
0000002e	393A00E0		cmpi	r10,0xE0
0000002f	D2FFFFFE		bne		waitSDCharPresent
00000030	42501000		lix		PAR,0x1000			; SDDATA
00000031	80805000		lpb		r8
00000032	D4000113		bsr		printByte_ANSI		; char is in r8
00000033	42800020		lix		r8,0x20
00000034	D4000070		bsr		putChar_ANSI ; space between characters
00000035	23BB0001		subi	r11,r11,1
00000036	C7000003		bnz		skipNewLineSDBlockRd
00000037	D4000157		bsr		newLine_ANSI		; print newLine_ANSI every 24 values
00000038	42B00018		lix		r11,24
skipNewLineSDBlockRd:
00000039	23990001		subi	r9,r9,1
0000003a	C7FFFFF2		bnz		nextSDReadChar
0000003b	A1504000		pull	PAR
0000003c	A1B04000		pull	r11
0000003d	A1A04000		pull	r10
0000003e	A1904000		pull	r9
0000003f	A1804000		pull	r8
00000040	A1704000		pull	PC
	
;
; writeBlock_SDCard
;
; To write a 512-byte block to the SDCARD:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to write to
; Write 1 to SDCONTROL to issue write command
; Loop 512 times:
;     Wait until SDSTATUS=0xA0 (block busy)
;     Write byte to SDDATA
;

writeBlock_SDCard:
00000041	A0408000		push	r8
00000042	A0409000		push	r9
00000043	A040A000		push	r10
00000044	A0405000		push	PAR
00000045	42501001		lix		PAR,0x1001			; SDSTATUS
waitForSDStatusWrRdy:
00000046	84905000		lpl		r9
00000047	39390080		cmpi	r9,0x80
00000048	D2FFFFFE		bne		waitForSDStatusWrRdy
;	sr8		r8,r8				; Shift SD card block address right by 9 bits for SD cards
;	sr1		r8,r8
00000049	42501002		lix		PAR,0x1002
0000004a	89508000		spbp	r8					; SDLBA0
0000004b	33808000		sr8		r8,r8
0000004c	89508000		spbp	r8					; SDLBA1
0000004d	33808000		sr8		r8,r8
0000004e	81508000		spb		r8					; SDLBA2
0000004f	42900001		lix		r9,1				; Write 0 to SDCONTROL to issue write command
00000050	42501001		lix		PAR,0x1001			; SDCONTROL
00000051	81509000		spb		r9
00000052	42900200		lix		r9,512				; 512 characters to read
00000053	42B00018		lix		r11,24				; print newLine_ANSI every 24 values
nextSDWriteChar:
00000054	42501001		lix		PAR,0x1001			; SDSTATUS
waitSDCharPresentWr:
00000055	80A05000		lpb		r10
00000056	393A00A0		cmpi	r10,0xA0
00000057	D2FFFFFE		bne		waitSDCharPresentWr
00000058	42501000		lix		PAR,0x1000			; SDDATA
00000059	428000AA		lix		r8,0xAA
0000005a	81508000		spb		r8
0000005b	23990001		subi	r9,r9,1
0000005c	C7FFFFF8		bnz		nextSDWriteChar
0000005d	A1504000		pull	PAR
0000005e	A1A04000		pull	r10
0000005f	A1904000		pull	r9
00000060	A1804000		pull	r8
00000061	A1704000		pull	PC
	
;
; getChar_PS2
; returns character received in r8
;

getChar_PS2:
00000062	A0405000		push	PAR
00000063	42500801		lix		PAR,0x0801	; PS/2 Status
waitPS2RxStat:
00000064	84805000		lpl		r8			; Read Status into r9
00000065	2B880001		andi 	r8,r8,1
00000066	C3FFFFFE		bez 	waitPS2RxStat
getCharFromPS2:
00000067	42500800		lix 	PAR,0x0800
00000068	84805000		lpl		r8
whilePS2RxStat:
00000069	A1504000		pull	PAR
0000006a	A1704000		pull	PC

;
; waitCharPolled_PS2 - Check the polled character interface
; wait for a character
; return when a character is present
; returns character received in r8
;

waitCharPolled_PS2:
0000006b	A0405000		push	PAR
0000006c	42500803		lix		PAR,0x0803	; PS/2 Status
waitPS2RxStatPolled:
0000006d	84805000		lpl		r8			; Read Status into r8
0000006e	2B880001		andi 	r8,r8,0x1
0000006f	C3FFFFFE		bez 	waitPS2RxStatPolled
getCharFromPS2Polled:
00000070	42500802		lix 	PAR,0x0802
00000071	84805000		lpl		r8
whilePS2RxStatPolled:
00000072	A1504000		pull	PAR
00000073	A1704000		pull	PC

;
; checkGetStat_PS2 - Checks the polling status
; Polled interface is active while the keyboard key is pressed
; returns 
;	-1 if there is no character, 
;	character if there is a character
;

checkGetStat_PS2:
00000074	A0405000		push	PAR
00000075	42500803		lix		PAR,0x0803	; PS/2 Status
00000076	84805000		lpl		r8			; Read Status into r8
00000077	2B880001		andi	r8,r8,0x1
00000078	C3000004		bez		charNotPresent
00000079	42500802		lix		PAR,0x0802
0000007a	84805000		lpl		r8
0000007b	C0000002		bra		gotCharIn
charNotPresent:
0000007c	20802000		add		r8,ZERO,MINUS1
gotCharIn:
0000007d	A1504000		pull	PAR
0000007e	A1704000		pull	PC

;
; putChar_UART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putChar_UART:
0000007f	A0405000		push	PAR
00000080	A0408000		push	r8
00000081	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
00000082	84805000		lpl		r8			; Read Status into r8
00000083	2B880002		andi 	r8,r8,0x2
00000084	C7000005		bnz 	uartRdy
; Remind user to enable HW handshake
; would be better to add a HW handshake timeout
; Since the USB is so much faster it is unlikely this path 
;	will be exercised. 
; For cards with RS-232 serial this would be a serious concern
; It's more likely that PuTTY needed to be run in HW handshake mode.
handshakeStuck:
00000085	42800024		lix		r8,missingHandshake.lower
00000086	D4000008		bsr		printString_ANSI
00000087	A1804000		pull	r8
00000088	C0000004		bra		getOut
uartRdy:
00000089	42501801		lix 	PAR,0x1801
0000008a	A1804000		pull	r8
0000008b	85508000		spl		r8			; echo the character
getOut:
0000008c	A1504000		pull	PAR
0000008d	A1704000		pull	PC
	
;
; printString_ANSI - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI:
0000008e	A0408000		push	r8					; save r8
0000008f	A0406000		push	DAR
00000090	21680000		addi	DAR,r8,0x0		; set the start of the string
nextCharANSI:
00000091	68806000		ldbp	r8					; get the character01
00000092	39380000		cmpi	r8,0x0				; Null terminated string
00000093	D1000003		beq		donePrANSIStr		; done if null
00000094	D4000010		bsr		putChar_ANSI	; write out the character
00000095	C0FFFFFC		bra		nextCharANSI
donePrANSIStr:
00000096	A1604000		pull	DAR					; restore DAR
00000097	A1804000		pull	r8					; restore r8
00000098	A1704000		pull	PC					; rts
	
;
; clearScreen_ANSI - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
; No passed value
; Uses r8 (saved during function)
; no return value
;

clearScreen_ANSI:
00000099	A0408000		push	r8				; save r8
0000009a	4280001B		lix		r8,0x1b			; ESC
0000009b	D4000009		bsr		putChar_ANSI
0000009c	4280005B		lix		r8,0x5b			; [
0000009d	D4000007		bsr		putChar_ANSI
0000009e	42800032		lix		r8,0x32			; 2
0000009f	D4000005		bsr		putChar_ANSI
000000a0	4280004A		lix		r8,0x4A			; J
000000a1	D4000003		bsr		putChar_ANSI
000000a2	A1804000		pull	r8
000000a3	A1704000		pull	PC				; rts

;
; putChar_ANSI - Put a character to the screen
; r8 - Character to put to screen
; r8 - returns character that was sent to screen
;

putChar_ANSI:
000000a4	A0405000		push	PAR
000000a5	A0408000		push	r8
000000a6	42500000		lix		PAR,0x0		; ANSI Screen (UART-style) Status
waitScreenTxStat:
000000a7	84805000		lpl		r8			; Read Status into r9
000000a8	2B880002		andi 	r8,r8,0x2
000000a9	C3FFFFFE		bez 	waitScreenTxStat
000000aa	42500001		lix 	PAR,0x1		; ANSI Screen (UART-style) Data
000000ab	A1804000		pull	r8
000000ac	81508000		spb		r8			; send character to the screen
000000ad	A1504000		pull	PAR
000000ae	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
000000af	A0408000		push	r8
000000b0	A0409000		push	r9
000000b1	42503802		lix		PAR,0x3802		; address of the mSec counter
000000b2	84905000		lpl		r9				; read the peripheral counter into r9
000000b3	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000b4	84905000		lpl		r9				; check the elapsed time counter
000000b5	38389000		cmp		r8,r9
000000b6	CCFFFFFE		blt		loop_delay_mS
000000b7	A1904000		pull	r9
000000b8	A1804000		pull	r8
000000b9	A1704000		pull	PC

; convLineBuff2DigASCIIToHex7Seg - Convert a two ASCII digit value into a hex byte
; Passed: r8 points to the start of the hex string
; Returned: r8 contains the hex value of the string
; Put the byte to the Seven Segment Display
;

convLineBuff2DigASCIIToHex7Seg:
000000ba	A0409000		push	r9
000000bb	A0406000		push	DAR
000000bc	A0405000		push	PAR
000000bd	42900000		lix		r9,0
000000be	20680000		add		DAR,r8,ZERO		; Address of lineBuff (passed into this routine)
000000bf	68806000		ldbp	r8
000000c0	D400001C		bsr		asciiCharToHexNibble
000000c1	3938DEAD		cmpi	r8,0xDEAD
000000c2	D1000011		beq		badHexVal
000000c3	2B88000F		andi	r8,r8,0xf
000000c4	28998000		or		r9,r9,r8
000000c5	30909000		sl1		r9,r9
000000c6	30909000		sl1		r9,r9
000000c7	30909000		sl1		r9,r9
000000c8	30909000		sl1		r9,r9
000000c9	60806000		ldb		r8
000000ca	D4000012		bsr		asciiCharToHexNibble
000000cb	3938DEAD		cmpi	r8,0xDEAD
000000cc	D1000007		beq		badHexVal
000000cd	2B88000F		andi	r8,r8,0xf
000000ce	28998000		or		r9,r9,r8
000000cf	42503000		lix		PAR,0x3000		; seven segment display
000000d0	85509000		spl		r9
000000d1	20890000		add		r8,r9,ZERO
000000d2	C0000006		bra		valOKDone
badHexVal:
000000d3	4280005C		lix		r8,syntaxError.lower
000000d4	D40000B3		bsr		newLine_ANSI_UART
000000d5	D400009B		bsr		printString_ANSI_UART
000000d6	D40000B1		bsr		newLine_ANSI_UART
000000d7	4280DEAD		lix		r8,0xDEAD
valOKDone:
000000d8	A1504000		pull	PAR
000000d9	A1604000		pull	DAR
000000da	A1904000		pull	r9
000000db	A1704000		pull	PC

;
; asciiCharToHexNibble - Convert a single ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
; Result is returned in r8
;	0x0-0xf - Legal Values
;	'DEAD' - Not hex character
;

asciiCharToHexNibble:
000000dc	39380066		cmpi	r8,0x66			; past 'f'
000000dd	CC000011		blt		a2h_Error
000000de	39380030		cmpi	r8,0x30			; below '0'
000000df	CF00000F		bgt		a2h_Error
000000e0	3938003A		cmpi	r8,0x3A			; '0' - '9'
000000e1	CF000009		bgt		gotDigit
000000e2	39380041		cmpi	r8,0x41			; ':' - '@'
000000e3	CF00000B		bgt		a2h_Error
000000e4	39380047		cmpi	r8,0x47			; 'A' - 'F'
000000e5	CC000007		blt		gotUpperLetter
000000e6	39380061		cmpi	r8,0x61			; 'G' - 'tick'
000000e7	CC000007		blt		a2h_Error
; Lower case letter
000000e8	23880057		subi	r8,r8,0x57
000000e9	C000000A		bra		doneConvA2H
; number 0-9
gotDigit:
000000ea	23880030		subi	r8,r8,0x30
000000eb	C0000008		bra		doneConvA2H
; A-F
gotUpperLetter:
000000ec	23880037		subi	r8,r8,0x37
000000ed	C0000006		bra		doneConvA2H
a2h_Error:
000000ee	4280005C		lix		r8,syntaxError.lower
000000ef	D4000098		bsr		newLine_ANSI_UART
000000f0	D4000080		bsr		printString_ANSI_UART
000000f1	D4000096		bsr		newLine_ANSI_UART
000000f2	4280DEAD		lix		r8,0xDEAD
doneConvA2H:
000000f3	A1704000		pull	PC

;
; printLong_ANSI_UART
; r8 contains the long value to print
;

printLong_ANSI_UART:
000000f4	A0408000		push	r8
000000f5	A0409000		push	r9
000000f6	A0408000		push	r8				; temporarily save r8
000000f7	42800030		lix		r8,0x30			; print 0x
000000f8	D400005F		bsr		putChar_ANSI_UART
000000f9	42800078		lix		r8,0x78
000000fa	D400005D		bsr		putChar_ANSI_UART
000000fb	A1804000		pull	r8				; restore r8
000000fc	42900008		lix		r9,8			; loop counter
doNextprintLong_ANSI_UART:
000000fd	34808000		rol1	r8,r8
000000fe	34808000		rol1	r8,r8
000000ff	34808000		rol1	r8,r8
00000100	34808000		rol1	r8,r8
00000101	D4000059		bsr		printHexVal_ANSI_UART
00000102	23990001		subi	r9,r9,1
00000103	C7FFFFFA		bnz		doNextprintLong_ANSI_UART
00000104	A1904000		pull	r9
00000105	A1804000		pull	r8
00000106	A1704000		pull	PC

;
; printLong_ANSI
; r8 contains the long value to print
;

printLong_ANSI:
00000107	A0408000		push	r8
00000108	A0409000		push	r9
00000109	A0408000		push	r8				; temporarily save r8
0000010a	42800030		lix		r8,0x30			; print 0x
0000010b	D4FFFF99		bsr		putChar_ANSI
0000010c	42800078		lix		r8,0x78
0000010d	D4FFFF97		bsr		putChar_ANSI
0000010e	A1804000		pull	r8				; restore r8
0000010f	42900008		lix		r9,8			; loop counter
doNextprintLong_ANSI:
00000110	34808000		rol1	r8,r8
00000111	34808000		rol1	r8,r8
00000112	34808000		rol1	r8,r8
00000113	34808000		rol1	r8,r8
00000114	D4000051		bsr		printHexVal_ANSI
00000115	23990001		subi	r9,r9,1
00000116	C7FFFFFA		bnz		doNextprintLong_ANSI
00000117	A1904000		pull	r9
00000118	A1804000		pull	r8
00000119	A1704000		pull	PC

;
; printShort_ANSI_UART
; r8 contains the short value to print
;

printShort_ANSI_UART:
0000011a	A0408000		push	r8
0000011b	A0409000		push	r9
0000011c	A0408000		push	r8				; temporarily save r8
0000011d	42800030		lix		r8,0x30			; print 0x
0000011e	D4000039		bsr		putChar_ANSI_UART
0000011f	42800078		lix		r8,0x78
00000120	D4000037		bsr		putChar_ANSI_UART
00000121	A1804000		pull	r8				; restore r8
00000122	42900004		lix		r9,4			; loop counter
00000123	31808000		sl8		r8,r8
00000124	31808000		sl8		r8,r8
doNextprintShort_ANSI_UART:
00000125	34808000		rol1	r8,r8
00000126	34808000		rol1	r8,r8
00000127	34808000		rol1	r8,r8
00000128	34808000		rol1	r8,r8
00000129	D4000031		bsr		printHexVal_ANSI_UART
0000012a	23990001		subi	r9,r9,1
0000012b	C7FFFFFA		bnz		doNextprintShort_ANSI_UART
0000012c	A1904000		pull	r9
0000012d	A1804000		pull	r8
0000012e	A1704000		pull	PC

;
; printByte_ANSI_UART
; r8 contains the char value to print
;

printByte_ANSI_UART:
0000012f	A0408000		push	r8
00000130	A0409000		push	r9
00000131	A0408000		push	r8				; temporarily save r8
00000132	42800030		lix		r8,0x30			; print 0x
00000133	D4000024		bsr		putChar_ANSI_UART
00000134	42800078		lix		r8,0x78
00000135	D4000022		bsr		putChar_ANSI_UART
00000136	A1804000		pull	r8				; restore r8
00000137	42900002		lix		r9,2			; loop counter
00000138	31808000		sl8		r8,r8
00000139	31808000		sl8		r8,r8
0000013a	31808000		sl8		r8,r8
doNextprintByte_ANSI_UART:
0000013b	34808000		rol1	r8,r8
0000013c	34808000		rol1	r8,r8
0000013d	34808000		rol1	r8,r8
0000013e	34808000		rol1	r8,r8
0000013f	D400001B		bsr		printHexVal_ANSI_UART
00000140	23990001		subi	r9,r9,1
00000141	C7FFFFFA		bnz		doNextprintByte_ANSI_UART
00000142	A1904000		pull	r9
00000143	A1804000		pull	r8
00000144	A1704000		pull	PC
	
;
; printByte_ANSI
; r8 contains the char value to print
;

printByte_ANSI:
00000145	A0408000		push	r8
00000146	A0409000		push	r9
00000147	A0408000		push	r8				; temporarily save r8
00000148	A1804000		pull	r8				; restore r8
00000149	42900002		lix		r9,2			; loop counter
0000014a	31808000		sl8		r8,r8
0000014b	31808000		sl8		r8,r8
0000014c	31808000		sl8		r8,r8
doNextprintByte_ANSI:
0000014d	34808000		rol1	r8,r8
0000014e	34808000		rol1	r8,r8
0000014f	34808000		rol1	r8,r8
00000150	34808000		rol1	r8,r8
00000151	D4000014		bsr		printHexVal_ANSI
00000152	23990001		subi	r9,r9,1
00000153	C7FFFFFA		bnz		doNextprintByte_ANSI
00000154	A1904000		pull	r9
00000155	A1804000		pull	r8
00000156	A1704000		pull	PC
	
; putChar_ANSI_UART
; write out a character to both 
;	the ANSI screen and the UART

putChar_ANSI_UART:
00000157	D4FFFF4D		bsr		putChar_ANSI
00000158	D4FFFF27		bsr		putChar_UART
00000159	A1704000		pull	PC

;
; printHexVal_ANSI_UART
;

printHexVal_ANSI_UART:
0000015a	A0408000		push	r8
0000015b	2B88000F		andi	r8,r8,0xf
0000015c	39380009		cmpi	r8,9
0000015d	CC000004		blt		printHexLetter
0000015e	21880030		addi	r8,r8,0x30
0000015f	D4FFFFF8		bsr		putChar_ANSI_UART
00000160	C0000003		bra		donePrintHexVal
printHexLetter:
00000161	21880037		addi	r8,r8,0x37		; 'A' - 10
00000162	D4FFFFF5		bsr		putChar_ANSI_UART
donePrintHexVal:
00000163	A1804000		pull	r8
00000164	A1704000		pull	PC

;
; printHexVal_ANSI_UART
;

printHexVal_ANSI:
00000165	A0408000		push	r8
00000166	2B88000F		andi	r8,r8,0xf
00000167	39380009		cmpi	r8,9
00000168	CC000004		blt		printHexLetterANSI
00000169	21880030		addi	r8,r8,0x30
0000016a	D4FFFF3A		bsr		putChar_ANSI
0000016b	C0000003		bra		donePrintHexValANSI
printHexLetterANSI:
0000016c	21880037		addi	r8,r8,0x37		; 'A' - 10
0000016d	D4FFFF37		bsr		putChar_ANSI
donePrintHexValANSI:
0000016e	A1804000		pull	r8
0000016f	A1704000		pull	PC

;
; printString_ANSI_UART - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI_UART:
00000170	A0408000		push	r8					; save r8
00000171	A0406000		push	DAR
00000172	21680000		addi	DAR,r8,0			; set the start of the string
nextChar:
00000173	68806000		ldbp	r8					; get the character01
00000174	39380000		cmpi	r8,0x0				; Null terminated string
00000175	D1000003		beq		donePrStr			; done if null
00000176	D4FFFFE1		bsr		putChar_ANSI_UART	; write out the character
00000177	C0FFFFFC		bra		nextChar
donePrStr:
00000178	A1604000		pull	DAR					; restore DAR
00000179	A1804000		pull	r8					; restore r8
0000017a	A1704000		pull	PC					; rts
	
;
; printLinebuffer_ANSI_UART - Print a screen to the current screen position with CRLF at the end
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printLinebuffer_ANSI_UART:
0000017b	A0408000		push	r8					; save r8
0000017c	A0406000		push	DAR
0000017d	21680000		addi	DAR,r8,0x0			; set the start of the string
nextChar2:
0000017e	68806000		ldbp	r8					; get the character
0000017f	39380000		cmpi	r8,0x0				; Null terminated string
00000180	D1000003		beq		donePrStr2			; done if null
00000181	D4FFFF0D		bsr		printString_ANSI	; write out the character
00000182	C0FFFFFC		bra		nextChar2
donePrStr2:
00000183	D4000004		bsr		newLine_ANSI_UART
00000184	A1604000		pull	DAR					; restore DAR
00000185	A1804000		pull	r8					; restore r8
00000186	A1704000		pull	PC					; rts
	
;
; newLine_ANSI_UART - Print out a newLine_ANSI_UART (CR-LF)
;

newLine_ANSI_UART:
00000187	A0408000		push	r8
00000188	4280000A		lix		r8,0x0A				; Line Feed
00000189	D4FFFFCE		bsr		putChar_ANSI_UART	; Put the character to the screen
0000018a	4280000D		lix		r8,0x0D				; Carriage Return
0000018b	D4FFFFCC		bsr		putChar_ANSI_UART		; Echo character back to the UART
0000018c	A1804000		pull	r8
0000018d	A1704000		pull	PC

;
; newLine_ANSI - Print out a newLine_ANSI (CR-LF)
;

newLine_ANSI:
0000018e	A0408000		push	r8
0000018f	4280000A		lix		r8,0x0A				; Line Feed
00000190	D4FFFF14		bsr		putChar_ANSI	; Put the character to the screen
00000191	4280000D		lix		r8,0x0D				; Carriage Return
00000192	D4FFFF12		bsr		putChar_ANSI	; Echo character back to the UART
00000193	A1804000		pull	r8
00000194	A1704000		pull	PC

;
; clearScreen_ANSI_UART - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen_ANSI_UART:
00000195	A0408000		push	r8				; save r8
00000196	4280001B		lix		r8,0x1b			; ESC
00000197	D4FFFFC0		bsr		putChar_ANSI_UART
00000198	4280005B		lix		r8,0x5b			; [
00000199	D4FFFFBE		bsr		putChar_ANSI_UART
0000019a	42800032		lix		r8,0x32			; 2
0000019b	D4FFFFBC		bsr		putChar_ANSI_UART
0000019c	4280004A		lix		r8,0x4A			; J
0000019d	D4FFFFBA		bsr		putChar_ANSI_UART
0000019e	A1804000		pull	r8
0000019f	A1704000		pull	PC				; rts

	