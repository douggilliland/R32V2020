; P006-SDHC_Blk_Rd_Test - Read a block from the SDHC Card into Data RAM
;
; Tested on EP4CE10 FPGA development card
;	http://land-boards.com/blwiki/index.php?title=A-C4E10_Cyclone_IV_FPGA_EP4CE10E22C8N_Development_Board
; This FPGA cards have does not have a built-in SD Card socket
; Wires up to IO pins through EPXX-GVS card
;	http://land-boards.com/blwiki/index.php?title=EPXX-GVS
; Dumps SDHC Card to the ANSI VGA screen
;
; There are three types of SD cards
; SDSC - Standard Capacity SD cards (up to 2 GB)
; SDHC - High Capacity SD cards (>2GB up to 32 GB)
; SDXC - Extra Capacity SD cards (>32 GB) - not currently supported
;
; For SDHC, the read/write address parameter is the ordinal number of 512-byte block 
; the 9 low address bits are implicitly 0. 
; The 24 programmable address bits select the 512-byte block.
; This gives an address capacity of 2^24 * 512 = 8GByte.
; SDHC can be upto 32GByte but this design can only access the low 8GByte. 
; The SDLBA registers are used like this:
;  31 30 29 28.27 26 25 24.23 22 21 20.19 18 17 16.15 14 13 12.11 10 09 08.07 06 05 04.03 02 01 00
;   0  0  0  0  0  0  0  0+---------- SDLBA2 -----+------- SDLBA1 --------+------- SDLBA0 --------+
;
; There is a constant in the VHDL code which is automatically set when the card is initialized.
;	signal sdhc : std_logic := '0';
;	-- set to 0 for SDSC cards
;	-- set to non-0 for SDHC cards
;
; Original VHDL code was based on the Multicomp design by Grant Searle
; Adapted from design by Steven J. Merrifield, June 2008
;	https://pastebin.com/HW3ru1cC
; Read states are derived from the Apple II emulator by Stephen Edwards
;	https://github.com/MiSTer-devel/Apple-II_MiSTer
; Enhanced by Neal Crook to support SDHC cards
;	https://github.com/nealcrook/multicomp6809/tree/master/multicomp/Components/SDCARD
; SDHC can be upto 32GByte but this design can only access the low 8GByte
; Code for R32V2020 RISC CPU
;
; SD Card base address is x1000
; Register Addresses
;    0x1000    SDDATA        read/write data
;    0x1001    SDSTATUS      read
;    0x1001    SDCONTROL     write
;    0x1002    SDLBA0        write-only
;    0x1003    SDLBA1        write-only
;    0x1004    SDLBA2        write-only (only bits 6:0 are valid)
;
; To read a 512-byte block from the SDHC card:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to read from
; Write 0 to SDCONTROL to issue read command
; Loop 512 times:
;     Wait until SDSTATUS=0xE0 (read byte ready, block busy)
;     Read byte from SDDATA
;
; To write a 512-byte block to the SDHC card:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to write to
; Write 1 to SDCONTROL to issue write command
; Loop 512 times:
;     Wait until SDSTATUS=0xA0 (block busy)
;     Write byte to SDDATA
;
; Using additional DataRAM block for I/O buffer storage
; 	Block is 1KB - 256x32-bits
;	Allows for write buffer and 1 read buffer of 512bytes length
;	RAM starts at A12=1 (4KB and up) = 0x1000
;	Write buffer @ 0x1000-0x11ff
;	Read buffer @ 0x1200-0x13ff
;

prompt:	.string "(R32V2020) SDHC Data RAM Test Utility v0.0.1"
missingHandshake: .string "*** Run PuTTY and enable hardware handshake ***"
screenPtr:	.long 0x0000
screenBase:	.long 0x0
syntaxError:	.string "*** Bad number error (at a2h_Error) ***"
anyKeyToContinue:	.string "Hit any key to continue"
blockNumber:	.string "Block Address : 0x"

;
; Write the second block of the SD card with a fixed pattern of data
; Read an SD card block - one block at a time
; Prints the contents of the block to the ANSI screen
; Hit a key on the PS/2 keyboard to advance to the next block
; r9 = block number
;

main:
00000000	D40000B9		bsr		clearScreen_ANSI
00000001	42800000		lix		r8,prompt.lower
00000002	D40000AC		bsr		printString_ANSI
00000003	D40001AB		bsr		newLine_ANSI
00000004	4280000A		lix		r8,10					; give the SD card 10 mS
00000005	D40000CA		bsr		delay_mS
00000006	D400004E		bsr		fillTxBufferRAM
00000007	42503000		lix		PAR,0x3000
00000008	42800004		lix		r8,0x4
00000009	85508000		spl		r8
0000000a	42800001		lix		r8,1					; write to the second block
0000000b	D4000054		bsr		writeBufferRAMToSDHCCard
0000000c	42900000		lix		r9,0					; start with block 0
readNextBlock:
0000000d	428000A8		lix		r8,blockNumber.lower	; Block Number message
0000000e	D40000A0		bsr		printString_ANSI
0000000f	21890000		addi	r8,r9,0
00000010	D4000117		bsr		printLong_ANSI
00000011	D400019D		bsr		newLine_ANSI
00000012	D400001F		bsr		readSDHCCardIntoRdBufferRAM
00000013	D400000A		bsr		dumpBufferRAM
00000014	D400019A		bsr		newLine_ANSI
00000015	42800090		lix		r8,anyKeyToContinue.lower
00000016	D4000098		bsr		printString_ANSI
00000017	D400006B		bsr		getChar_PS2
00000018	D4000196		bsr		newLine_ANSI
00000019	D4000195		bsr		newLine_ANSI
0000001a	21990001		addi	r9,r9,1					; Go to next block address
0000001b	C0FFFFF2		bra		readNextBlock
loopForever:
0000001c	C0000000		bra		loopForever

;
; dumpBufferRAM
;

dumpBufferRAM:
0000001d	A0408000		push	r8
0000001e	A0409000		push	r9
0000001f	A040A000		push	r10
00000020	42A00018		lix		r10,24
00000021	42900200		lix		r9,512
00000022	42601200		lix		DAR,0x1200
getAnotherDataRdVal:
00000023	68806000		ldbp	r8
00000024	D4000141		bsr		printByte_ANSI
00000025	42800020		lix		r8,0x20
00000026	D400009E		bsr		putChar_ANSI
00000027	23AA0001		subi	r10,r10,1
00000028	C7000003		bnz		skipFeedDumpBuff
00000029	D4000185		bsr		newLine_ANSI
0000002a	42A00018		lix		r10,24
skipFeedDumpBuff:
0000002b	23990001		subi	r9,r9,1
0000002c	C7FFFFF7		bnz		getAnotherDataRdVal
0000002d	A1A04000		pull	r10
0000002e	A1904000		pull	r9
0000002f	A1804000		pull	r8
00000030	A1704000		pull	PC

;
; readSDHCCardIntoRdBufferRAM
;
; To read a 512-byte block from the SDHC card:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to read from
; Write 0 to SDCONTROL to issue read command
; Loop 512 times:
;     Wait until SDSTATUS=0xE0 (read byte ready, block busy)
;     Read byte from SDDATA
; r8 = passes the block number
; The SDLBA registers for SDHC are used like this:
;  31 30 29 28.27 26 25 24.23 22 21 20.19 18 17 16.15 14 13 12.11 10 09 08.07 06 05 04.03 02 01 00
;   0  0  0  0  0  0  0  0+---------- SDLBA2 -----+------- SDLBA1 --------+------- SDLBA0 --------+
; r8 = passes the block number
;
;	Read buffer @ 0x1200-0x13ff
;

readSDHCCardIntoRdBufferRAM:
00000031	A0408000		push	r8
00000032	A0409000		push	r9
00000033	A040A000		push	r10
00000034	A0405000		push	PAR
00000035	A0406000		push	DAR
00000036	42601200		lix		DAR,0x1200			; Start of the Read buffer in Data Memory
00000037	42501001		lix		PAR,0x1001			; SDSTATUS
waitForSDStatusRdRdy:
00000038	80905000		lpb		r9
00000039	39390080		cmpi	r9,0x80
0000003a	D2FFFFFE		bne		waitForSDStatusRdRdy
0000003b	42501002		lix		PAR,0x1002
0000003c	89508000		spbp	r8					; SDLBA0
0000003d	33808000		sr8		r8,r8
0000003e	89508000		spbp	r8					; SDLBA1
0000003f	33808000		sr8		r8,r8
00000040	81508000		spb		r8					; SDLBA2
00000041	42800000		lix		r8,0				; Write 0 to SDCONTROL to issue read command
00000042	42501001		lix		PAR,0x1001			; SDCONTROL
00000043	81508000		spb		r8
00000044	42900200		lix		r9,512				; 512 characters to read
nextSDReadChar:
00000045	42501001		lix		PAR,0x1001			; SDSTATUS
waitSDCharPresent:
00000046	80805000		lpb		r8
00000047	393800E0		cmpi	r8,0xE0			; read byte ready
00000048	D2FFFFFE		bne		waitSDCharPresent
00000049	42501000		lix		PAR,0x1000			; SDDATA - read data from SPI data buffer
0000004a	80805000		lpb		r8					; read byte from SD Card
0000004b	69608000		sdbp	r8					; Store byte into Data Memory
0000004c	23990001		subi	r9,r9,1
0000004d	C7FFFFF8		bnz		nextSDReadChar
0000004e	A1604000		pull	DAR
0000004f	A1504000		pull	PAR
00000050	A1A04000		pull	r10
00000051	A1904000		pull	r9
00000052	A1804000		pull	r8
00000053	A1704000		pull	PC

;
; fillTxBufferRAM - Fill the buffer RAM with a sort of ramp
;

fillTxBufferRAM:
00000054	A0408000		push	r8
00000055	A0406000		push	DAR
00000056	42800200		lix		r8,512
00000057	42601000		lix		DAR,0x1000			; Start of the Write buffer in Data Memory
moreTxBuffWr:
00000058	69608000		sdbp	r8
00000059	23880001		subi	r8,r8,1
0000005a	39380000		cmpi	r8,0
0000005b	D2FFFFFD		bne		moreTxBuffWr
0000005c	A1604000		pull	DAR
0000005d	A1804000		pull	r8
0000005e	A1704000		pull	PC
	
;
; writeBufferRAMToSDHCCard
;
; To write a 512-byte block to the SDHC card:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to write to
; Write 1 to SDCONTROL to issue write command
; Loop 512 times:
;     Wait until SDSTATUS=0xA0 (block busy)
;     Write byte to SDDATA
; r8 = passes the block number
; r9 is the decrementing byte counter
;
;	Write buffer @ 0x1000-0x11ff
;

writeBufferRAMToSDHCCard:
0000005f	A0408000		push	r8
00000060	A0409000		push	r9
00000061	A040A000		push	r10
00000062	A0405000		push	PAR
00000063	A0406000		push	DAR
00000064	42501001		lix		PAR,0x1001			; SDSTATUS
00000065	42601000		lix		DAR,0x1000			; Start of the Write buffer in Data Memory
waitForSDStatusWrRdy:
00000066	80905000		lpb		r9
00000067	39390080		cmpi	r9,0x80
00000068	D2FFFFFE		bne		waitForSDStatusWrRdy
00000069	42501002		lix		PAR,0x1002
0000006a	89508000		spbp	r8					; SDLBA0
0000006b	33808000		sr8		r8,r8
0000006c	89508000		spbp	r8					; SDLBA1
0000006d	33808000		sr8		r8,r8
0000006e	81508000		spb		r8					; SDLBA2
0000006f	42501001		lix		PAR,0x1001			; SDCONTROL
00000070	42800001		lix		r8,1				; Write 1 to SDCONTROL to issue write command
00000071	81508000		spb		r8
00000072	42900200		lix		r9,512				; 512 characters to write
nextSDWriteChar:
00000073	42501001		lix		PAR,0x1001			; SDSTATUS address
waitSDCharPresentWr:
00000074	80805000		lpb		r8
00000075	393800A0		cmpi	r8,0xA0				; 0xA0 flags that the previous transfer is complete
00000076	D2FFFFFE		bne		waitSDCharPresentWr
00000077	42501000		lix		PAR,0x1000			; SDDATA address
00000078	68A06000		ldbp	r10					; Get data from the data buffer memory
00000079	8150A000		spb		r10					; Write out to SPI bus
0000007a	23990001		subi	r9,r9,1
0000007b	C7FFFFF8		bnz		nextSDWriteChar
0000007c	A1604000		pull	DAR
0000007d	A1504000		pull	PAR
0000007e	A1A04000		pull	r10
0000007f	A1904000		pull	r9
00000080	A1804000		pull	r8
00000081	A1704000		pull	PC
	
;
; getChar_PS2
; returns character received in r8
;

getChar_PS2:
00000082	A0405000		push	PAR
00000083	42500801		lix		PAR,0x0801	; PS/2 Status
waitPS2RxStat:
00000084	84805000		lpl		r8			; Read Status into r9
00000085	2B880001		andi 	r8,r8,1
00000086	C3FFFFFE		bez 	waitPS2RxStat
getCharFromPS2:
00000087	42500800		lix 	PAR,0x0800
00000088	84805000		lpl		r8
whilePS2RxStat:
00000089	A1504000		pull	PAR
0000008a	A1704000		pull	PC

;
; waitCharPolled_PS2 - Check the polled character interface
; wait for a character
; return when a character is present
; returns character received in r8
;

waitCharPolled_PS2:
0000008b	A0405000		push	PAR
0000008c	42500803		lix		PAR,0x0803	; PS/2 Status
waitPS2RxStatPolled:
0000008d	84805000		lpl		r8			; Read Status into r8
0000008e	2B880001		andi 	r8,r8,0x1
0000008f	C3FFFFFE		bez 	waitPS2RxStatPolled
getCharFromPS2Polled:
00000090	42500802		lix 	PAR,0x0802
00000091	84805000		lpl		r8
whilePS2RxStatPolled:
00000092	A1504000		pull	PAR
00000093	A1704000		pull	PC

;
; checkGetStat_PS2 - Checks the polling status
; Polled interface is active while the keyboard key is pressed
; returns 
;	-1 if there is no character, 
;	character if there is a character
;

checkGetStat_PS2:
00000094	A0405000		push	PAR
00000095	42500803		lix		PAR,0x0803	; PS/2 Status
00000096	84805000		lpl		r8			; Read Status into r8
00000097	2B880001		andi	r8,r8,0x1
00000098	C3000004		bez		charNotPresent
00000099	42500802		lix		PAR,0x0802
0000009a	84805000		lpl		r8
0000009b	C0000002		bra		gotCharIn
charNotPresent:
0000009c	20802000		add		r8,ZERO,MINUS1
gotCharIn:
0000009d	A1504000		pull	PAR
0000009e	A1704000		pull	PC

;
; putChar_UART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putChar_UART:
0000009f	A0405000		push	PAR
000000a0	A0408000		push	r8
000000a1	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
000000a2	84805000		lpl		r8			; Read Status into r8
000000a3	2B880002		andi 	r8,r8,0x2
000000a4	C7000005		bnz 	uartRdy
; Remind user to enable HW handshake
; would be better to add a HW handshake timeout
; Since the USB is so much faster it is unlikely this path 
;	will be exercised. 
; For cards with RS-232 serial this would be a serious concern
; It's more likely that PuTTY needed to be run in HW handshake mode.
handshakeStuck:
000000a5	42800030		lix		r8,missingHandshake.lower
000000a6	D4000008		bsr		printString_ANSI
000000a7	A1804000		pull	r8
000000a8	C0000004		bra		getOut
uartRdy:
000000a9	42501801		lix 	PAR,0x1801
000000aa	A1804000		pull	r8
000000ab	85508000		spl		r8			; echo the character
getOut:
000000ac	A1504000		pull	PAR
000000ad	A1704000		pull	PC
	
;
; printString_ANSI - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI:
000000ae	A0408000		push	r8					; save r8
000000af	A0406000		push	DAR
000000b0	21680000		addi	DAR,r8,0x0		; set the start of the string
nextCharANSI:
000000b1	68806000		ldbp	r8					; get the character01
000000b2	39380000		cmpi	r8,0x0				; Null terminated string
000000b3	D1000003		beq		donePrANSIStr		; done if null
000000b4	D4000010		bsr		putChar_ANSI	; write out the character
000000b5	C0FFFFFC		bra		nextCharANSI
donePrANSIStr:
000000b6	A1604000		pull	DAR					; restore DAR
000000b7	A1804000		pull	r8					; restore r8
000000b8	A1704000		pull	PC					; rts
	
;
; clearScreen_ANSI - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
; No passed value
; Uses r8 (saved during function)
; no return value
;

clearScreen_ANSI:
000000b9	A0408000		push	r8				; save r8
000000ba	4280001B		lix		r8,0x1b			; ESC
000000bb	D4000009		bsr		putChar_ANSI
000000bc	4280005B		lix		r8,0x5b			; [
000000bd	D4000007		bsr		putChar_ANSI
000000be	42800032		lix		r8,0x32			; 2
000000bf	D4000005		bsr		putChar_ANSI
000000c0	4280004A		lix		r8,0x4A			; J
000000c1	D4000003		bsr		putChar_ANSI
000000c2	A1804000		pull	r8
000000c3	A1704000		pull	PC				; rts

;
; putChar_ANSI - Put a character to the screen
; r8 - Character to put to screen
; r8 - returns character that was sent to screen
;

putChar_ANSI:
000000c4	A0405000		push	PAR
000000c5	A0408000		push	r8
000000c6	42500000		lix		PAR,0x0		; ANSI Screen (UART-style) Status
waitScreenTxStat:
000000c7	84805000		lpl		r8			; Read Status into r9
000000c8	2B880002		andi 	r8,r8,0x2
000000c9	C3FFFFFE		bez 	waitScreenTxStat
000000ca	42500001		lix 	PAR,0x1		; ANSI Screen (UART-style) Data
000000cb	A1804000		pull	r8
000000cc	81508000		spb		r8			; send character to the screen
000000cd	A1504000		pull	PAR
000000ce	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
000000cf	A0408000		push	r8
000000d0	A0409000		push	r9
000000d1	42503802		lix		PAR,0x3802		; address of the mSec counter
000000d2	84905000		lpl		r9				; read the peripheral counter into r9
000000d3	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000d4	84905000		lpl		r9				; check the elapsed time counter
000000d5	38389000		cmp		r8,r9
000000d6	CCFFFFFE		blt		loop_delay_mS
000000d7	A1904000		pull	r9
000000d8	A1804000		pull	r8
000000d9	A1704000		pull	PC

; convLineBuff2DigASCIIToHex7Seg - Convert a two ASCII digit value into a hex byte
; Passed: r8 points to the start of the hex string
; Returned: r8 contains the hex value of the string
; Put the byte to the Seven Segment Display
;

convLineBuff2DigASCIIToHex7Seg:
000000da	A0409000		push	r9
000000db	A0406000		push	DAR
000000dc	A0405000		push	PAR
000000dd	42900000		lix		r9,0
000000de	20680000		add		DAR,r8,ZERO		; Address of lineBuff (passed into this routine)
000000df	68806000		ldbp	r8
000000e0	D400001C		bsr		asciiCharToHexNibble
000000e1	3938DEAD		cmpi	r8,0xDEAD
000000e2	D1000011		beq		badHexVal
000000e3	2B88000F		andi	r8,r8,0xf
000000e4	28998000		or		r9,r9,r8
000000e5	30909000		sl1		r9,r9
000000e6	30909000		sl1		r9,r9
000000e7	30909000		sl1		r9,r9
000000e8	30909000		sl1		r9,r9
000000e9	60806000		ldb		r8
000000ea	D4000012		bsr		asciiCharToHexNibble
000000eb	3938DEAD		cmpi	r8,0xDEAD
000000ec	D1000007		beq		badHexVal
000000ed	2B88000F		andi	r8,r8,0xf
000000ee	28998000		or		r9,r9,r8
000000ef	42503000		lix		PAR,0x3000		; seven segment display
000000f0	85509000		spl		r9
000000f1	20890000		add		r8,r9,ZERO
000000f2	C0000006		bra		valOKDone
badHexVal:
000000f3	42800068		lix		r8,syntaxError.lower
000000f4	D40000B3		bsr		newLine_ANSI_UART
000000f5	D400009B		bsr		printString_ANSI_UART
000000f6	D40000B1		bsr		newLine_ANSI_UART
000000f7	4280DEAD		lix		r8,0xDEAD
valOKDone:
000000f8	A1504000		pull	PAR
000000f9	A1604000		pull	DAR
000000fa	A1904000		pull	r9
000000fb	A1704000		pull	PC

;
; asciiCharToHexNibble - Convert a single ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
; Result is returned in r8
;	0x0-0xf - Legal Values
;	'DEAD' - Not hex character
;

asciiCharToHexNibble:
000000fc	39380066		cmpi	r8,0x66			; past 'f'
000000fd	CC000011		blt		a2h_Error
000000fe	39380030		cmpi	r8,0x30			; below '0'
000000ff	CF00000F		bgt		a2h_Error
00000100	3938003A		cmpi	r8,0x3A			; '0' - '9'
00000101	CF000009		bgt		gotDigit
00000102	39380041		cmpi	r8,0x41			; ':' - '@'
00000103	CF00000B		bgt		a2h_Error
00000104	39380047		cmpi	r8,0x47			; 'A' - 'F'
00000105	CC000007		blt		gotUpperLetter
00000106	39380061		cmpi	r8,0x61			; 'G' - 'tick'
00000107	CC000007		blt		a2h_Error
; Lower case letter
00000108	23880057		subi	r8,r8,0x57
00000109	C000000A		bra		doneConvA2H
; number 0-9
gotDigit:
0000010a	23880030		subi	r8,r8,0x30
0000010b	C0000008		bra		doneConvA2H
; A-F
gotUpperLetter:
0000010c	23880037		subi	r8,r8,0x37
0000010d	C0000006		bra		doneConvA2H
a2h_Error:
0000010e	42800068		lix		r8,syntaxError.lower
0000010f	D4000098		bsr		newLine_ANSI_UART
00000110	D4000080		bsr		printString_ANSI_UART
00000111	D4000096		bsr		newLine_ANSI_UART
00000112	4280DEAD		lix		r8,0xDEAD
doneConvA2H:
00000113	A1704000		pull	PC

;
; printLong_ANSI_UART
; r8 contains the long value to print
;

printLong_ANSI_UART:
00000114	A0408000		push	r8
00000115	A0409000		push	r9
00000116	A0408000		push	r8				; temporarily save r8
00000117	42800030		lix		r8,0x30			; print 0x
00000118	D400005F		bsr		putChar_ANSI_UART
00000119	42800078		lix		r8,0x78
0000011a	D400005D		bsr		putChar_ANSI_UART
0000011b	A1804000		pull	r8				; restore r8
0000011c	42900008		lix		r9,8			; loop counter
doNextprintLong_ANSI_UART:
0000011d	34808000		rol1	r8,r8
0000011e	34808000		rol1	r8,r8
0000011f	34808000		rol1	r8,r8
00000120	34808000		rol1	r8,r8
00000121	D4000059		bsr		printHexVal_ANSI_UART
00000122	23990001		subi	r9,r9,1
00000123	C7FFFFFA		bnz		doNextprintLong_ANSI_UART
00000124	A1904000		pull	r9
00000125	A1804000		pull	r8
00000126	A1704000		pull	PC

;
; printLong_ANSI
; r8 contains the long value to print
;

printLong_ANSI:
00000127	A0408000		push	r8
00000128	A0409000		push	r9
00000129	A0408000		push	r8				; temporarily save r8
0000012a	42800030		lix		r8,0x30			; print 0x
0000012b	D4FFFF99		bsr		putChar_ANSI
0000012c	42800078		lix		r8,0x78
0000012d	D4FFFF97		bsr		putChar_ANSI
0000012e	A1804000		pull	r8				; restore r8
0000012f	42900008		lix		r9,8			; loop counter
doNextprintLong_ANSI:
00000130	34808000		rol1	r8,r8
00000131	34808000		rol1	r8,r8
00000132	34808000		rol1	r8,r8
00000133	34808000		rol1	r8,r8
00000134	D4000051		bsr		printHexVal_ANSI
00000135	23990001		subi	r9,r9,1
00000136	C7FFFFFA		bnz		doNextprintLong_ANSI
00000137	A1904000		pull	r9
00000138	A1804000		pull	r8
00000139	A1704000		pull	PC

;
; printShort_ANSI_UART
; r8 contains the short value to print
;

printShort_ANSI_UART:
0000013a	A0408000		push	r8
0000013b	A0409000		push	r9
0000013c	A0408000		push	r8				; temporarily save r8
0000013d	42800030		lix		r8,0x30			; print 0x
0000013e	D4000039		bsr		putChar_ANSI_UART
0000013f	42800078		lix		r8,0x78
00000140	D4000037		bsr		putChar_ANSI_UART
00000141	A1804000		pull	r8				; restore r8
00000142	42900004		lix		r9,4			; loop counter
00000143	31808000		sl8		r8,r8
00000144	31808000		sl8		r8,r8
doNextprintShort_ANSI_UART:
00000145	34808000		rol1	r8,r8
00000146	34808000		rol1	r8,r8
00000147	34808000		rol1	r8,r8
00000148	34808000		rol1	r8,r8
00000149	D4000031		bsr		printHexVal_ANSI_UART
0000014a	23990001		subi	r9,r9,1
0000014b	C7FFFFFA		bnz		doNextprintShort_ANSI_UART
0000014c	A1904000		pull	r9
0000014d	A1804000		pull	r8
0000014e	A1704000		pull	PC

;
; printByte_ANSI_UART
; r8 contains the char value to print
;

printByte_ANSI_UART:
0000014f	A0408000		push	r8
00000150	A0409000		push	r9
00000151	A0408000		push	r8				; temporarily save r8
00000152	42800030		lix		r8,0x30			; print 0x
00000153	D4000024		bsr		putChar_ANSI_UART
00000154	42800078		lix		r8,0x78
00000155	D4000022		bsr		putChar_ANSI_UART
00000156	A1804000		pull	r8				; restore r8
00000157	42900002		lix		r9,2			; loop counter
00000158	31808000		sl8		r8,r8
00000159	31808000		sl8		r8,r8
0000015a	31808000		sl8		r8,r8
doNextprintByte_ANSI_UART:
0000015b	34808000		rol1	r8,r8
0000015c	34808000		rol1	r8,r8
0000015d	34808000		rol1	r8,r8
0000015e	34808000		rol1	r8,r8
0000015f	D400001B		bsr		printHexVal_ANSI_UART
00000160	23990001		subi	r9,r9,1
00000161	C7FFFFFA		bnz		doNextprintByte_ANSI_UART
00000162	A1904000		pull	r9
00000163	A1804000		pull	r8
00000164	A1704000		pull	PC
	
;
; printByte_ANSI
; r8 contains the char value to print
;

printByte_ANSI:
00000165	A0408000		push	r8
00000166	A0409000		push	r9
00000167	A0408000		push	r8				; temporarily save r8
00000168	A1804000		pull	r8				; restore r8
00000169	42900002		lix		r9,2			; loop counter
0000016a	31808000		sl8		r8,r8
0000016b	31808000		sl8		r8,r8
0000016c	31808000		sl8		r8,r8
doNextprintByte_ANSI:
0000016d	34808000		rol1	r8,r8
0000016e	34808000		rol1	r8,r8
0000016f	34808000		rol1	r8,r8
00000170	34808000		rol1	r8,r8
00000171	D4000014		bsr		printHexVal_ANSI
00000172	23990001		subi	r9,r9,1
00000173	C7FFFFFA		bnz		doNextprintByte_ANSI
00000174	A1904000		pull	r9
00000175	A1804000		pull	r8
00000176	A1704000		pull	PC
	
; putChar_ANSI_UART
; write out a character to both 
;	the ANSI screen and the UART

putChar_ANSI_UART:
00000177	D4FFFF4D		bsr		putChar_ANSI
00000178	D4FFFF27		bsr		putChar_UART
00000179	A1704000		pull	PC

;
; printHexVal_ANSI_UART
;

printHexVal_ANSI_UART:
0000017a	A0408000		push	r8
0000017b	2B88000F		andi	r8,r8,0xf
0000017c	39380009		cmpi	r8,9
0000017d	CC000004		blt		printHexLetter
0000017e	21880030		addi	r8,r8,0x30
0000017f	D4FFFFF8		bsr		putChar_ANSI_UART
00000180	C0000003		bra		donePrintHexVal
printHexLetter:
00000181	21880037		addi	r8,r8,0x37		; 'A' - 10
00000182	D4FFFFF5		bsr		putChar_ANSI_UART
donePrintHexVal:
00000183	A1804000		pull	r8
00000184	A1704000		pull	PC

;
; printHexVal_ANSI_UART
;

printHexVal_ANSI:
00000185	A0408000		push	r8
00000186	2B88000F		andi	r8,r8,0xf
00000187	39380009		cmpi	r8,9
00000188	CC000004		blt		printHexLetterANSI
00000189	21880030		addi	r8,r8,0x30
0000018a	D4FFFF3A		bsr		putChar_ANSI
0000018b	C0000003		bra		donePrintHexValANSI
printHexLetterANSI:
0000018c	21880037		addi	r8,r8,0x37		; 'A' - 10
0000018d	D4FFFF37		bsr		putChar_ANSI
donePrintHexValANSI:
0000018e	A1804000		pull	r8
0000018f	A1704000		pull	PC

;
; printString_ANSI_UART - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI_UART:
00000190	A0408000		push	r8					; save r8
00000191	A0406000		push	DAR
00000192	21680000		addi	DAR,r8,0			; set the start of the string
nextChar:
00000193	68806000		ldbp	r8					; get the character01
00000194	39380000		cmpi	r8,0x0				; Null terminated string
00000195	D1000003		beq		donePrStr			; done if null
00000196	D4FFFFE1		bsr		putChar_ANSI_UART	; write out the character
00000197	C0FFFFFC		bra		nextChar
donePrStr:
00000198	A1604000		pull	DAR					; restore DAR
00000199	A1804000		pull	r8					; restore r8
0000019a	A1704000		pull	PC					; rts
	
;
; printLinebuffer_ANSI_UART - Print a screen to the current screen position with CRLF at the end
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printLinebuffer_ANSI_UART:
0000019b	A0408000		push	r8					; save r8
0000019c	A0406000		push	DAR
0000019d	21680000		addi	DAR,r8,0x0			; set the start of the string
nextChar2:
0000019e	68806000		ldbp	r8					; get the character
0000019f	39380000		cmpi	r8,0x0				; Null terminated string
000001a0	D1000003		beq		donePrStr2			; done if null
000001a1	D4FFFF0D		bsr		printString_ANSI	; write out the character
000001a2	C0FFFFFC		bra		nextChar2
donePrStr2:
000001a3	D4000004		bsr		newLine_ANSI_UART
000001a4	A1604000		pull	DAR					; restore DAR
000001a5	A1804000		pull	r8					; restore r8
000001a6	A1704000		pull	PC					; rts
	
;
; newLine_ANSI_UART - Print out a newLine_ANSI_UART (CR-LF)
;

newLine_ANSI_UART:
000001a7	A0408000		push	r8
000001a8	4280000A		lix		r8,0x0A				; Line Feed
000001a9	D4FFFFCE		bsr		putChar_ANSI_UART	; Put the character to the screen
000001aa	4280000D		lix		r8,0x0D				; Carriage Return
000001ab	D4FFFFCC		bsr		putChar_ANSI_UART		; Echo character back to the UART
000001ac	A1804000		pull	r8
000001ad	A1704000		pull	PC

;
; newLine_ANSI - Print out a newLine_ANSI (CR-LF)
;

newLine_ANSI:
000001ae	A0408000		push	r8
000001af	4280000A		lix		r8,0x0A				; Line Feed
000001b0	D4FFFF14		bsr		putChar_ANSI	; Put the character to the screen
000001b1	4280000D		lix		r8,0x0D				; Carriage Return
000001b2	D4FFFF12		bsr		putChar_ANSI	; Echo character back to the UART
000001b3	A1804000		pull	r8
000001b4	A1704000		pull	PC

;
; clearScreen_ANSI_UART - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen_ANSI_UART:
000001b5	A0408000		push	r8				; save r8
000001b6	4280001B		lix		r8,0x1b			; ESC
000001b7	D4FFFFC0		bsr		putChar_ANSI_UART
000001b8	4280005B		lix		r8,0x5b			; [
000001b9	D4FFFFBE		bsr		putChar_ANSI_UART
000001ba	42800032		lix		r8,0x32			; 2
000001bb	D4FFFFBC		bsr		putChar_ANSI_UART
000001bc	4280004A		lix		r8,0x4A			; J
000001bd	D4FFFFBA		bsr		putChar_ANSI_UART
000001be	A1804000		pull	r8
000001bf	A1704000		pull	PC				; rts

	