; P006-SDHC_Blk_Rd_Test - Read a block from the SDHC Card into Data RAM
;
; Testing on A-ESTF FPGA development card
;	http://land-boards.com/blwiki/index.php?title=A-ESTF_V2_EP4CE22_Board
; Not all FPGA cards have built-in SD Card sockets
; On other cards, should be able to wire up to IO pins (if there are any)
; Dumps SDHC Card to the ANSI VGA screen
;
; There are three types of SD cards
; SDSC - Standard Capacity SD cards (up to 2 GB)
; SDHC - High Capacity SD cards (>2GB up to 32 GB)
; SDXC - Extra Capacity SD cards (>32 GB) - not currently supported
;
; For SDHC, the read/write address parameter is the ordinal number of 512-byte block 
; the 9 low address bits are implicitly 0. 
; The 24 programmable address bits select the 512-byte block.
; This gives an address capacity of 2^24 * 512 = 8GByte.
; SDHC can be upto 32GByte but this design can only access the low 8GByte. 
; The SDLBA registers are used like this:
;  31 30 29 28.27 26 25 24.23 22 21 20.19 18 17 16.15 14 13 12.11 10 09 08.07 06 05 04.03 02 01 00
;   0  0  0  0  0  0  0  0+---------- SDLBA2 -----+------- SDLBA1 --------+------- SDLBA0 --------+
;
; There is a constant in the VHDL code which is automatically set when the card is initialized.
;	signal sdhc : std_logic := '0';
;	-- set to 0 for SDSC cards
;	-- set to non-0 for SDHC cards
;
; Original VHDL code was based on the Multicomp design by Grant Searle
; Adapted from design by Steven J. Merrifield, June 2008
;	https://pastebin.com/HW3ru1cC
; Read states are derived from the Apple II emulator by Stephen Edwards
;	https://github.com/MiSTer-devel/Apple-II_MiSTer
; Enhanced by Neal Crook to support SDHC cards
;	https://github.com/nealcrook/multicomp6809/tree/master/multicomp/Components/SDCARD
; SDHC can be upto 32GByte but this design can only access the low 8GByte
; Code for R32V2020 RISC CPU
;
; SD Card base address is x1000
; Register Addresses
;    0x1000    SDDATA        read/write data
;    0x1001    SDSTATUS      read
;    0x1001    SDCONTROL     write
;    0x1002    SDLBA0        write-only
;    0x1003    SDLBA1        write-only
;    0x1004    SDLBA2        write-only (only bits 6:0 are valid)
;
; To read a 512-byte block from the SDHC card:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to read from
; Write 0 to SDCONTROL to issue read command
; Loop 512 times:
;     Wait until SDSTATUS=0xE0 (read byte ready, block busy)
;     Read byte from SDDATA
;
; To write a 512-byte block to the SDHC card:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to write to
; Write 1 to SDCONTROL to issue write command
; Loop 512 times:
;     Wait until SDSTATUS=0xA0 (block busy)
;     Write byte to SDDATA
;
; Using additional DataRAM block for I/O buffer storage
; 	Block is 1KB - 256x32-bits
;	Allows for write buffer and 1 read buffer of 512bytes length
;	RAM starts at A12=1 (4KB and up) = 0x1000
;	Write buffer @ 0x1000-0x11ff
;	Read buffer @ 0x1200-0x13ff
;

prompt:	.string "(R32V2020) SDHC Data RAM Test Utility v0.0.1"
missingHandshake: .string "*** Run PuTTY and enable hardware handshake ***"
screenPtr:	.long 0x0000
screenBase:	.long 0x0
syntaxError:	.string "*** Bad number error (at a2h_Error) ***"
anyKeyToContinue:	.string "Hit any key to continue"
blockNumber:	.string "Block Address : 0x"

;
; Write the second block of the SD card with a fixed pattern of data
; Read an SD card block - one block at a time
; Prints the contents of the block to the ANSI screen
; Hit a key on the PS/2 keyboard to advance to the next block
; r9 = block number
;

main:
00000000	42503000		lix		PAR,0x3000
00000001	42800001		lix		r8,0x1
00000002	85508000		spl		r8
00000003	D40000B2		bsr		clearScreen_ANSI
00000004	42800000		lix		r8,prompt.lower
00000005	D40000A5		bsr		printString_ANSI
00000006	D40001A4		bsr		newLine_ANSI
00000007	42503000		lix		PAR,0x3000
00000008	42800002		lix		r8,0x2
00000009	85508000		spl		r8
0000000a	4280000A		lix		r8,10					; give the SD card 10 mS
0000000b	D40000C0		bsr		delay_mS
0000000c	42503000		lix		PAR,0x3000
0000000d	42800003		lix		r8,0x3
0000000e	85508000		spl		r8
0000000f	D4000041		bsr		fillTxBufferRAM
00000010	42800001		lix		r8,1					; write to the second block
00000011	42503000		lix		PAR,0x3000
00000012	42800004		lix		r8,0x4
00000013	85508000		spl		r8
00000014	D4000047		bsr		writeBufferRAMToSDHCCard
00000015	42503000		lix		PAR,0x3000
00000016	42800005		lix		r8,0x5
00000017	85508000		spl		r8
00000018	42900000		lix		r9,0					; start with block 0
readNextBlock:
00000019	428000A8		lix		r8,blockNumber.lower	; Block Number message
0000001a	D4000090		bsr		printString_ANSI
0000001b	21890000		addi	r8,r9,0
0000001c	D4000107		bsr		printLong_ANSI
0000001d	D400018D		bsr		newLine_ANSI
0000001e	42503000		lix		PAR,0x3000
0000001f	42C00006		lix		r12,0x6
00000020	8550C000		spl		r12
00000021	D400000C		bsr		readSDHCCardIntoRdBufferRAM
00000022	42503000		lix		PAR,0x3000
00000023	42800007		lix		r8,0x7
00000024	85508000		spl		r8
00000025	D4000185		bsr		newLine_ANSI
00000026	42800090		lix		r8,anyKeyToContinue.lower
00000027	D4000083		bsr		printString_ANSI
00000028	D4000056		bsr		getChar_PS2
00000029	D4000181		bsr		newLine_ANSI
0000002a	21990001		addi	r9,r9,1					; Go to next block address
0000002b	C0FFFFEE		bra		readNextBlock
loopForever:
0000002c	C0000000		bra		loopForever
	

;
; readSDHCCardIntoRdBufferRAM
;
; To read a 512-byte block from the SDHC card:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to read from
; Write 0 to SDCONTROL to issue read command
; Loop 512 times:
;     Wait until SDSTATUS=0xE0 (read byte ready, block busy)
;     Read byte from SDDATA
; r8 = passes the block number
; The SDLBA registers for SDHC are used like this:
;  31 30 29 28.27 26 25 24.23 22 21 20.19 18 17 16.15 14 13 12.11 10 09 08.07 06 05 04.03 02 01 00
;   0  0  0  0  0  0  0  0+---------- SDLBA2 -----+------- SDLBA1 --------+------- SDLBA0 --------+
; r8 = passes the block number
;
;	Read buffer @ 0x1200-0x13ff
;

readSDHCCardIntoRdBufferRAM:
0000002d	A0408000		push	r8
0000002e	A0409000		push	r9
0000002f	A040A000		push	r10
00000030	A0405000		push	PAR
00000031	A0406000		push	DAR
00000032	42601200		lix		DAR,0x1200			; Start of the Read buffer in Data Memory
00000033	42501001		lix		PAR,0x1001			; SDSTATUS
waitForSDStatusRdRdy:
00000034	80905000		lpb		r9
00000035	39390080		cmpi	r9,0x80
00000036	D2FFFFFE		bne		waitForSDStatusRdRdy
00000037	42501002		lix		PAR,0x1002
00000038	89508000		spbp	r8					; SDLBA0
00000039	33808000		sr8		r8,r8
0000003a	89508000		spbp	r8					; SDLBA1
0000003b	33808000		sr8		r8,r8
0000003c	81508000		spb		r8					; SDLBA2
0000003d	42800000		lix		r8,0				; Write 0 to SDCONTROL to issue read command
0000003e	42501001		lix		PAR,0x1001			; SDCONTROL
0000003f	81508000		spb		r8
00000040	42900200		lix		r9,512				; 512 characters to read
nextSDReadChar:
00000041	42501001		lix		PAR,0x1001			; SDSTATUS
waitSDCharPresent:
00000042	80805000		lpb		r8
00000043	393800E0		cmpi	r8,0xE0			; read byte ready
00000044	D2FFFFFE		bne		waitSDCharPresent
00000045	42501000		lix		PAR,0x1000			; SDDATA - read data from SPI data buffer
00000046	80805000		lpb		r8					; read byte from SD Card
00000047	69608000		sdbp	r8					; Store byte into Data Memory
00000048	23990001		subi	r9,r9,1
00000049	C7FFFFF8		bnz		nextSDReadChar
0000004a	A1604000		pull	DAR
0000004b	A1504000		pull	PAR
0000004c	A1A04000		pull	r10
0000004d	A1904000		pull	r9
0000004e	A1804000		pull	r8
0000004f	A1704000		pull	PC

;
; fillTxBufferRAM - Fill the buffer RAM with a sort of ramp
;

fillTxBufferRAM:
00000050	A0408000		push	r8
00000051	A0406000		push	DAR
00000052	42800200		lix		r8,512
00000053	42601000		lix		DAR,0x1000			; Start of the Write buffer in Data Memory
moreTxBuffWr:
00000054	69608000		sdbp	r8
00000055	23880001		subi	r8,r8,1
00000056	39380000		cmpi	r8,0
00000057	D2FFFFFD		bne		moreTxBuffWr
00000058	A1604000		pull	DAR
00000059	A1804000		pull	r8
0000005a	A1704000		pull	PC
	
;
; writeBufferRAMToSDHCCard
;
; To write a 512-byte block to the SDHC card:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to write to
; Write 1 to SDCONTROL to issue write command
; Loop 512 times:
;     Wait until SDSTATUS=0xA0 (block busy)
;     Write byte to SDDATA
; r8 = passes the block number
; r9 is the decrementing byte counter
;
;	Write buffer @ 0x1000-0x11ff
;

writeBufferRAMToSDHCCard:
0000005b	A0408000		push	r8
0000005c	A0409000		push	r9
0000005d	A040A000		push	r10
0000005e	A0405000		push	PAR
0000005f	A0406000		push	DAR
00000060	42501001		lix		PAR,0x1001			; SDSTATUS
00000061	42601000		lix		DAR,0x1000			; Start of the Write buffer in Data Memory
waitForSDStatusWrRdy:
00000062	80905000		lpb		r9
00000063	39390080		cmpi	r9,0x80
00000064	D2FFFFFE		bne		waitForSDStatusWrRdy
00000065	42501002		lix		PAR,0x1002
00000066	89508000		spbp	r8					; SDLBA0
00000067	33808000		sr8		r8,r8
00000068	89508000		spbp	r8					; SDLBA1
00000069	33808000		sr8		r8,r8
0000006a	81508000		spb		r8					; SDLBA2
0000006b	42501001		lix		PAR,0x1001			; SDCONTROL
0000006c	42800001		lix		r8,1				; Write 1 to SDCONTROL to issue write command
0000006d	81508000		spb		r8
0000006e	42900200		lix		r9,512				; 512 characters to write
nextSDWriteChar:
0000006f	42501001		lix		PAR,0x1001			; SDSTATUS address
waitSDCharPresentWr:
00000070	80805000		lpb		r8
00000071	393800A0		cmpi	r8,0xA0				; 0xA0 flags that the previous transfer is complete
00000072	D2FFFFFE		bne		waitSDCharPresentWr
00000073	42501000		lix		PAR,0x1000			; SDDATA address
00000074	68A06000		ldbp	r10					; Get data from the data buffer memory
00000075	8150A000		spb		r10					; Write out to SPI bus
00000076	23990001		subi	r9,r9,1
00000077	C7FFFFF8		bnz		nextSDWriteChar
00000078	A1604000		pull	DAR
00000079	A1504000		pull	PAR
0000007a	A1A04000		pull	r10
0000007b	A1904000		pull	r9
0000007c	A1804000		pull	r8
0000007d	A1704000		pull	PC
	
;
; getChar_PS2
; returns character received in r8
;

getChar_PS2:
0000007e	A0405000		push	PAR
0000007f	42500801		lix		PAR,0x0801	; PS/2 Status
waitPS2RxStat:
00000080	84805000		lpl		r8			; Read Status into r9
00000081	2B880001		andi 	r8,r8,1
00000082	C3FFFFFE		bez 	waitPS2RxStat
getCharFromPS2:
00000083	42500800		lix 	PAR,0x0800
00000084	84805000		lpl		r8
whilePS2RxStat:
00000085	A1504000		pull	PAR
00000086	A1704000		pull	PC

;
; waitCharPolled_PS2 - Check the polled character interface
; wait for a character
; return when a character is present
; returns character received in r8
;

waitCharPolled_PS2:
00000087	A0405000		push	PAR
00000088	42500803		lix		PAR,0x0803	; PS/2 Status
waitPS2RxStatPolled:
00000089	84805000		lpl		r8			; Read Status into r8
0000008a	2B880001		andi 	r8,r8,0x1
0000008b	C3FFFFFE		bez 	waitPS2RxStatPolled
getCharFromPS2Polled:
0000008c	42500802		lix 	PAR,0x0802
0000008d	84805000		lpl		r8
whilePS2RxStatPolled:
0000008e	A1504000		pull	PAR
0000008f	A1704000		pull	PC

;
; checkGetStat_PS2 - Checks the polling status
; Polled interface is active while the keyboard key is pressed
; returns 
;	-1 if there is no character, 
;	character if there is a character
;

checkGetStat_PS2:
00000090	A0405000		push	PAR
00000091	42500803		lix		PAR,0x0803	; PS/2 Status
00000092	84805000		lpl		r8			; Read Status into r8
00000093	2B880001		andi	r8,r8,0x1
00000094	C3000004		bez		charNotPresent
00000095	42500802		lix		PAR,0x0802
00000096	84805000		lpl		r8
00000097	C0000002		bra		gotCharIn
charNotPresent:
00000098	20802000		add		r8,ZERO,MINUS1
gotCharIn:
00000099	A1504000		pull	PAR
0000009a	A1704000		pull	PC

;
; putChar_UART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putChar_UART:
0000009b	A0405000		push	PAR
0000009c	A0408000		push	r8
0000009d	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
0000009e	84805000		lpl		r8			; Read Status into r8
0000009f	2B880002		andi 	r8,r8,0x2
000000a0	C7000005		bnz 	uartRdy
; Remind user to enable HW handshake
; would be better to add a HW handshake timeout
; Since the USB is so much faster it is unlikely this path 
;	will be exercised. 
; For cards with RS-232 serial this would be a serious concern
; It's more likely that PuTTY needed to be run in HW handshake mode.
handshakeStuck:
000000a1	42800030		lix		r8,missingHandshake.lower
000000a2	D4000008		bsr		printString_ANSI
000000a3	A1804000		pull	r8
000000a4	C0000004		bra		getOut
uartRdy:
000000a5	42501801		lix 	PAR,0x1801
000000a6	A1804000		pull	r8
000000a7	85508000		spl		r8			; echo the character
getOut:
000000a8	A1504000		pull	PAR
000000a9	A1704000		pull	PC
	
;
; printString_ANSI - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI:
000000aa	A0408000		push	r8					; save r8
000000ab	A0406000		push	DAR
000000ac	21680000		addi	DAR,r8,0x0		; set the start of the string
nextCharANSI:
000000ad	68806000		ldbp	r8					; get the character01
000000ae	39380000		cmpi	r8,0x0				; Null terminated string
000000af	D1000003		beq		donePrANSIStr		; done if null
000000b0	D4000010		bsr		putChar_ANSI	; write out the character
000000b1	C0FFFFFC		bra		nextCharANSI
donePrANSIStr:
000000b2	A1604000		pull	DAR					; restore DAR
000000b3	A1804000		pull	r8					; restore r8
000000b4	A1704000		pull	PC					; rts
	
;
; clearScreen_ANSI - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
; No passed value
; Uses r8 (saved during function)
; no return value
;

clearScreen_ANSI:
000000b5	A0408000		push	r8				; save r8
000000b6	4280001B		lix		r8,0x1b			; ESC
000000b7	D4000009		bsr		putChar_ANSI
000000b8	4280005B		lix		r8,0x5b			; [
000000b9	D4000007		bsr		putChar_ANSI
000000ba	42800032		lix		r8,0x32			; 2
000000bb	D4000005		bsr		putChar_ANSI
000000bc	4280004A		lix		r8,0x4A			; J
000000bd	D4000003		bsr		putChar_ANSI
000000be	A1804000		pull	r8
000000bf	A1704000		pull	PC				; rts

;
; putChar_ANSI - Put a character to the screen
; r8 - Character to put to screen
; r8 - returns character that was sent to screen
;

putChar_ANSI:
000000c0	A0405000		push	PAR
000000c1	A0408000		push	r8
000000c2	42500000		lix		PAR,0x0		; ANSI Screen (UART-style) Status
waitScreenTxStat:
000000c3	84805000		lpl		r8			; Read Status into r9
000000c4	2B880002		andi 	r8,r8,0x2
000000c5	C3FFFFFE		bez 	waitScreenTxStat
000000c6	42500001		lix 	PAR,0x1		; ANSI Screen (UART-style) Data
000000c7	A1804000		pull	r8
000000c8	81508000		spb		r8			; send character to the screen
000000c9	A1504000		pull	PAR
000000ca	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
000000cb	A0408000		push	r8
000000cc	A0409000		push	r9
000000cd	42503802		lix		PAR,0x3802		; address of the mSec counter
000000ce	84905000		lpl		r9				; read the peripheral counter into r9
000000cf	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000d0	84905000		lpl		r9				; check the elapsed time counter
000000d1	38389000		cmp		r8,r9
000000d2	CCFFFFFE		blt		loop_delay_mS
000000d3	A1904000		pull	r9
000000d4	A1804000		pull	r8
000000d5	A1704000		pull	PC

; convLineBuff2DigASCIIToHex7Seg - Convert a two ASCII digit value into a hex byte
; Passed: r8 points to the start of the hex string
; Returned: r8 contains the hex value of the string
; Put the byte to the Seven Segment Display
;

convLineBuff2DigASCIIToHex7Seg:
000000d6	A0409000		push	r9
000000d7	A0406000		push	DAR
000000d8	A0405000		push	PAR
000000d9	42900000		lix		r9,0
000000da	20680000		add		DAR,r8,ZERO		; Address of lineBuff (passed into this routine)
000000db	68806000		ldbp	r8
000000dc	D400001C		bsr		asciiCharToHexNibble
000000dd	3938DEAD		cmpi	r8,0xDEAD
000000de	D1000011		beq		badHexVal
000000df	2B88000F		andi	r8,r8,0xf
000000e0	28998000		or		r9,r9,r8
000000e1	30909000		sl1		r9,r9
000000e2	30909000		sl1		r9,r9
000000e3	30909000		sl1		r9,r9
000000e4	30909000		sl1		r9,r9
000000e5	60806000		ldb		r8
000000e6	D4000012		bsr		asciiCharToHexNibble
000000e7	3938DEAD		cmpi	r8,0xDEAD
000000e8	D1000007		beq		badHexVal
000000e9	2B88000F		andi	r8,r8,0xf
000000ea	28998000		or		r9,r9,r8
000000eb	42503000		lix		PAR,0x3000		; seven segment display
000000ec	85509000		spl		r9
000000ed	20890000		add		r8,r9,ZERO
000000ee	C0000006		bra		valOKDone
badHexVal:
000000ef	42800068		lix		r8,syntaxError.lower
000000f0	D40000B3		bsr		newLine_ANSI_UART
000000f1	D400009B		bsr		printString_ANSI_UART
000000f2	D40000B1		bsr		newLine_ANSI_UART
000000f3	4280DEAD		lix		r8,0xDEAD
valOKDone:
000000f4	A1504000		pull	PAR
000000f5	A1604000		pull	DAR
000000f6	A1904000		pull	r9
000000f7	A1704000		pull	PC

;
; asciiCharToHexNibble - Convert a single ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
; Result is returned in r8
;	0x0-0xf - Legal Values
;	'DEAD' - Not hex character
;

asciiCharToHexNibble:
000000f8	39380066		cmpi	r8,0x66			; past 'f'
000000f9	CC000011		blt		a2h_Error
000000fa	39380030		cmpi	r8,0x30			; below '0'
000000fb	CF00000F		bgt		a2h_Error
000000fc	3938003A		cmpi	r8,0x3A			; '0' - '9'
000000fd	CF000009		bgt		gotDigit
000000fe	39380041		cmpi	r8,0x41			; ':' - '@'
000000ff	CF00000B		bgt		a2h_Error
00000100	39380047		cmpi	r8,0x47			; 'A' - 'F'
00000101	CC000007		blt		gotUpperLetter
00000102	39380061		cmpi	r8,0x61			; 'G' - 'tick'
00000103	CC000007		blt		a2h_Error
; Lower case letter
00000104	23880057		subi	r8,r8,0x57
00000105	C000000A		bra		doneConvA2H
; number 0-9
gotDigit:
00000106	23880030		subi	r8,r8,0x30
00000107	C0000008		bra		doneConvA2H
; A-F
gotUpperLetter:
00000108	23880037		subi	r8,r8,0x37
00000109	C0000006		bra		doneConvA2H
a2h_Error:
0000010a	42800068		lix		r8,syntaxError.lower
0000010b	D4000098		bsr		newLine_ANSI_UART
0000010c	D4000080		bsr		printString_ANSI_UART
0000010d	D4000096		bsr		newLine_ANSI_UART
0000010e	4280DEAD		lix		r8,0xDEAD
doneConvA2H:
0000010f	A1704000		pull	PC

;
; printLong_ANSI_UART
; r8 contains the long value to print
;

printLong_ANSI_UART:
00000110	A0408000		push	r8
00000111	A0409000		push	r9
00000112	A0408000		push	r8				; temporarily save r8
00000113	42800030		lix		r8,0x30			; print 0x
00000114	D400005F		bsr		putChar_ANSI_UART
00000115	42800078		lix		r8,0x78
00000116	D400005D		bsr		putChar_ANSI_UART
00000117	A1804000		pull	r8				; restore r8
00000118	42900008		lix		r9,8			; loop counter
doNextprintLong_ANSI_UART:
00000119	34808000		rol1	r8,r8
0000011a	34808000		rol1	r8,r8
0000011b	34808000		rol1	r8,r8
0000011c	34808000		rol1	r8,r8
0000011d	D4000059		bsr		printHexVal_ANSI_UART
0000011e	23990001		subi	r9,r9,1
0000011f	C7FFFFFA		bnz		doNextprintLong_ANSI_UART
00000120	A1904000		pull	r9
00000121	A1804000		pull	r8
00000122	A1704000		pull	PC

;
; printLong_ANSI
; r8 contains the long value to print
;

printLong_ANSI:
00000123	A0408000		push	r8
00000124	A0409000		push	r9
00000125	A0408000		push	r8				; temporarily save r8
00000126	42800030		lix		r8,0x30			; print 0x
00000127	D4FFFF99		bsr		putChar_ANSI
00000128	42800078		lix		r8,0x78
00000129	D4FFFF97		bsr		putChar_ANSI
0000012a	A1804000		pull	r8				; restore r8
0000012b	42900008		lix		r9,8			; loop counter
doNextprintLong_ANSI:
0000012c	34808000		rol1	r8,r8
0000012d	34808000		rol1	r8,r8
0000012e	34808000		rol1	r8,r8
0000012f	34808000		rol1	r8,r8
00000130	D4000051		bsr		printHexVal_ANSI
00000131	23990001		subi	r9,r9,1
00000132	C7FFFFFA		bnz		doNextprintLong_ANSI
00000133	A1904000		pull	r9
00000134	A1804000		pull	r8
00000135	A1704000		pull	PC

;
; printShort_ANSI_UART
; r8 contains the short value to print
;

printShort_ANSI_UART:
00000136	A0408000		push	r8
00000137	A0409000		push	r9
00000138	A0408000		push	r8				; temporarily save r8
00000139	42800030		lix		r8,0x30			; print 0x
0000013a	D4000039		bsr		putChar_ANSI_UART
0000013b	42800078		lix		r8,0x78
0000013c	D4000037		bsr		putChar_ANSI_UART
0000013d	A1804000		pull	r8				; restore r8
0000013e	42900004		lix		r9,4			; loop counter
0000013f	31808000		sl8		r8,r8
00000140	31808000		sl8		r8,r8
doNextprintShort_ANSI_UART:
00000141	34808000		rol1	r8,r8
00000142	34808000		rol1	r8,r8
00000143	34808000		rol1	r8,r8
00000144	34808000		rol1	r8,r8
00000145	D4000031		bsr		printHexVal_ANSI_UART
00000146	23990001		subi	r9,r9,1
00000147	C7FFFFFA		bnz		doNextprintShort_ANSI_UART
00000148	A1904000		pull	r9
00000149	A1804000		pull	r8
0000014a	A1704000		pull	PC

;
; printByte_ANSI_UART
; r8 contains the char value to print
;

printByte_ANSI_UART:
0000014b	A0408000		push	r8
0000014c	A0409000		push	r9
0000014d	A0408000		push	r8				; temporarily save r8
0000014e	42800030		lix		r8,0x30			; print 0x
0000014f	D4000024		bsr		putChar_ANSI_UART
00000150	42800078		lix		r8,0x78
00000151	D4000022		bsr		putChar_ANSI_UART
00000152	A1804000		pull	r8				; restore r8
00000153	42900002		lix		r9,2			; loop counter
00000154	31808000		sl8		r8,r8
00000155	31808000		sl8		r8,r8
00000156	31808000		sl8		r8,r8
doNextprintByte_ANSI_UART:
00000157	34808000		rol1	r8,r8
00000158	34808000		rol1	r8,r8
00000159	34808000		rol1	r8,r8
0000015a	34808000		rol1	r8,r8
0000015b	D400001B		bsr		printHexVal_ANSI_UART
0000015c	23990001		subi	r9,r9,1
0000015d	C7FFFFFA		bnz		doNextprintByte_ANSI_UART
0000015e	A1904000		pull	r9
0000015f	A1804000		pull	r8
00000160	A1704000		pull	PC
	
;
; printByte_ANSI
; r8 contains the char value to print
;

printByte_ANSI:
00000161	A0408000		push	r8
00000162	A0409000		push	r9
00000163	A0408000		push	r8				; temporarily save r8
00000164	A1804000		pull	r8				; restore r8
00000165	42900002		lix		r9,2			; loop counter
00000166	31808000		sl8		r8,r8
00000167	31808000		sl8		r8,r8
00000168	31808000		sl8		r8,r8
doNextprintByte_ANSI:
00000169	34808000		rol1	r8,r8
0000016a	34808000		rol1	r8,r8
0000016b	34808000		rol1	r8,r8
0000016c	34808000		rol1	r8,r8
0000016d	D4000014		bsr		printHexVal_ANSI
0000016e	23990001		subi	r9,r9,1
0000016f	C7FFFFFA		bnz		doNextprintByte_ANSI
00000170	A1904000		pull	r9
00000171	A1804000		pull	r8
00000172	A1704000		pull	PC
	
; putChar_ANSI_UART
; write out a character to both 
;	the ANSI screen and the UART

putChar_ANSI_UART:
00000173	D4FFFF4D		bsr		putChar_ANSI
00000174	D4FFFF27		bsr		putChar_UART
00000175	A1704000		pull	PC

;
; printHexVal_ANSI_UART
;

printHexVal_ANSI_UART:
00000176	A0408000		push	r8
00000177	2B88000F		andi	r8,r8,0xf
00000178	39380009		cmpi	r8,9
00000179	CC000004		blt		printHexLetter
0000017a	21880030		addi	r8,r8,0x30
0000017b	D4FFFFF8		bsr		putChar_ANSI_UART
0000017c	C0000003		bra		donePrintHexVal
printHexLetter:
0000017d	21880037		addi	r8,r8,0x37		; 'A' - 10
0000017e	D4FFFFF5		bsr		putChar_ANSI_UART
donePrintHexVal:
0000017f	A1804000		pull	r8
00000180	A1704000		pull	PC

;
; printHexVal_ANSI_UART
;

printHexVal_ANSI:
00000181	A0408000		push	r8
00000182	2B88000F		andi	r8,r8,0xf
00000183	39380009		cmpi	r8,9
00000184	CC000004		blt		printHexLetterANSI
00000185	21880030		addi	r8,r8,0x30
00000186	D4FFFF3A		bsr		putChar_ANSI
00000187	C0000003		bra		donePrintHexValANSI
printHexLetterANSI:
00000188	21880037		addi	r8,r8,0x37		; 'A' - 10
00000189	D4FFFF37		bsr		putChar_ANSI
donePrintHexValANSI:
0000018a	A1804000		pull	r8
0000018b	A1704000		pull	PC

;
; printString_ANSI_UART - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI_UART:
0000018c	A0408000		push	r8					; save r8
0000018d	A0406000		push	DAR
0000018e	21680000		addi	DAR,r8,0			; set the start of the string
nextChar:
0000018f	68806000		ldbp	r8					; get the character01
00000190	39380000		cmpi	r8,0x0				; Null terminated string
00000191	D1000003		beq		donePrStr			; done if null
00000192	D4FFFFE1		bsr		putChar_ANSI_UART	; write out the character
00000193	C0FFFFFC		bra		nextChar
donePrStr:
00000194	A1604000		pull	DAR					; restore DAR
00000195	A1804000		pull	r8					; restore r8
00000196	A1704000		pull	PC					; rts
	
;
; printLinebuffer_ANSI_UART - Print a screen to the current screen position with CRLF at the end
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printLinebuffer_ANSI_UART:
00000197	A0408000		push	r8					; save r8
00000198	A0406000		push	DAR
00000199	21680000		addi	DAR,r8,0x0			; set the start of the string
nextChar2:
0000019a	68806000		ldbp	r8					; get the character
0000019b	39380000		cmpi	r8,0x0				; Null terminated string
0000019c	D1000003		beq		donePrStr2			; done if null
0000019d	D4FFFF0D		bsr		printString_ANSI	; write out the character
0000019e	C0FFFFFC		bra		nextChar2
donePrStr2:
0000019f	D4000004		bsr		newLine_ANSI_UART
000001a0	A1604000		pull	DAR					; restore DAR
000001a1	A1804000		pull	r8					; restore r8
000001a2	A1704000		pull	PC					; rts
	
;
; newLine_ANSI_UART - Print out a newLine_ANSI_UART (CR-LF)
;

newLine_ANSI_UART:
000001a3	A0408000		push	r8
000001a4	4280000A		lix		r8,0x0A				; Line Feed
000001a5	D4FFFFCE		bsr		putChar_ANSI_UART	; Put the character to the screen
000001a6	4280000D		lix		r8,0x0D				; Carriage Return
000001a7	D4FFFFCC		bsr		putChar_ANSI_UART		; Echo character back to the UART
000001a8	A1804000		pull	r8
000001a9	A1704000		pull	PC

;
; newLine_ANSI - Print out a newLine_ANSI (CR-LF)
;

newLine_ANSI:
000001aa	A0408000		push	r8
000001ab	4280000A		lix		r8,0x0A				; Line Feed
000001ac	D4FFFF14		bsr		putChar_ANSI	; Put the character to the screen
000001ad	4280000D		lix		r8,0x0D				; Carriage Return
000001ae	D4FFFF12		bsr		putChar_ANSI	; Echo character back to the UART
000001af	A1804000		pull	r8
000001b0	A1704000		pull	PC

;
; clearScreen_ANSI_UART - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen_ANSI_UART:
000001b1	A0408000		push	r8				; save r8
000001b2	4280001B		lix		r8,0x1b			; ESC
000001b3	D4FFFFC0		bsr		putChar_ANSI_UART
000001b4	4280005B		lix		r8,0x5b			; [
000001b5	D4FFFFBE		bsr		putChar_ANSI_UART
000001b6	42800032		lix		r8,0x32			; 2
000001b7	D4FFFFBC		bsr		putChar_ANSI_UART
000001b8	4280004A		lix		r8,0x4A			; J
000001b9	D4FFFFBA		bsr		putChar_ANSI_UART
000001ba	A1804000		pull	r8
000001bb	A1704000		pull	PC				; rts

	