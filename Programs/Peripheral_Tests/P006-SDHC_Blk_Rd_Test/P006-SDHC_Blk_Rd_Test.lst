; P006-SDHC_Blk_Rd_Test - Read a block from the SDHC Card into Data RAM
;
; Testing on A-ESTF FPGA development card
;	http://land-boards.com/blwiki/index.php?title=A-ESTF_V2_EP4CE22_Board
; Not all FPGA cards have built-in SD Card sockets
; On other cards, should be able to wire up to IO pins (if there are any)
; Dumps SDHC Card to the ANSI VGA screen
;
; There are three types of SD cards
; SDSC - Standard Capacity SD cards (up to 2 GB)
; SDHC - High Capacity SD cards (>2GB up to 32 GB)
; SDXC - Extra Capacity SD cards (>32 GB) - not currently supported
;
; For SDHC, the read/write address parameter is the ordinal number of 512-byte block 
; the 9 low address bits are implicitly 0. 
; The 24 programmable address bits select the 512-byte block.
; This gives an address capacity of 2^24 * 512 = 8GByte.
; SDHC can be upto 32GByte but this design can only access the low 8GByte. 
; The SDLBA registers are used like this:
;  31 30 29 28.27 26 25 24.23 22 21 20.19 18 17 16.15 14 13 12.11 10 09 08.07 06 05 04.03 02 01 00
;   0  0  0  0  0  0  0  0+---------- SDLBA2 -----+------- SDLBA1 --------+------- SDLBA0 --------+
;
; There is a constant in the VHDL code which is automatically set when the card is initialized.
;	signal sdhc : std_logic := '0';
;	-- set to 0 for SDSC cards
;	-- set to non-0 for SDHC cards
;
; Original VHDL code was based on the Multicomp design by Grant Searle
; Adapted from design by Steven J. Merrifield, June 2008
;	https://pastebin.com/HW3ru1cC
; Read states are derived from the Apple II emulator by Stephen Edwards
;	https://github.com/MiSTer-devel/Apple-II_MiSTer
; Enhanced by Neal Crook to support SDHC cards
;	https://github.com/nealcrook/multicomp6809/tree/master/multicomp/Components/SDCARD
; SDHC can be upto 32GByte but this design can only access the low 8GByte
; Code for R32V2020 RISC CPU
;
; SD Card base address is x1000
; Register Addresses
;    0x1000    SDDATA        read/write data
;    0x1001    SDSTATUS      read
;    0x1001    SDCONTROL     write
;    0x1002    SDLBA0        write-only
;    0x1003    SDLBA1        write-only
;    0x1004    SDLBA2        write-only (only bits 6:0 are valid)
;
; To read a 512-byte block from the SDHC card:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to read from
; Write 0 to SDCONTROL to issue read command
; Loop 512 times:
;     Wait until SDSTATUS=0xE0 (read byte ready, block busy)
;     Read byte from SDDATA
;
; To write a 512-byte block to the SDHC card:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to write to
; Write 1 to SDCONTROL to issue write command
; Loop 512 times:
;     Wait until SDSTATUS=0xA0 (block busy)
;     Write byte to SDDATA
;
; Using additional DataRAM block for I/O buffer storage
; 	Block is 1KB - 256x32-bits
;	Allows for write buffer and 1 read buffer of 512bytes length
;	RAM starts at A12=1 (4KB and up) = 0x1000
;	Write buffer @ 0x1000-0x11ff
;	Read buffer @ 0x1200-0x13ff
;

prompt:	.string "(R32V2020) SDHC Data RAM Test Utility v0.0.1"
missingHandshake: .string "*** Run PuTTY and enable hardware handshake ***"
screenPtr:	.long 0x0000
screenBase:	.long 0x0
syntaxError:	.string "*** Bad number error (at a2h_Error) ***"
anyKeyToContinue:	.string "Hit any key to continue"
blockNumber:	.string "Block Address : 0x"

;
; Write the second block of the SD card with a fixed pattern of data
; Read an SD card block - one block at a time
; Prints the contents of the block to the ANSI screen
; Hit a key on the PS/2 keyboard to advance to the next block
; r9 = block number
;

main:
00000000	D4000093		bsr		clearScreen_ANSI
00000001	42800000		lix		r8,prompt.lower
00000002	D4000086		bsr		printString_ANSI
00000003	D4000185		bsr		newLine_ANSI
00000004	4280000A		lix		r8,10					; give the SD card 10 mS
00000005	D40000A4		bsr		delay_mS
;	lix		r8,512					; write to the second block
;	bsr		writeBufferRAMToSDHCCard
00000006	42900000		lix		r9,0					; start with block 0
readNextBlock:
00000007	428000A8		lix		r8,blockNumber.lower	; Block Number message
00000008	D4000080		bsr		printString_ANSI
00000009	21890000		addi	r8,r9,0					; print the current block number
0000000a	D40000F7		bsr		printLong_ANSI
0000000b	D400017D		bsr		newLine_ANSI
0000000c	21890000		addi	r8,r9,0					; r9 holds block number, pass in r8
0000000d	D4000009		bsr		readSDHCCardIntoRdBufferRAM
0000000e	D400017A		bsr		newLine_ANSI
0000000f	42800090		lix		r8,anyKeyToContinue.lower
00000010	D4000078		bsr		printString_ANSI
00000011	D400004B		bsr		getChar_PS2
00000012	D4000176		bsr		newLine_ANSI
00000013	21990001		addi	r9,r9,1					; Go to next block address
00000014	C0FFFFF3		bra		readNextBlock
loopForever:
00000015	C0000000		bra		loopForever
	

;
; readSDHCCardIntoRdBufferRAM
;
; To read a 512-byte block from the SDHC card:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to read from
; Write 0 to SDCONTROL to issue read command
; Loop 512 times:
;     Wait until SDSTATUS=0xE0 (read byte ready, block busy)
;     Read byte from SDDATA
; r8 = passes the block number
; The SDLBA registers for SDHC are used like this:
;  31 30 29 28.27 26 25 24.23 22 21 20.19 18 17 16.15 14 13 12.11 10 09 08.07 06 05 04.03 02 01 00
;   0  0  0  0  0  0  0  0+---------- SDLBA2 -----+------- SDLBA1 --------+------- SDLBA0 --------+
; r8 = passes the block number
;
;	Read buffer @ 0x1200-0x13ff
;

readSDHCCardIntoRdBufferRAM:
00000016	A0408000		push	r8
00000017	A0409000		push	r9
00000018	A040A000		push	r10
00000019	A040B000		push	r11
0000001a	A0405000		push	PAR
0000001b	42501001		lix		PAR,0x1001			; SDSTATUS
0000001c	42601200		lix		DAR,0x1200			; Start of the Read buffer in Data Memory
waitForSDStatusRdRdy:
0000001d	84905000		lpl		r9
0000001e	39390080		cmpi	r9,0x80
0000001f	D2FFFFFE		bne		waitForSDStatusRdRdy
00000020	42501002		lix		PAR,0x1002
00000021	89508000		spbp	r8					; SDLBA0
00000022	33808000		sr8		r8,r8
00000023	89508000		spbp	r8					; SDLBA1
00000024	33808000		sr8		r8,r8
00000025	81508000		spb		r8					; SDLBA2
00000026	42900000		lix		r9,0				; Write 0 to SDCONTROL to issue read command
00000027	42501001		lix		PAR,0x1001			; SDCONTROL
00000028	81509000		spb		r9
00000029	42900200		lix		r9,512				; 512 characters to read
0000002a	42B00018		lix		r11,24				; print newLine_ANSI every 24 values
nextSDReadChar:
0000002b	42501001		lix		PAR,0x1001			; SDSTATUS
waitSDCharPresent:
0000002c	80A05000		lpb		r10
0000002d	393A00E0		cmpi	r10,0xE0
0000002e	D2FFFFFE		bne		waitSDCharPresent
0000002f	42501000		lix		PAR,0x1000			; SDDATA - read data from SPI data buffer
00000030	80805000		lpb		r8
00000031	69608000		sdbp	r8					; Store data into Data Memory
00000032	23990001		subi	r9,r9,1
00000033	C7FFFFF8		bnz		nextSDReadChar
00000034	A1504000		pull	PAR
00000035	A1B04000		pull	r11
00000036	A1A04000		pull	r10
00000037	A1904000		pull	r9
00000038	A1804000		pull	r8
00000039	A1704000		pull	PC
	
;
; writeBufferRAMToSDHCCard
;
; To write a 512-byte block to the SDHC card:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to write to
; Write 1 to SDCONTROL to issue write command
; Loop 512 times:
;     Wait until SDSTATUS=0xA0 (block busy)
;     Write byte to SDDATA
; r8 = passes the block number
;
;	Write buffer @ 0x1000-0x11ff
;

writeBufferRAMToSDHCCard:
0000003a	A0408000		push	r8
0000003b	A0409000		push	r9
0000003c	A040A000		push	r10
0000003d	A0405000		push	PAR
0000003e	42501001		lix		PAR,0x1001			; SDSTATUS
0000003f	42601000		lix		DAR,0x1000			; Start of the Write buffer in Data Memory
waitForSDStatusWrRdy:
00000040	84905000		lpl		r9
00000041	39390080		cmpi	r9,0x80
00000042	D2FFFFFE		bne		waitForSDStatusWrRdy
00000043	42501002		lix		PAR,0x1002
00000044	89508000		spbp	r8					; SDLBA0
00000045	33808000		sr8		r8,r8
00000046	89508000		spbp	r8					; SDLBA1
00000047	33808000		sr8		r8,r8
00000048	81508000		spb		r8					; SDLBA2
00000049	42900001		lix		r9,1				; Write 0 to SDCONTROL to issue write command
0000004a	42501001		lix		PAR,0x1001			; SDCONTROL
0000004b	81509000		spb		r9
0000004c	42900200		lix		r9,512				; 512 characters to read
0000004d	42B00018		lix		r11,24				; print newLine_ANSI every 24 values
nextSDWriteChar:
0000004e	42501001		lix		PAR,0x1001			; SDSTATUS address
waitSDCharPresentWr:
0000004f	80A05000		lpb		r10
00000050	393A00A0		cmpi	r10,0xA0			; 0xA0 flags that the last transfer is complete
00000051	D2FFFFFE		bne		waitSDCharPresentWr
00000052	42501000		lix		PAR,0x1000			; SDDATA address
00000053	68806000		ldbp	r8					; Get data from the data buffer memory
00000054	81508000		spb		r8					; Write out to SPI bus
00000055	23990001		subi	r9,r9,1
00000056	C7FFFFF8		bnz		nextSDWriteChar
00000057	A1504000		pull	PAR
00000058	A1A04000		pull	r10
00000059	A1904000		pull	r9
0000005a	A1804000		pull	r8
0000005b	A1704000		pull	PC
	
;
; getChar_PS2
; returns character received in r8
;

getChar_PS2:
0000005c	A0405000		push	PAR
0000005d	42500801		lix		PAR,0x0801	; PS/2 Status
waitPS2RxStat:
0000005e	84805000		lpl		r8			; Read Status into r9
0000005f	2B880001		andi 	r8,r8,1
00000060	C3FFFFFE		bez 	waitPS2RxStat
getCharFromPS2:
00000061	42500800		lix 	PAR,0x0800
00000062	84805000		lpl		r8
whilePS2RxStat:
00000063	A1504000		pull	PAR
00000064	A1704000		pull	PC

;
; waitCharPolled_PS2 - Check the polled character interface
; wait for a character
; return when a character is present
; returns character received in r8
;

waitCharPolled_PS2:
00000065	A0405000		push	PAR
00000066	42500803		lix		PAR,0x0803	; PS/2 Status
waitPS2RxStatPolled:
00000067	84805000		lpl		r8			; Read Status into r8
00000068	2B880001		andi 	r8,r8,0x1
00000069	C3FFFFFE		bez 	waitPS2RxStatPolled
getCharFromPS2Polled:
0000006a	42500802		lix 	PAR,0x0802
0000006b	84805000		lpl		r8
whilePS2RxStatPolled:
0000006c	A1504000		pull	PAR
0000006d	A1704000		pull	PC

;
; checkGetStat_PS2 - Checks the polling status
; Polled interface is active while the keyboard key is pressed
; returns 
;	-1 if there is no character, 
;	character if there is a character
;

checkGetStat_PS2:
0000006e	A0405000		push	PAR
0000006f	42500803		lix		PAR,0x0803	; PS/2 Status
00000070	84805000		lpl		r8			; Read Status into r8
00000071	2B880001		andi	r8,r8,0x1
00000072	C3000004		bez		charNotPresent
00000073	42500802		lix		PAR,0x0802
00000074	84805000		lpl		r8
00000075	C0000002		bra		gotCharIn
charNotPresent:
00000076	20802000		add		r8,ZERO,MINUS1
gotCharIn:
00000077	A1504000		pull	PAR
00000078	A1704000		pull	PC

;
; putChar_UART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putChar_UART:
00000079	A0405000		push	PAR
0000007a	A0408000		push	r8
0000007b	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
0000007c	84805000		lpl		r8			; Read Status into r8
0000007d	2B880002		andi 	r8,r8,0x2
0000007e	C7000005		bnz 	uartRdy
; Remind user to enable HW handshake
; would be better to add a HW handshake timeout
; Since the USB is so much faster it is unlikely this path 
;	will be exercised. 
; For cards with RS-232 serial this would be a serious concern
; It's more likely that PuTTY needed to be run in HW handshake mode.
handshakeStuck:
0000007f	42800030		lix		r8,missingHandshake.lower
00000080	D4000008		bsr		printString_ANSI
00000081	A1804000		pull	r8
00000082	C0000004		bra		getOut
uartRdy:
00000083	42501801		lix 	PAR,0x1801
00000084	A1804000		pull	r8
00000085	85508000		spl		r8			; echo the character
getOut:
00000086	A1504000		pull	PAR
00000087	A1704000		pull	PC
	
;
; printString_ANSI - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI:
00000088	A0408000		push	r8					; save r8
00000089	A0406000		push	DAR
0000008a	21680000		addi	DAR,r8,0x0		; set the start of the string
nextCharANSI:
0000008b	68806000		ldbp	r8					; get the character01
0000008c	39380000		cmpi	r8,0x0				; Null terminated string
0000008d	D1000003		beq		donePrANSIStr		; done if null
0000008e	D4000010		bsr		putChar_ANSI	; write out the character
0000008f	C0FFFFFC		bra		nextCharANSI
donePrANSIStr:
00000090	A1604000		pull	DAR					; restore DAR
00000091	A1804000		pull	r8					; restore r8
00000092	A1704000		pull	PC					; rts
	
;
; clearScreen_ANSI - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
; No passed value
; Uses r8 (saved during function)
; no return value
;

clearScreen_ANSI:
00000093	A0408000		push	r8				; save r8
00000094	4280001B		lix		r8,0x1b			; ESC
00000095	D4000009		bsr		putChar_ANSI
00000096	4280005B		lix		r8,0x5b			; [
00000097	D4000007		bsr		putChar_ANSI
00000098	42800032		lix		r8,0x32			; 2
00000099	D4000005		bsr		putChar_ANSI
0000009a	4280004A		lix		r8,0x4A			; J
0000009b	D4000003		bsr		putChar_ANSI
0000009c	A1804000		pull	r8
0000009d	A1704000		pull	PC				; rts

;
; putChar_ANSI - Put a character to the screen
; r8 - Character to put to screen
; r8 - returns character that was sent to screen
;

putChar_ANSI:
0000009e	A0405000		push	PAR
0000009f	A0408000		push	r8
000000a0	42500000		lix		PAR,0x0		; ANSI Screen (UART-style) Status
waitScreenTxStat:
000000a1	84805000		lpl		r8			; Read Status into r9
000000a2	2B880002		andi 	r8,r8,0x2
000000a3	C3FFFFFE		bez 	waitScreenTxStat
000000a4	42500001		lix 	PAR,0x1		; ANSI Screen (UART-style) Data
000000a5	A1804000		pull	r8
000000a6	81508000		spb		r8			; send character to the screen
000000a7	A1504000		pull	PAR
000000a8	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
000000a9	A0408000		push	r8
000000aa	A0409000		push	r9
000000ab	42503802		lix		PAR,0x3802		; address of the mSec counter
000000ac	84905000		lpl		r9				; read the peripheral counter into r9
000000ad	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000ae	84905000		lpl		r9				; check the elapsed time counter
000000af	38389000		cmp		r8,r9
000000b0	CCFFFFFE		blt		loop_delay_mS
000000b1	A1904000		pull	r9
000000b2	A1804000		pull	r8
000000b3	A1704000		pull	PC

; convLineBuff2DigASCIIToHex7Seg - Convert a two ASCII digit value into a hex byte
; Passed: r8 points to the start of the hex string
; Returned: r8 contains the hex value of the string
; Put the byte to the Seven Segment Display
;

convLineBuff2DigASCIIToHex7Seg:
000000b4	A0409000		push	r9
000000b5	A0406000		push	DAR
000000b6	A0405000		push	PAR
000000b7	42900000		lix		r9,0
000000b8	20680000		add		DAR,r8,ZERO		; Address of lineBuff (passed into this routine)
000000b9	68806000		ldbp	r8
000000ba	D400001C		bsr		asciiCharToHexNibble
000000bb	3938DEAD		cmpi	r8,0xDEAD
000000bc	D1000011		beq		badHexVal
000000bd	2B88000F		andi	r8,r8,0xf
000000be	28998000		or		r9,r9,r8
000000bf	30909000		sl1		r9,r9
000000c0	30909000		sl1		r9,r9
000000c1	30909000		sl1		r9,r9
000000c2	30909000		sl1		r9,r9
000000c3	60806000		ldb		r8
000000c4	D4000012		bsr		asciiCharToHexNibble
000000c5	3938DEAD		cmpi	r8,0xDEAD
000000c6	D1000007		beq		badHexVal
000000c7	2B88000F		andi	r8,r8,0xf
000000c8	28998000		or		r9,r9,r8
000000c9	42503000		lix		PAR,0x3000		; seven segment display
000000ca	85509000		spl		r9
000000cb	20890000		add		r8,r9,ZERO
000000cc	C0000006		bra		valOKDone
badHexVal:
000000cd	42800068		lix		r8,syntaxError.lower
000000ce	D40000B3		bsr		newLine_ANSI_UART
000000cf	D400009B		bsr		printString_ANSI_UART
000000d0	D40000B1		bsr		newLine_ANSI_UART
000000d1	4280DEAD		lix		r8,0xDEAD
valOKDone:
000000d2	A1504000		pull	PAR
000000d3	A1604000		pull	DAR
000000d4	A1904000		pull	r9
000000d5	A1704000		pull	PC

;
; asciiCharToHexNibble - Convert a single ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
; Result is returned in r8
;	0x0-0xf - Legal Values
;	'DEAD' - Not hex character
;

asciiCharToHexNibble:
000000d6	39380066		cmpi	r8,0x66			; past 'f'
000000d7	CC000011		blt		a2h_Error
000000d8	39380030		cmpi	r8,0x30			; below '0'
000000d9	CF00000F		bgt		a2h_Error
000000da	3938003A		cmpi	r8,0x3A			; '0' - '9'
000000db	CF000009		bgt		gotDigit
000000dc	39380041		cmpi	r8,0x41			; ':' - '@'
000000dd	CF00000B		bgt		a2h_Error
000000de	39380047		cmpi	r8,0x47			; 'A' - 'F'
000000df	CC000007		blt		gotUpperLetter
000000e0	39380061		cmpi	r8,0x61			; 'G' - 'tick'
000000e1	CC000007		blt		a2h_Error
; Lower case letter
000000e2	23880057		subi	r8,r8,0x57
000000e3	C000000A		bra		doneConvA2H
; number 0-9
gotDigit:
000000e4	23880030		subi	r8,r8,0x30
000000e5	C0000008		bra		doneConvA2H
; A-F
gotUpperLetter:
000000e6	23880037		subi	r8,r8,0x37
000000e7	C0000006		bra		doneConvA2H
a2h_Error:
000000e8	42800068		lix		r8,syntaxError.lower
000000e9	D4000098		bsr		newLine_ANSI_UART
000000ea	D4000080		bsr		printString_ANSI_UART
000000eb	D4000096		bsr		newLine_ANSI_UART
000000ec	4280DEAD		lix		r8,0xDEAD
doneConvA2H:
000000ed	A1704000		pull	PC

;
; printLong_ANSI_UART
; r8 contains the long value to print
;

printLong_ANSI_UART:
000000ee	A0408000		push	r8
000000ef	A0409000		push	r9
000000f0	A0408000		push	r8				; temporarily save r8
000000f1	42800030		lix		r8,0x30			; print 0x
000000f2	D400005F		bsr		putChar_ANSI_UART
000000f3	42800078		lix		r8,0x78
000000f4	D400005D		bsr		putChar_ANSI_UART
000000f5	A1804000		pull	r8				; restore r8
000000f6	42900008		lix		r9,8			; loop counter
doNextprintLong_ANSI_UART:
000000f7	34808000		rol1	r8,r8
000000f8	34808000		rol1	r8,r8
000000f9	34808000		rol1	r8,r8
000000fa	34808000		rol1	r8,r8
000000fb	D4000059		bsr		printHexVal_ANSI_UART
000000fc	23990001		subi	r9,r9,1
000000fd	C7FFFFFA		bnz		doNextprintLong_ANSI_UART
000000fe	A1904000		pull	r9
000000ff	A1804000		pull	r8
00000100	A1704000		pull	PC

;
; printLong_ANSI
; r8 contains the long value to print
;

printLong_ANSI:
00000101	A0408000		push	r8
00000102	A0409000		push	r9
00000103	A0408000		push	r8				; temporarily save r8
00000104	42800030		lix		r8,0x30			; print 0x
00000105	D4FFFF99		bsr		putChar_ANSI
00000106	42800078		lix		r8,0x78
00000107	D4FFFF97		bsr		putChar_ANSI
00000108	A1804000		pull	r8				; restore r8
00000109	42900008		lix		r9,8			; loop counter
doNextprintLong_ANSI:
0000010a	34808000		rol1	r8,r8
0000010b	34808000		rol1	r8,r8
0000010c	34808000		rol1	r8,r8
0000010d	34808000		rol1	r8,r8
0000010e	D4000051		bsr		printHexVal_ANSI
0000010f	23990001		subi	r9,r9,1
00000110	C7FFFFFA		bnz		doNextprintLong_ANSI
00000111	A1904000		pull	r9
00000112	A1804000		pull	r8
00000113	A1704000		pull	PC

;
; printShort_ANSI_UART
; r8 contains the short value to print
;

printShort_ANSI_UART:
00000114	A0408000		push	r8
00000115	A0409000		push	r9
00000116	A0408000		push	r8				; temporarily save r8
00000117	42800030		lix		r8,0x30			; print 0x
00000118	D4000039		bsr		putChar_ANSI_UART
00000119	42800078		lix		r8,0x78
0000011a	D4000037		bsr		putChar_ANSI_UART
0000011b	A1804000		pull	r8				; restore r8
0000011c	42900004		lix		r9,4			; loop counter
0000011d	31808000		sl8		r8,r8
0000011e	31808000		sl8		r8,r8
doNextprintShort_ANSI_UART:
0000011f	34808000		rol1	r8,r8
00000120	34808000		rol1	r8,r8
00000121	34808000		rol1	r8,r8
00000122	34808000		rol1	r8,r8
00000123	D4000031		bsr		printHexVal_ANSI_UART
00000124	23990001		subi	r9,r9,1
00000125	C7FFFFFA		bnz		doNextprintShort_ANSI_UART
00000126	A1904000		pull	r9
00000127	A1804000		pull	r8
00000128	A1704000		pull	PC

;
; printByte_ANSI_UART
; r8 contains the char value to print
;

printByte_ANSI_UART:
00000129	A0408000		push	r8
0000012a	A0409000		push	r9
0000012b	A0408000		push	r8				; temporarily save r8
0000012c	42800030		lix		r8,0x30			; print 0x
0000012d	D4000024		bsr		putChar_ANSI_UART
0000012e	42800078		lix		r8,0x78
0000012f	D4000022		bsr		putChar_ANSI_UART
00000130	A1804000		pull	r8				; restore r8
00000131	42900002		lix		r9,2			; loop counter
00000132	31808000		sl8		r8,r8
00000133	31808000		sl8		r8,r8
00000134	31808000		sl8		r8,r8
doNextprintByte_ANSI_UART:
00000135	34808000		rol1	r8,r8
00000136	34808000		rol1	r8,r8
00000137	34808000		rol1	r8,r8
00000138	34808000		rol1	r8,r8
00000139	D400001B		bsr		printHexVal_ANSI_UART
0000013a	23990001		subi	r9,r9,1
0000013b	C7FFFFFA		bnz		doNextprintByte_ANSI_UART
0000013c	A1904000		pull	r9
0000013d	A1804000		pull	r8
0000013e	A1704000		pull	PC
	
;
; printByte_ANSI
; r8 contains the char value to print
;

printByte_ANSI:
0000013f	A0408000		push	r8
00000140	A0409000		push	r9
00000141	A0408000		push	r8				; temporarily save r8
00000142	A1804000		pull	r8				; restore r8
00000143	42900002		lix		r9,2			; loop counter
00000144	31808000		sl8		r8,r8
00000145	31808000		sl8		r8,r8
00000146	31808000		sl8		r8,r8
doNextprintByte_ANSI:
00000147	34808000		rol1	r8,r8
00000148	34808000		rol1	r8,r8
00000149	34808000		rol1	r8,r8
0000014a	34808000		rol1	r8,r8
0000014b	D4000014		bsr		printHexVal_ANSI
0000014c	23990001		subi	r9,r9,1
0000014d	C7FFFFFA		bnz		doNextprintByte_ANSI
0000014e	A1904000		pull	r9
0000014f	A1804000		pull	r8
00000150	A1704000		pull	PC
	
; putChar_ANSI_UART
; write out a character to both 
;	the ANSI screen and the UART

putChar_ANSI_UART:
00000151	D4FFFF4D		bsr		putChar_ANSI
00000152	D4FFFF27		bsr		putChar_UART
00000153	A1704000		pull	PC

;
; printHexVal_ANSI_UART
;

printHexVal_ANSI_UART:
00000154	A0408000		push	r8
00000155	2B88000F		andi	r8,r8,0xf
00000156	39380009		cmpi	r8,9
00000157	CC000004		blt		printHexLetter
00000158	21880030		addi	r8,r8,0x30
00000159	D4FFFFF8		bsr		putChar_ANSI_UART
0000015a	C0000003		bra		donePrintHexVal
printHexLetter:
0000015b	21880037		addi	r8,r8,0x37		; 'A' - 10
0000015c	D4FFFFF5		bsr		putChar_ANSI_UART
donePrintHexVal:
0000015d	A1804000		pull	r8
0000015e	A1704000		pull	PC

;
; printHexVal_ANSI_UART
;

printHexVal_ANSI:
0000015f	A0408000		push	r8
00000160	2B88000F		andi	r8,r8,0xf
00000161	39380009		cmpi	r8,9
00000162	CC000004		blt		printHexLetterANSI
00000163	21880030		addi	r8,r8,0x30
00000164	D4FFFF3A		bsr		putChar_ANSI
00000165	C0000003		bra		donePrintHexValANSI
printHexLetterANSI:
00000166	21880037		addi	r8,r8,0x37		; 'A' - 10
00000167	D4FFFF37		bsr		putChar_ANSI
donePrintHexValANSI:
00000168	A1804000		pull	r8
00000169	A1704000		pull	PC

;
; printString_ANSI_UART - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI_UART:
0000016a	A0408000		push	r8					; save r8
0000016b	A0406000		push	DAR
0000016c	21680000		addi	DAR,r8,0			; set the start of the string
nextChar:
0000016d	68806000		ldbp	r8					; get the character01
0000016e	39380000		cmpi	r8,0x0				; Null terminated string
0000016f	D1000003		beq		donePrStr			; done if null
00000170	D4FFFFE1		bsr		putChar_ANSI_UART	; write out the character
00000171	C0FFFFFC		bra		nextChar
donePrStr:
00000172	A1604000		pull	DAR					; restore DAR
00000173	A1804000		pull	r8					; restore r8
00000174	A1704000		pull	PC					; rts
	
;
; printLinebuffer_ANSI_UART - Print a screen to the current screen position with CRLF at the end
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printLinebuffer_ANSI_UART:
00000175	A0408000		push	r8					; save r8
00000176	A0406000		push	DAR
00000177	21680000		addi	DAR,r8,0x0			; set the start of the string
nextChar2:
00000178	68806000		ldbp	r8					; get the character
00000179	39380000		cmpi	r8,0x0				; Null terminated string
0000017a	D1000003		beq		donePrStr2			; done if null
0000017b	D4FFFF0D		bsr		printString_ANSI	; write out the character
0000017c	C0FFFFFC		bra		nextChar2
donePrStr2:
0000017d	D4000004		bsr		newLine_ANSI_UART
0000017e	A1604000		pull	DAR					; restore DAR
0000017f	A1804000		pull	r8					; restore r8
00000180	A1704000		pull	PC					; rts
	
;
; newLine_ANSI_UART - Print out a newLine_ANSI_UART (CR-LF)
;

newLine_ANSI_UART:
00000181	A0408000		push	r8
00000182	4280000A		lix		r8,0x0A				; Line Feed
00000183	D4FFFFCE		bsr		putChar_ANSI_UART	; Put the character to the screen
00000184	4280000D		lix		r8,0x0D				; Carriage Return
00000185	D4FFFFCC		bsr		putChar_ANSI_UART		; Echo character back to the UART
00000186	A1804000		pull	r8
00000187	A1704000		pull	PC

;
; newLine_ANSI - Print out a newLine_ANSI (CR-LF)
;

newLine_ANSI:
00000188	A0408000		push	r8
00000189	4280000A		lix		r8,0x0A				; Line Feed
0000018a	D4FFFF14		bsr		putChar_ANSI	; Put the character to the screen
0000018b	4280000D		lix		r8,0x0D				; Carriage Return
0000018c	D4FFFF12		bsr		putChar_ANSI	; Echo character back to the UART
0000018d	A1804000		pull	r8
0000018e	A1704000		pull	PC

;
; clearScreen_ANSI_UART - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen_ANSI_UART:
0000018f	A0408000		push	r8				; save r8
00000190	4280001B		lix		r8,0x1b			; ESC
00000191	D4FFFFC0		bsr		putChar_ANSI_UART
00000192	4280005B		lix		r8,0x5b			; [
00000193	D4FFFFBE		bsr		putChar_ANSI_UART
00000194	42800032		lix		r8,0x32			; 2
00000195	D4FFFFBC		bsr		putChar_ANSI_UART
00000196	4280004A		lix		r8,0x4A			; J
00000197	D4FFFFBA		bsr		putChar_ANSI_UART
00000198	A1804000		pull	r8
00000199	A1704000		pull	PC				; rts

	