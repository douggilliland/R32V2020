; Read PS/2 keyboard character and put it to the Screen
; Requires V002 build with ANSI screen support
; On RETRO-EP4 card, requires PuTTY to be running to read serial port
; PuTTY needs to be in Hardware Handshake mode
; SigRok PS/2 decoder https://www.sigrok.org/blog/new-protocol-decoder-ps2

hello:	.string "R32V2020> "
missingHandshake: .string "*** Run PuTTY and enable hardware handshake ***"
screenPtr:	.long 0x0000
screenBase:	.long 0x0

;
; Read PS/2 character and put it to the SVGA Display and the Serial Port
;

main:
00000000	D400003C		bsr	clearANSIScreen
readDataMemory:
00000001	42800000		lix	r8,hello.lower
00000002	D400002E		bsr	printString
loopPS2Read_ScreenWrite:
00000003	D400000F		bsr	getPS2CharPolled
00000004	D4000043		bsr	putCharToANSIScreen	; put the character to the screen
00000005	D4000018		bsr	putUARTChar
00000006	C0FFFFFD		bra	loopPS2Read_ScreenWrite

;
; getPS2Char
; returns character received in r8
;

getPS2Char:
00000007	A0409000		push	r9
00000008	A0405000		push	PAR
00000009	42500801		lix	PAR,0x0801	; PS/2 Status
waitPS2RxStat:
0000000a	84905000		lpl	r9			; Read Status into r9
0000000b	2A991000		and r9,r9,r1
0000000c	C3FFFFFE		bez waitPS2RxStat
getCharFromPS2:
0000000d	42500800		lix PAR,0x0800
0000000e	84805000		lpl	r8
whilePS2RxStat:
0000000f	A1504000		pull	PAR
00000010	A1904000		pull	r9
00000011	A1704000		pull	PC

;
; getPS2Char
; returns character received in r8
;

getPS2CharPolled:
00000012	A0409000		push	r9
00000013	A0405000		push	PAR
00000014	42500803		lix	PAR,0x0803	; PS/2 Status
waitPS2RxStatPolled:
00000015	84905000		lpl	r9			; Read Status into r9
00000016	2A991000		and r9,r9,r1
00000017	C3FFFFFE		bez waitPS2RxStatPolled
getCharFromPS2Polled:
00000018	42500802		lix PAR,0x0802
00000019	84805000		lpl	r8
whilePS2RxStatPolled:
0000001a	A1504000		pull	PAR
0000001b	A1904000		pull	r9
0000001c	A1704000		pull	PC

;
; putUARTChar - Put a character to the UART
; passed character in r8 is sent out the UART
;

putUARTChar:
0000001d	A0408000		push	r8
0000001e	A0409000		push	r9
0000001f	A040A000		push	r10
00000020	A0405000		push	PAR
00000021	40A00002		lil	r10,0x2
00000022	40501800		lil	PAR,0x1800	; UART Status
waitUartTxStat:
00000023	84905000		lpl	r9			; Read Status into r9
00000024	2A99A000		and r9,r9,r10
00000025	C7000004		bnz uartRdy
; remind user to enable HW handshake
00000026	4280000C		lix	r8,missingHandshake.lower
00000027	D4000009		bsr	printString
loopForever:
00000028	C0000003		bra	getOut
uartRdy:
00000029	40501801		lil PAR,0x1801
0000002a	85508000		spl	r8			; echo the character
getOut:
0000002b	A1504000		pull	PAR
0000002c	A1A04000		pull	r10
0000002d	A1904000		pull	r9
0000002e	A1804000		pull	r8
0000002f	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
00000030	A0408000		push	r8				; save r8
00000031	A0406000		push	DAR
00000032	20680000		add		DAR,r8,ZERO		; set the start of the string
nextChar:
00000033	60806000		ldb		r8				; get the character
00000034	38380000		cmp		r8,ZERO			; Null terminated string
00000035	D1000004		beq		donePrStr		; done if null
00000036	D4000011		bsr		putCharToANSIScreen	; write out the character
00000037	20661000		add		DAR,DAR,r1		; Point to next character
00000038	C0FFFFFB		bra		nextChar
donePrStr:
00000039	A1604000		pull	DAR				; restore DAR
0000003a	A1804000		pull	r8				; restore r8
0000003b	A1704000		pull	PC				; rts

;
; clearANSIScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearANSIScreen:
0000003c	A0408000		push	r8				; save r8
0000003d	4280001B		lix		r8,0x1b			; ESC
0000003e	D4000009		bsr		putCharToANSIScreen
0000003f	4280005B		lix		r8,0x5b			; [
00000040	D4000007		bsr		putCharToANSIScreen
00000041	42800032		lix		r8,0x32			; 2
00000042	D4000005		bsr		putCharToANSIScreen
00000043	4280004A		lix		r8,0x4A			; J
00000044	D4000003		bsr		putCharToANSIScreen
00000045	A1804000		pull	r8
00000046	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToANSIScreen:
00000047	A0409000		push	r9
00000048	A0405000		push	PAR
00000049	A040A000		push	r10
0000004a	42A00002		lix		r10,0x2		; TxReady bit
0000004b	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
0000004c	84905000		lpl		r9			; Read Status into r9
0000004d	2A99A000		and 	r9,r9,r10
0000004e	C3FFFFFE		bez 	waitScreenTxStat
0000004f	42500001		lix 	PAR,0x1
00000050	85508000		spl		r8			; echo the character
00000051	A1A04000		pull	r10
00000052	A1504000		pull	PAR
00000053	A1904000		pull	r9
00000054	A1704000		pull	PC
	
;
; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; screenBase has the base address of the screen memory
; screenPtr contains the address of the current char position
;

setCharPos:
00000055	A0409000		push	r9						; save r9
00000056	A040A000		push	r10						; save r10
00000057	A0406000		push	DAR						; save DAR
00000058	41A00000		liu		r10,screenBase.upper
00000059	40A00040		lil		r10,screenBase.lower
0000005a	206A0000		add		DAR,r10,ZERO			; DAR points to the screenBase
0000005b	64A06000		ldl		r10						; r10 has the screen base address
0000005c	20A80000		add		r10,r8,ZERO				; add passed position to base
0000005d	41900000		liu		r9,screenPtr.upper
0000005e	4090003C		lil		r9,screenPtr.lower		; r9 is the ptr to screenPtr
0000005f	20690000		add		DAR,r9,ZERO				; DAR points to screenPtr
00000060	6560A000		sdl		r10						; store new screen address
00000061	A1604000		pull 	DAR						; restore DAR
00000062	A1A04000		pull 	r10						; restore r10
00000063	A1904000		pull 	r9						; restore r9
00000064	A1704000		pull	PC						; rts
