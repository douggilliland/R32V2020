hello:	.string "R32V2020> "
screenPtr:	.long 0x0
currCharLocPtr:	.long 0x0

;
; Read UART character and put it to the XVGA Display
;

main:
00000000	42800000		lix		r8,0x0			; set screen position to home
00000001	D4000069		bsr		setCharPos
00000002	D4000031		bsr		clearScreen
readDataMemory:
00000003	42800000		lix		r8,hello.lower
00000004	D4000023		bsr		printString
readUartStatus:
00000005	D400000B		bsr		waitGetCharFromUART
putCharToScreenAndUART:
00000006	D4000039		bsr		putCharToScreen	; put the character to the screen
00000007	4290000D		lix		r9,0x0d
00000008	38389000		cmp		r8,r9
00000009	D2000005		bne		putOutChar
0000000a	A0408000		push	r8
0000000b	4280000A		lix		r8,0x0a
0000000c	D400000D		bsr		putCharToUART
0000000d	A1804000		pull	r8
putOutChar:
0000000e	D400000B		bsr		putCharToUART
0000000f	C0FFFFF6		bra		readUartStatus

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
00000010	A0405000		push	PAR
00000011	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
00000012	84805000		lpl		r8			; Read Status into r8
00000013	25881000		and 	r8,r8,ONE
00000014	C3FFFFFE		bez 	waitUartRxStat
00000015	42501801		lix 	PAR,0x1801
00000016	84805000		lpl		r8
00000017	A1504000		pull	PAR
00000018	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
00000019	A0409000		push	r9
0000001a	A0405000		push	PAR
0000001b	A040A000		push	r10
0000001c	42A00002		lix		r10,0x2
0000001d	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
0000001e	84905000		lpl		r9			; Read Status into r9
0000001f	2599A000		and 	r9,r9,r10
00000020	C3FFFFFE		bez 	waitUartTxStat
00000021	42501801		lix 	PAR,0x1801
00000022	85508000		spl		r8			; echo the character
00000023	A1A04000		pull	r10
00000024	A1504000		pull	PAR
00000025	A1904000		pull	r9
00000026	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
00000027	A0408000		push	r8				; save r8
00000028	A0406000		push	DAR
00000029	20680000		add		DAR,r8,ZERO		; set the start of the string
nextChar:
0000002a	60806000		ldb		r8				; get the character
0000002b	38380000		cmp		r8,ZERO			; Null terminated string
0000002c	D1000004		beq		donePrStr		; done if null
0000002d	D4000073		bsr		putCharToANSIScreen	; write out the character
0000002e	20661000		add		DAR,DAR,r1		; Point to next character
0000002f	C0FFFFFB		bra		nextChar
donePrStr:
00000030	A1604000		pull	DAR				; restore DAR
00000031	A1804000		pull	r8				; restore r8
00000032	A1704000		pull	PC				; rts

;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
; Sets the pointer to the screen to the first location
;

clearScreen:
00000033	A0409000		push	r9				; save r9
00000034	A0408000		push	r8				; save r8
00000035	42800020		lix		r8,0x0020		; fill with spaces
00000036	429007FE		lix 	r9,0x7FE		; loopCount	(1K minus 1)
looper:
00000037	D4000008		bsr		putCharToScreen
00000038	20992000		add 	r9,r9,MINUS1	; decrement character counter
00000039	D2FFFFFE		bne		looper			; loop until complete
0000003a	42800000		lix		r8,0x0			; Move cursor to home position
0000003b	D400002F		bsr		setCharPos
0000003c	A1804000		pull	r8
0000003d	A1904000		pull	r9
0000003e	A1704000		pull	PC				; rts

;
; putCharToScreen - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToScreen:
0000003f	A040B000		push	r11					; save r11
00000040	A040A000		push	r10					; save r10
00000041	A0409000		push	r9					; save r9
00000042	A0406000		push	DAR
00000043	A0405000		push	PAR
00000044	4290000C		lix		r9,screenPtr.lower	; r9 is the ptr to screenPtr
00000045	20690000		add		DAR,r9,ZERO			; DAR points to screenPtr
00000046	64A06000		ldl		r10					; r10 has screenPtr value
; look for specific characters
00000047	42B0007F		lix		r11,0x7F			; RUBOUT key
00000048	3838B000		cmp		r8,r11
00000049	D100000C		beq		gotBS
0000004a	42B000E0		lix		r11,0xe0			; 0x0-0x1f are ctrl chars
0000004b	25BB8000		and		r11,r11,r8
0000004c	C7000014		bnz		notCtlChar
; Check for CR	
0000004d	42B0000D		lix		r11,0x0d			; CR
0000004e	3838B000		cmp		r8,r11
0000004f	D100000B		beq		gotCR
; Check for BELL
00000050	42B00007		lix		r11,0x07			; BELL
00000051	3838B000		cmp		r8,r11
00000052	D2000011		bne		skipPrintChar
00000053	D4000025		bsr		makeBuzz
; Goes here
00000054	C000000F		bra		skipPrintChar
gotBS:
00000055	20AA2000		add		r10,r10,MINUS1
00000056	205A0000		add		PAR,r10,ZERO
00000057	42800020		lix		r8,0x20
00000058	81508000		spb		r8
00000059	C000000A		bra		skipPrintChar
gotCR:
0000005a	42B0FFC0		lix		r11,0xffc0			; Go to the start of the line
0000005b	25AAB000		and		r10,r10,r11
0000005c	42B00040		lix		r11,0x40			; Go down a line
0000005d	20AAB000		add		r10,r10,r11
0000005e	205A1000		add		PAR,r10,ONE			; Set PAR to screenPtr
0000005f	C0000004		bra		skipPrintChar
notCtlChar:
00000060	205A0000		add		PAR,r10,ZERO		; Set PAR to screenPtr
00000061	81508000		spb		r8					; write character to screen
00000062	20AA1000		add		r10,r10,ONE			; increment screen pointer
skipPrintChar:
00000063	6560A000		sdl		r10					; save new pointer
00000064	A1504000		pull 	PAR					; restore PAR
00000065	A1604000		pull 	DAR					; restore DAR
00000066	A1904000		pull 	r9					; restore r9
00000067	A1A04000		pull 	r10					; restore r10
00000068	A1B04000		pull 	r11					; restore r11
00000069	A1704000		pull	PC					; rts

;
; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; currCharLocPtr has the base address of the screen memory
; screenPtr contains the address of the current char position
;

setCharPos:
0000006a	A0409000		push	r9						; save r9
0000006b	A040A000		push	r10						; save r10
0000006c	A0406000		push	DAR						; save DAR
0000006d	42A00010		lix		r10,currCharLocPtr.lower
0000006e	206A0000		add		DAR,r10,ZERO			; DAR points to the currCharLocPtr
0000006f	64A06000		ldl		r10						; r10 has the screen base address
00000070	20A80000		add		r10,r8,ZERO				; add passed position to base
00000071	4290000C		lix		r9,screenPtr.lower		; r9 is the ptr to screenPtr
00000072	20690000		add		DAR,r9,ZERO				; DAR points to screenPtr
00000073	6560A000		sdl		r10						; store new screen address
00000074	A1604000		pull	DAR						; restore DAR
00000075	A1A04000		pull	r10						; restore r10
00000076	A1904000		pull	r9						; restore r9
00000077	A1704000		pull	PC						; rts

makeBuzz:
00000078	A0408000		push	r8
00000079	42800000		lix		r8,0			; first note is 0
0000007a	D4000007		bsr 	setNote
0000007b	D400000D		bsr		enableBuzzer
0000007c	428000FA		lix		r8,250			; count for 1 Sec
0000007d	D4000031		bsr		delay_mS		; call delay_ms
0000007e	D4000016		bsr		disableBuzzer
0000007f	A1804000		pull	r8
00000080	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
00000081	A0408000		push	r8
00000082	A0405000		push	PAR
00000083	42504000		lix		PAR,0x4000
00000084	85508000		spl		r8
00000085	A1504000		pull	PAR
00000086	A1804000		pull	r8
00000087	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
00000088	A0409000		push	r9
00000089	A0408000		push	r8
0000008a	A0405000		push	PAR
0000008b	42900010		lix		r9,0x0010		; Buzzer Enable line
0000008c	42502800		lix		PAR,0x2800
0000008d	84805000		lpl		r8
0000008e	24889000		or		r8,r8,r9
0000008f	85508000		spl		r8
00000090	A1504000		pull	PAR
00000091	A1804000		pull	r8
00000092	A1904000		pull	r9
00000093	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
00000094	A0409000		push	r9
00000095	A0408000		push	r8
00000096	A0405000		push	PAR
00000097	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
00000098	42502800		lix		PAR,0x2800
00000099	84805000		lpl		r8
0000009a	25889000		and		r8,r8,r9
0000009b	85508000		spl		r8
0000009c	A1504000		pull	PAR
0000009d	A1804000		pull	r8
0000009e	A1904000		pull	r9
0000009f	A1704000		pull	PC
	
;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
000000a0	A0409000		push	r9
000000a1	A0405000		push	PAR
000000a2	A040A000		push	r10
000000a3	42A00002		lix		r10,0x2		; TxReady bit
000000a4	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
000000a5	84905000		lpl		r9			; Read Status into r9
000000a6	2599A000		and 	r9,r9,r10
000000a7	C3FFFFFE		bez 	waitScreenTxStat
000000a8	42500001		lix 	PAR,0x1
000000a9	85508000		spl		r8			; echo the character
000000aa	A1A04000		pull	r10
000000ab	A1504000		pull	PAR
000000ac	A1904000		pull	r9
000000ad	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Uses routine uses r9

delay_mS:
000000ae	A0409000		push	r9
000000af	42503802		lix		PAR,0x3802		; address of the mSec counter
000000b0	84905000		lpl		r9				; read the peripheral counter into r9
000000b1	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000b2	84905000		lpl		r9				; check the elapsed time counter
000000b3	38389000		cmp		r8,r9
000000b4	CCFFFFFE		blt		loop_delay_mS
000000b5	A1904000		pull	r9
000000b6	A1704000		pull	PC
