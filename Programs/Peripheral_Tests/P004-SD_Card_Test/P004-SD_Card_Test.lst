; P004-SD_Card_Test - Test the SDSC Card interface
;
; Testing on A-ESTF FPGA development card
;	http://land-boards.com/blwiki/index.php?title=A-ESTF_V2_EP4CE22_Board
; Not all FPGA cards have built-in SD Card sockets
; On other cards, should be able to wire up to IO pins (if there are any)
; Dumps SDSC Card to the ANSI VGA screen
;
; There are three types of SD cards
; SDSC - Standard Capacity SD cards (up to 2 GB)
; SDHC - High Capacity SD cards (>2GB up to 32 GB)
; SDXC - Extra Capacity SD cards (>32 GB) - not currently supported
;
; For SDSC, the read/write address parameter is a 512-byte aligned byte
; address. ie, it has 9 low address bits explicitly set to 0.
; 23 of the 24 programmable address bits select the 512-byte block.
; This gives an address capacity of 2^23 * 512 = 4GB
; The SDLBA values are different for SDHC cards.
; The SDLBA registers are used like this:
;  31 30 29 28.27 26 25 24.23 22 21 20.19 18 17 16.15 14 13 12.11 10 09 08.07 06 05 04.03 02 01 00
; +------- SDLBA2 -----+------- SDLBA1 --------+------- SDLBA0 --------+ 0  0  0  0  0  0  0  0  0
;
; There is a constant in the VHDL code which needs to be set to match the card type.
;	signal sdhc : std_logic := '0';
;	-- set to 0 for SDSC cards
;	-- set to non-0 for SDHC cards
;
; Original VHDL code was based on the Multicomp design by Grant Searle
; Adapted from design by Steven J. Merrifield, June 2008
;	https://pastebin.com/HW3ru1cC
; Read states are derived from the Apple II emulator by Stephen Edwards
;	https://github.com/MiSTer-devel/Apple-II_MiSTer
; Enhanced by Neal Crook to support SDHC cards
;	https://github.com/nealcrook/multicomp6809/tree/master/multicomp/Components/SDCARD
; SDHC can be upto 32GByte but this design can only access the low 8GByte
; Code for R32V2020 RISC CPU
;
; SD Card base address is x1000
; Register Addresses
;    0x1000    SDDATA        read/write data
;    0x1001    SDSTATUS      read
;    0x1001    SDCONTROL     write
;    0x1002    SDLBA0        write-only
;    0x1003    SDLBA1        write-only
;    0x1004    SDLBA2        write-only (only bits 6:0 are valid)
;
; To read a 512-byte block from the SDSC card:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to read from
; Write 0 to SDCONTROL to issue read command
; Loop 512 times:
;     Wait until SDSTATUS=0xE0 (read byte ready, block busy)
;     Read byte from SDDATA
;
; To write a 512-byte block to the SDSC card:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to write to
; Write 1 to SDCONTROL to issue write command
; Loop 512 times:
;     Wait until SDSTATUS=0xA0 (block busy)
;     Write byte to SDDATA
;


prompt:	.string "(R32V2020) SDHC Dump Utility v0.0.1"
screenPtr:	.long 0x0000
screenBase:	.long 0x0
syntaxError:	.string "*** Bad number error (at a2h_Error) ***"
anyKeyToContinue:	.string "Hit any key to continue"
blockNumber:	.string "Block Address : 0x"

;
; Write the second block of the SD card with a fixed pattern of data
; Read an SD card block - one block at a time
; Prints the contents of the block to the ANSI screen
; Hit a key on the PS/2 keyboard to advance to the next block
; r9 = block number
;

main:
00000000	D40000F5	bsr		clearScreen_ANSI
00000001	42800000	lix		r8,prompt.lower
00000002	D40000CB	bsr		printString_ANSI
00000003	D40000C3	bsr		newLine_ANSI
00000004	4280000A	lix		r8,10					; give the SD card 10 mS
00000005	D400010E	bsr		delay_mS
00000006	42800200	lix		r8,512					; write to the second block
00000007	D400003A	bsr		writeBlock_SDSCCard
00000008	42900000	lix		r9,0					; start with block 0
readNextBlock:
00000009	4280006C	lix		r8,blockNumber.lower	; Block Number message
0000000a	D40000C3	bsr		printString_ANSI
0000000b	21890000	addi	r8,r9,0					; print the current block number
0000000c	D40000F4	bsr		printLong_ANSI
0000000d	D40000B9	bsr		newLine_ANSI
0000000e	21890000	addi	r8,r9,0					; r9 holds block number, pass in r8
0000000f	D4000009	bsr		readDumpBlock_SDSCCard
00000010	D40000B6	bsr		newLine_ANSI
00000011	42800054	lix		r8,anyKeyToContinue.lower
00000012	D40000BB	bsr		printString_ANSI
00000013	D400004F	bsr		getChar_PS2
00000014	D40000B2	bsr		newLine_ANSI
00000015	21990200	addi	r9,r9,512				; Go to next block address
00000016	C0FFFFF3	bra		readNextBlock
loopForever:
00000017	C0000000	bra		loopForever


;
; readDumpBlock_SDSCCard
;
; To read a 512-byte block from the SDCARD:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to read from
; The bottom 8 bits of SDLBA0 and SDLBA1 LSB needs to be 0 for SDSC cards
; Write 0 to SDCONTROL to issue read command
; Loop 512 times:
;     Wait until SDSTATUS=0xE0 (read byte ready, block busy)
;     Read byte from SDDATA
; r8 = Block number
;  31 30 29 28.27 26 25 24.23 22 21 20.19 18 17 16.15 14 13 12.11 10 09 08.07 06 05 04.03 02 01 00
; +------- SDLBA2 -----+------- SDLBA1 --------+------- SDLBA0 --------+ 0  0  0  0  0  0  0  0  0
; r8 = passes the block number
;

readDumpBlock_SDSCCard:
00000018	A0408000	push	r8
00000019	A0409000	push	r9
0000001a	A040A000	push	r10
0000001b	A040B000	push	r11
0000001c	A0405000	push	PAR
0000001d	42501001	lix		PAR,0x1001			; SDSTATUS
waitForSDStatusRdRdy:
0000001e	84905000	lpl		r9
0000001f	39390080	cmpi	r9,0x80
00000020	D2FFFFFE	bne		waitForSDStatusRdRdy
00000021	42501002	lix		PAR,0x1002
00000022	89508000	spbp	r8					; SDLBA0
00000023	33808000	sr8		r8,r8
00000024	89508000	spbp	r8					; SDLBA1
00000025	33808000	sr8		r8,r8
00000026	81508000	spb		r8					; SDLBA2
00000027	42900000	lix		r9,0				; Write 0 to SDCONTROL to issue read command
00000028	42501001	lix		PAR,0x1001			; SDCONTROL
00000029	81509000	spb		r9
0000002a	42900200	lix		r9,512				; 512 characters to read
0000002b	42B00018	lix		r11,24				; print newLine_ANSI every 24 values
nextSDReadChar:
0000002c	42501001	lix		PAR,0x1001			; SDSTATUS
waitSDCharPresent:
0000002d	80A05000	lpb		r10
0000002e	393A00E0	cmpi	r10,0xE0
0000002f	D2FFFFFE	bne		waitSDCharPresent
00000030	42501000	lix		PAR,0x1000			; SDDATA
00000031	80805000	lpb		r8
00000032	D40000A6	bsr		printByte_ANSI		; char is in r8
00000033	42800020	lix		r8,0x20
00000034	D4000087	bsr		putChar_ANSI ; space between characters
00000035	23BB0001	subi	r11,r11,1
00000036	C7000003	bnz		skipNewLineSDBlockRd
00000037	D400008F	bsr		newLine_ANSI		; print newLine_ANSI every 24 values
00000038	42B00018	lix		r11,24
skipNewLineSDBlockRd:
00000039	23990001	subi	r9,r9,1
0000003a	C7FFFFF2	bnz		nextSDReadChar
0000003b	A1504000	pull	PAR
0000003c	A1B04000	pull	r11
0000003d	A1A04000	pull	r10
0000003e	A1904000	pull	r9
0000003f	A1804000	pull	r8
00000040	A1704000	pull	PC

;
; writeBlock_SDSCCard
;
; To write a 512-byte block to the SDCARD:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to write to
; The bottom 8 bits of SDLBA0 and SDLBA1 LSB needs to be 0 for SDSC cards
; Write 1 to SDCONTROL to issue write command
; Loop 512 times:
;     Wait until SDSTATUS=0xA0 (block busy)
;     Write byte to SDDATA
; r8 = passes the block number
;

writeBlock_SDSCCard:
00000041	A0408000	push	r8
00000042	A0409000	push	r9
00000043	A040A000	push	r10
00000044	A0405000	push	PAR
00000045	42501001	lix		PAR,0x1001			; SDSTATUS
waitForSDStatusWrRdy:
00000046	84905000	lpl		r9
00000047	39390080	cmpi	r9,0x80
00000048	D2FFFFFE	bne		waitForSDStatusWrRdy
00000049	42501002	lix		PAR,0x1002
0000004a	89508000	spbp	r8					; SDLBA0
0000004b	33808000	sr8		r8,r8
0000004c	89508000	spbp	r8					; SDLBA1
0000004d	33808000	sr8		r8,r8
0000004e	81508000	spb		r8					; SDLBA2
0000004f	42900001	lix		r9,1				; Write 0 to SDCONTROL to issue write command
00000050	42501001	lix		PAR,0x1001			; SDCONTROL
00000051	81509000	spb		r9
00000052	42900200	lix		r9,512				; 512 characters to read
00000053	42B00018	lix		r11,24				; print newLine_ANSI every 24 values
nextSDWriteChar:
00000054	42501001	lix		PAR,0x1001			; SDSTATUS
waitSDCharPresentWr:
00000055	80A05000	lpb		r10
00000056	393A00A0	cmpi	r10,0xA0
00000057	D2FFFFFE	bne		waitSDCharPresentWr
00000058	42501000	lix		PAR,0x1000			; SDDATA
00000059	428000AA	lix		r8,0xAA
0000005a	81508000	spb		r8
0000005b	23990001	subi	r9,r9,1
0000005c	C7FFFFF8	bnz		nextSDWriteChar
0000005d	A1504000	pull	PAR
0000005e	A1A04000	pull	r10
0000005f	A1904000	pull	r9
00000060	A1804000	pull	r8
00000061	A1704000	pull	PC

;--------------------------------------------------------------------
; ps2.asm - Functions to read the PS/2 keyboard
;
; Address	Function
; x0800 	Latched Keyboard Data
; x0801 	Latched Keyboard Status
; x0802 	Polled Keyboard Data
; x0803 	Polled Keyboard Status
;
; getChar_PS2
; returns character received in r8
;

getChar_PS2:
00000062	A0405000	push	PAR
00000063	42500801	lix		PAR,0x0801	; PS/2 Status
waitPS2RxStat:
00000064	84805000	lpl		r8			; Read Status into r9
00000065	2B880001	andi 	r8,r8,1
00000066	C3FFFFFE	bez 	waitPS2RxStat
getCharFromPS2:
00000067	42500800	lix 	PAR,0x0800
00000068	84805000	lpl		r8
whilePS2RxStat:
00000069	A1504000	pull	PAR
0000006a	A1704000	pull	PC

; waitReadPS2_UART
; wait for character from either
;	the PS/2 keyboard or the UART serial
; r8 = read character

waitReadPS2_UART:
0000006b	A0405000	push	PAR
checkCharFromPS2:
0000006c	42500801	lix		PAR,0x0801	; PS/2 Status
0000006d	84805000	lpl		r8			; Read Status
0000006e	2B880001	andi	r8,r8,0x1	; =1 when char received
0000006f	C3000004	bez 	checkUARTStat
00000070	42500800	lix 	PAR,0x0800	; PS/2 Data
00000071	84805000	lpl		r8
00000072	C0000007	bra		gotPS2Char
checkUARTStat:
00000073	42501800	lix		PAR,0x1800	; UART Status
00000074	84805000	lpl		r8			; Read Status
00000075	2B880001	andi 	r8,r8,0x1	; =1 when char received
00000076	C3FFFFF6	bez 	checkCharFromPS2
00000077	42501801	lix 	PAR,0x1801	; UART Data
00000078	84805000	lpl		r8
gotPS2Char:
00000079	A1504000	pull	PAR
0000007a	A1704000	pull	PC

; checkForCharAndDiscard - Check for a character in UART or PS/2
; Discard the character received
; return whether char was present (1) or no char was present (0)

checkForCharAndDiscard:
0000007b	A0405000	push	PAR
0000007c	42500801	lix		PAR,0x0801	; PS/2 Status
0000007d	84805000	lpl		r8			; Read Status
0000007e	2B880001	andi	r8,r8,0x1	; =1 when char received
0000007f	C3000005	bez 	checkUARTStat2
00000080	42500800	lix 	PAR,0x0800	; PS/2 Data
00000081	84805000	lpl		r8			; throw away char
00000082	42800001	lix		r8,0x1
00000083	C000000A	bra		gotChar
checkUARTStat2:
00000084	42501800	lix		PAR,0x1800	; UART Status
00000085	84805000	lpl		r8			; Read Status
00000086	2B880001	andi 	r8,r8,0x1	; =1 when char received
00000087	C3000005	bez 	noCharReceived
00000088	42501801	lix 	PAR,0x1801	; UART Data
00000089	84805000	lpl		r8
0000008a	42800001	lix		r8,1
0000008b	C0000002	bra		gotChar
noCharReceived:
0000008c	42800000	lix		r8,0
gotChar:
0000008d	A1504000	pull	PAR
0000008e	A1704000	pull	PC

;
; waitCharPolled_PS2 - Check the polled character interface
; wait for a character
; return when a character is present
; returns character received in r8
;

waitCharPolled_PS2:
0000008f	A0405000	push	PAR
00000090	42500803	lix		PAR,0x0803	; PS/2 Status
waitPS2RxStatPolled:
00000091	84805000	lpl		r8			; Read Status into r8
00000092	2B880001	andi 	r8,r8,0x1
00000093	C3FFFFFE	bez 	waitPS2RxStatPolled
getCharFromPS2Polled:
00000094	42500802	lix 	PAR,0x0802
00000095	84805000	lpl		r8
whilePS2RxStatPolled:
00000096	A1504000	pull	PAR
00000097	A1704000	pull	PC

;
; checkGetStat_PS2 - Checks the polling status
; Polled interface is active while the keyboard key is pressed
; returns
;	-1 if there is no character,
;	character if there is a character
;

checkGetStat_PS2:
00000098	A0405000	push	PAR
00000099	42500803	lix		PAR,0x0803	; PS/2 Status
0000009a	84805000	lpl		r8			; Read Status into r8
0000009b	2B880001	andi	r8,r8,0x1
0000009c	C3000004	bez		charNotPresent
0000009d	42500802	lix		PAR,0x0802
0000009e	84805000	lpl		r8
0000009f	C0000002	bra		gotCharIn
charNotPresent:
000000a0	20802000	add		r8,ZERO,MINUS1
gotCharIn:
000000a1	A1504000	pull	PAR
000000a2	A1704000	pull	PC
;--------------------------------------------------------------------
; uart.asm

missingHandshake: .string "*** Run PuTTY and enable hardware handshake ***"

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
000000a3	A0405000	push	PAR
000000a4	42501800	lix		PAR,0x1800	; UART Status
waitUartRxStat:
000000a5	84805000	lpl		r8			; Read Status into r8
000000a6	2B880001	andi 	r8,r8,0x1
000000a7	C3FFFFFE	bez 	waitUartRxStat
000000a8	42501801	lix 	PAR,0x1801
000000a9	84805000	lpl		r8
000000aa	A1504000	pull	PAR
000000ab	A1704000	pull	PC

;
; putChar_UART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putChar_UART:
000000ac	A0405000	push	PAR
000000ad	A0408000	push	r8
000000ae	42501800	lix		PAR,0x1800	; UART Status
waitUartTxStat:
000000af	84805000	lpl		r8			; Read Status into r8
000000b0	2B880002	andi 	r8,r8,0x2
000000b1	C7000005	bnz 	uartRdy
; Remind user to enable HW handshake
; would be better to add a HW handshake timeout
; Since the USB is so much faster it is unlikely this path
;	will be exercised.
; For cards with RS-232 serial this would be a serious concern
; It's more likely that PuTTY needed to be run in HW handshake mode.
handshakeStuck:
000000b2	42800080	lix		r8,missingHandshake.lower
000000b3	D400001A	bsr		printString_ANSI
000000b4	A1804000	pull	r8
000000b5	C0000004	bra		getOut
uartRdy:
000000b6	42501801	lix 	PAR,0x1801
000000b7	A1804000	pull	r8
000000b8	85508000	spl		r8			; echo the character
getOut:
000000b9	A1504000	pull	PAR
000000ba	A1704000	pull	PC

;--------------------------------------------------------------------
; ANSIScreen.asm

;
; putChar_ANSI - Put a character to the screen
; Character to put to screen is in r8
;

putChar_ANSI:
000000bb	A0409000	push	r9
000000bc	A0405000	push	PAR
000000bd	42500000	lix		PAR,0x0		; UART Status
waitScreenTxStat:
000000be	84905000	lpl		r9			; Read Status into r9
000000bf	2B990002	andi	r9,r9,0x2
000000c0	C3FFFFFE	bez 	waitScreenTxStat
000000c1	42500001	lix 	PAR,0x1
000000c2	85508000	spl		r8			; echo the character
000000c3	A1504000	pull	PAR
000000c4	A1904000	pull	r9
000000c5	A1704000	pull	PC

;
; newLine_ANSI - Print out a newLine_ANSI (CR-LF)
;

newLine_ANSI:
000000c6	A0408000	push	r8
000000c7	4280000A	lix		r8,0x0A				; Line Feed
000000c8	D4FFFFF3	bsr		putChar_ANSI	; Put the character to the screen
000000c9	4280000D	lix		r8,0x0D				; Carriage Return
000000ca	D4FFFFF1	bsr		putChar_ANSI	; Echo character back to the UART
000000cb	A1804000	pull	r8
000000cc	A1704000	pull	PC

;
; printString_ANSI - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI:
000000cd	A0408000	push	r8					; save r8
000000ce	A0406000	push	DAR
000000cf	20680000	add		DAR,r8,ZERO			; set the start of the string
nextCharANSI:
000000d0	68806000	ldbp	r8					; get the character01
000000d1	39380000	cmpi	r8,0x0				; Null terminated string
000000d2	D1000003	beq		donePrANSIStr		; done if null
000000d3	D4FFFFE8	bsr		putChar_ANSI	; write out the character
000000d4	C0FFFFFC	bra		nextCharANSI
donePrANSIStr:
000000d5	A1604000	pull	DAR					; restore DAR
000000d6	A1804000	pull	r8					; restore r8
000000d7	A1704000	pull	PC					; rts

;
; printByte_ANSI
; r8 contains the char value to print
;

printByte_ANSI:
000000d8	A0408000	push	r8
000000d9	A0409000	push	r9
000000da	A0408000	push	r8				; temporarily save r8
000000db	A1804000	pull	r8				; restore r8
000000dc	42900002	lix		r9,2			; loop counter
000000dd	31808000	sl8		r8,r8
000000de	31808000	sl8		r8,r8
000000df	31808000	sl8		r8,r8
doNextprintByte_ANSI:
000000e0	34808000	rol1	r8,r8
000000e1	34808000	rol1	r8,r8
000000e2	34808000	rol1	r8,r8
000000e3	34808000	rol1	r8,r8
000000e4	D4000006	bsr		printHexVal_ANSI
000000e5	23990001	subi	r9,r9,1
000000e6	C7FFFFFA	bnz		doNextprintByte_ANSI
000000e7	A1904000	pull	r9
000000e8	A1804000	pull	r8
000000e9	A1704000	pull	PC

;
; printHexValANSI
;

printHexVal_ANSI:
000000ea	A0408000	push	r8
000000eb	2B88000F	andi	r8,r8,0xf
000000ec	39380009	cmpi	r8,9
000000ed	CC000004	blt		printHexLetterANSI
000000ee	21880030	addi	r8,r8,0x30
000000ef	D4FFFFCC	bsr		putChar_ANSI
000000f0	C0000003	bra		donePrintHexValANSI
printHexLetterANSI:
000000f1	21880037	addi	r8,r8,0x37		; 'A' - 10
000000f2	D4FFFFC9	bsr		putChar_ANSI
donePrintHexValANSI:
000000f3	A1804000	pull	r8
000000f4	A1704000	pull	PC

;
; clearScreen_ANSI - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
; No passed value
; Uses r8 (saved during function)
; no return value
;

clearScreen_ANSI:
000000f5	A0408000	push	r8				; save r8
000000f6	4280001B	lix		r8,0x1b			; ESC
000000f7	D4FFFFC4	bsr		putChar_ANSI
000000f8	4280005B	lix		r8,0x5b			; [
000000f9	D4FFFFC2	bsr		putChar_ANSI
000000fa	42800032	lix		r8,0x32			; 2
000000fb	D4FFFFC0	bsr		putChar_ANSI
000000fc	4280004A	lix		r8,0x4A			; J
000000fd	D4FFFFBE	bsr		putChar_ANSI
000000fe	A1804000	pull	r8
000000ff	A1704000	pull	PC				; rts

;
; printLong_ANSI
; r8 contains the long value to print
;

printLong_ANSI:
00000100	A0408000	push	r8
00000101	A0409000	push	r9
00000102	A0408000	push	r8				; temporarily save r8
00000103	42800030	lix		r8,0x30			; print 0x
00000104	D4FFFFB7	bsr		putChar_ANSI
00000105	42800078	lix		r8,0x78
00000106	D4FFFFB5	bsr		putChar_ANSI
00000107	A1804000	pull	r8				; restore r8
00000108	42900008	lix		r9,8			; loop counter
doNextprintLong_ANSI:
00000109	34808000	rol1	r8,r8
0000010a	34808000	rol1	r8,r8
0000010b	34808000	rol1	r8,r8
0000010c	34808000	rol1	r8,r8
0000010d	D4FFFFDD	bsr		printHexVal_ANSI
0000010e	23990001	subi	r9,r9,1
0000010f	C7FFFFFA	bnz		doNextprintLong_ANSI
00000110	A1904000	pull	r9
00000111	A1804000	pull	r8
00000112	A1704000	pull	PC
;--------------------------------------------------------------------
; timers.asm

; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
00000113	A0409000	push	r9
00000114	42503802	lix		PAR,0x3802		; address of the mSec counter
00000115	84905000	lpl		r9				; read the peripheral counter into r9
00000116	20898000	add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
00000117	84905000	lpl		r9				; check the elapsed time counter
00000118	38389000	cmp		r8,r9
00000119	CCFFFFFE	blt		loop_delay_mS
0000011a	A1904000	pull	r9
0000011b	A1704000	pull	PC

;
; delay_uS - delay for the number of uSecs
; pass mSec delay in r8
; Uses routine uses r9 (saved and restored)
;

delay_uS:
0000011c	A0409000	push	r9
0000011d	A0405000	push	PAR
0000011e	42503801	lix		PAR,0x3801		; address of the uSec counter
0000011f	84905000	lpl		r9				; read the peripheral counter into r9
00000120	20898000	add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_uS:
00000121	84905000	lpl		r9				; check the elapsed time counter
00000122	38389000	cmp		r8,r9
00000123	CCFFFFFE	blt		loop_delay_uS
00000124	A1504000	pull	PAR
00000125	A1904000	pull	r9
00000126	A1704000	pull	PC

;--------------------------------------------------------------------
; ANSI_UART_io.asm

;
; ANSI_UART_io.asm -
;

;
; printString_ANSI_UART - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI_UART:
00000127	A0408000	push	r8					; save r8
00000128	A0406000	push	DAR
00000129	20680000	add		DAR,r8,ZERO			; set the start of the string
nextChar:
0000012a	68806000	ldbp	r8					; get the character01
0000012b	39380000	cmpi	r8,0x0				; Null terminated string
0000012c	D1000003	beq		donePrStr			; done if null
0000012d	D4000023	bsr		write_ANSI_UART	; write out the character
0000012e	C0FFFFFC	bra		nextChar
donePrStr:
0000012f	A1604000	pull	DAR					; restore DAR
00000130	A1804000	pull	r8					; restore r8
00000131	A1704000	pull	PC					; rts

;
; printLinebuffer_ANSI_UART - Print a screen to the current screen position with CRLF at the end
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printLinebuffer_ANSI_UART:
00000132	A0408000	push	r8					; save r8
00000133	A0406000	push	DAR
00000134	21680000	addi	DAR,r8,0x0			; set the start of the string
nextChar2:
00000135	68806000	ldbp	r8					; get the character
00000136	39380000	cmpi	r8,0x0				; Null terminated string
00000137	D1000003	beq		donePrStr2			; done if null
00000138	D4000018	bsr		write_ANSI_UART	; write out the character
00000139	C0FFFFFC	bra		nextChar2
donePrStr2:
0000013a	D4000004	bsr		newLine_ANSI_UART
0000013b	A1604000	pull	DAR					; restore DAR
0000013c	A1804000	pull	r8					; restore r8
0000013d	A1704000	pull	PC					; rts

;
; newLine_ANSI_UART - Print out a newLine_ANSI_UART (CR-LF)
;

newLine_ANSI_UART:
0000013e	A0408000	push	r8
0000013f	4280000A	lix		r8,0x0A				; Line Feed
00000140	D4000010	bsr		write_ANSI_UART	; Put the character to the screen
00000141	4280000D	lix		r8,0x0D				; Carriage Return
00000142	D400000E	bsr		write_ANSI_UART		; Echo character back to the UART
00000143	A1804000	pull	r8
00000144	A1704000	pull	PC

;
; clearScreen_ANSI_UART - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen_ANSI_UART:
00000145	A0408000	push	r8				; save r8
00000146	4280001B	lix		r8,0x1b			; ESC
00000147	D4000009	bsr		write_ANSI_UART
00000148	4280005B	lix		r8,0x5b			; [
00000149	D4000007	bsr		write_ANSI_UART
0000014a	42800032	lix		r8,0x32			; 2
0000014b	D4000005	bsr		write_ANSI_UART
0000014c	4280004A	lix		r8,0x4A			; J
0000014d	D4000003	bsr		write_ANSI_UART
0000014e	A1804000	pull	r8
0000014f	A1704000	pull	PC				; rts

; write_ANSI_UART
; write out a character to both
;	the ANSI screen and the UART

write_ANSI_UART:
00000150	D4FFFF6B	bsr		putChar_ANSI
00000151	D4FFFF5B	bsr		putChar_UART
00000152	A1704000	pull	PC

;
; asciiToHex_ANSI_UART - Convert a single ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
; Result is returned in r8
;	0x0-0xf - Legal Values
;	'DEAD' - Not hex character
;

asciiToHex_ANSI_UART:
00000153	39380066	cmpi	r8,0x66			; past 'f'
00000154	CC000011	blt		a2h_Error
00000155	39380030	cmpi	r8,0x30			; below '0'
00000156	CF00000F	bgt		a2h_Error
00000157	3938003A	cmpi	r8,0x3A			; '0' - '9'
00000158	CF000009	bgt		gotDigit
00000159	39380041	cmpi	r8,0x41			; ':' - '@'
0000015a	CF00000B	bgt		a2h_Error
0000015b	39380047	cmpi	r8,0x47			; 'A' - 'F'
0000015c	CC000007	blt		gotUpperLetter
0000015d	39380061	cmpi	r8,0x61			; 'G' - 'tick'
0000015e	CC000007	blt		a2h_Error
; Lower case letter
0000015f	23880057	subi	r8,r8,0x57
00000160	C000000A	bra		doneConvA2H
; number 0-9
gotDigit:
00000161	23880030	subi	r8,r8,0x30
00000162	C0000008	bra		doneConvA2H
; A-F
gotUpperLetter:
00000163	23880037	subi	r8,r8,0x37
00000164	C0000006	bra		doneConvA2H
a2h_Error:
00000165	4280002C	lix		r8,syntaxError.lower
00000166	D4FFFFD8	bsr		newLine_ANSI_UART
00000167	D4FFFFC0	bsr		printString_ANSI_UART
00000168	D4FFFFD6	bsr		newLine_ANSI_UART
00000169	4280DEAD	lix		r8,0xDEAD
doneConvA2H:
0000016a	A1704000	pull	PC

; hexToSevenSeg_ANSI_UART - Convert a two ASCII digit value into a hex byte
; Passed: r8 points to the start of the hex string
; Returned: r8 contains the hex value of the string
; Put the byte to the Seven Segment Display
;

hexToSevenSeg_ANSI_UART:
0000016b	A0409000	push	r9
0000016c	A0406000	push	DAR
0000016d	A0405000	push	PAR
0000016e	42900000	lix		r9,0
0000016f	20680000	add		DAR,r8,ZERO		; Address of lineBuff (passed into this routine)
00000170	68806000	ldbp	r8
00000171	D4FFFFE2	bsr		asciiToHex_ANSI_UART
00000172	3938DEAD	cmpi	r8,0xDEAD
00000173	D1000011	beq		badHexVal
00000174	2B88000F	andi	r8,r8,0xf
00000175	28998000	or		r9,r9,r8
00000176	30909000	sl1		r9,r9
00000177	30909000	sl1		r9,r9
00000178	30909000	sl1		r9,r9
00000179	30909000	sl1		r9,r9
0000017a	60806000	ldb		r8
0000017b	D4FFFFD8	bsr		asciiToHex_ANSI_UART
0000017c	3938DEAD	cmpi	r8,0xDEAD
0000017d	D1000007	beq		badHexVal
0000017e	2B88000F	andi	r8,r8,0xf
0000017f	28998000	or		r9,r9,r8
00000180	42503000	lix		PAR,0x3000		; seven segment display
00000181	85509000	spl		r9
00000182	20890000	add		r8,r9,ZERO
00000183	C0000006	bra		valOKDone
badHexVal:
00000184	4280002C	lix		r8,syntaxError.lower
00000185	D4FFFFB9	bsr		newLine_ANSI_UART
00000186	D4FFFFA1	bsr		printString_ANSI_UART
00000187	D4FFFFB7	bsr		newLine_ANSI_UART
00000188	4280DEAD	lix		r8,0xDEAD
valOKDone:
00000189	A1504000	pull	PAR
0000018a	A1604000	pull	DAR
0000018b	A1904000	pull	r9
0000018c	A1704000	pull	PC

;
; printHexVal_ANSI_UART
;

printHexVal_ANSI_UART:
0000018d	A0408000	push	r8
0000018e	2B88000F	andi	r8,r8,0xf
0000018f	39380009	cmpi	r8,9
00000190	CC000004	blt		printHexLetterANSI_UART
00000191	21880030	addi	r8,r8,0x30
00000192	D4FFFFBE	bsr		write_ANSI_UART
00000193	C0000003	bra		doneprintHexValANSI_UART
printHexLetterANSI_UART:
00000194	21880037	addi	r8,r8,0x37		; 'A' - 10
00000195	D4FFFFBB	bsr		write_ANSI_UART
doneprintHexValANSI_UART:
00000196	A1804000	pull	r8
00000197	A1704000	pull	PC

;
; printByte_ANSI_UART
; r8 contains the short value to print
;

printByte_ANSI_UART:
00000198	A0408000	push	r8
00000199	A0409000	push	r9
0000019a	A0408000	push	r8				; temporarily save r8
0000019b	42800030	lix		r8,0x30			; print 0x
0000019c	D400003E	bsr		putChar_ANSI_UART
0000019d	42800078	lix		r8,0x78
0000019e	D400003C	bsr		putChar_ANSI_UART
0000019f	A1804000	pull	r8				; restore r8
000001a0	42900002	lix		r9,2			; loop counter
000001a1	31808000	sl8		r8,r8
000001a2	31808000	sl8		r8,r8
000001a3	31808000	sl8		r8,r8
doNextprintByte_ANSI_UART:
000001a4	34808000	rol1	r8,r8
000001a5	34808000	rol1	r8,r8
000001a6	34808000	rol1	r8,r8
000001a7	34808000	rol1	r8,r8
000001a8	D4FFFFE5	bsr		printHexVal_ANSI_UART
000001a9	23990001	subi	r9,r9,1
000001aa	C7FFFFFA	bnz		doNextprintByte_ANSI_UART
000001ab	A1904000	pull	r9
000001ac	A1804000	pull	r8
000001ad	A1704000	pull	PC

;
; printShort_ANSI_UART
; r8 contains the short value to print
;

printShort_ANSI_UART:
000001ae	A0408000	push	r8
000001af	A0409000	push	r9
000001b0	A040A000	push	r10
000001b1	A0408000	push	r8				; temporarily save r8
000001b2	42800030	lix		r8,0x30
000001b3	D4FFFF9D	bsr		write_ANSI_UART
000001b4	42800078	lix		r8,0x78
000001b5	D4FFFF9B	bsr		write_ANSI_UART
000001b6	A1804000	pull	r8				; restore r8
000001b7	42900004	lix		r9,4			; loop counter
000001b8	31808000	sl8		r8,r8
000001b9	31808000	sl8		r8,r8
doNextprintShortANSI_UART:
000001ba	34808000	rol1	r8,r8
000001bb	34808000	rol1	r8,r8
000001bc	34808000	rol1	r8,r8
000001bd	34808000	rol1	r8,r8
000001be	D4FFFFCF	bsr		printHexVal_ANSI_UART
000001bf	23990001	subi	r9,r9,1
000001c0	C7FFFFFA	bnz		doNextprintShortANSI_UART
000001c1	A1A04000	pull	r10
000001c2	A1904000	pull	r9
000001c3	A1804000	pull	r8
000001c4	A1704000	pull	PC

;
; printLong_ANSI_UART
; r8 contains the long value to print
;

printLong_ANSI_UART:
000001c5	A0408000	push	r8
000001c6	A0409000	push	r9
000001c7	A040A000	push	r10
000001c8	A0408000	push	r8				; temporarily save r8
000001c9	42800030	lix		r8,0x30
000001ca	D4FFFF86	bsr		write_ANSI_UART
000001cb	42800078	lix		r8,0x78
000001cc	D4FFFF84	bsr		write_ANSI_UART
000001cd	A1804000	pull	r8				; restore r8
000001ce	42900008	lix		r9,8			; loop counter
doNextprintLongANSI_UART:
000001cf	34808000	rol1	r8,r8
000001d0	34808000	rol1	r8,r8
000001d1	34808000	rol1	r8,r8
000001d2	34808000	rol1	r8,r8
000001d3	D4FFFFBA	bsr		printHexVal_ANSI_UART
000001d4	23990001	subi	r9,r9,1
000001d5	C7FFFFFA	bnz		doNextprintLongANSI_UART
000001d6	A1A04000	pull	r10
000001d7	A1904000	pull	r9
000001d8	A1804000	pull	r8
000001d9	A1704000	pull	PC

; putChar_ANSI_UART
; write out a character to both
;	the ANSI screen and the UART

putChar_ANSI_UART:
000001da	D4FFFEE1	bsr		putChar_ANSI
000001db	D4FFFED1	bsr		putChar_UART
000001dc	A1704000	pull	PC
