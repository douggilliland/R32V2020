; P004-SD_Card_Test - Test the SD Card interface
; Testing on A-ESTF FPGA development card
;	http://land-boards.com/blwiki/index.php?title=A-ESTF_V2_EP4CE22_Board
; Not all FPGA cards have built-in SD Card sockets
; On other cards, should be able to wire up to IO pins (if there are any)
; Dumps SD Card to the ANSI VGA screen
;
; Original VHDL code was based on the Multicomp design by Grant Searle
; Enhanced by Neal Crook to support SDHC cards
; SDHC can be upto 32GByte but this design can only access the low 8GByte
; Code for R32V2020 RISC CPU
;
; SD Card base address is x1000
; Register Addresses
;    0x1000    SDDATA        read/write data
;    0x1001    SDSTATUS      read
;    0x1001    SDCONTROL     write
;    0x1002    SDLBA0        write-only
;    0x1003    SDLBA1        write-only
;    0x1004    SDLBA2        write-only (only bits 6:0 are valid)
;
; To read a 512-byte block from the SDCARD:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to read from
; Write 0 to SDCONTROL to issue read command
; Loop 512 times:
;     Wait until SDSTATUS=0xE0 (read byte ready, block busy)
;     Read byte from SDDATA
;
; To write a 512-byte block to the SDCARD:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to write to
; Write 1 to SDCONTROL to issue write command
; Loop 512 times:
;     Wait until SDSTATUS=0xA0 (block busy)
;     Write byte to SDDATA
;


prompt:	.string "SDHC Dump Utility v0.0.1"
missingHandshake: .string "*** Run PuTTY and enable hardware handshake ***"
screenPtr:	.long 0x0000
screenBase:	.long 0x0
syntaxError:	.string "*** Bad number error (at a2h_Error) ***"
anyKeyToContinue:	.string "Hit any key to continue"
blockNumber:	.string "Block Number 0x"

;
; Read an SD card block - one at a time
;

main:
00000000	D400006F		bsr		clearScreen_ANSI
00000001	42800000		lix		r8,prompt.lower
00000002	D4000062		bsr		printString_ANSI
00000003	D4000161		bsr		newLine_ANSI
00000004	42900000		lix		r9,0					; read block 0 to start with
readNextBlock:
00000005	42800094		lix		r8,blockNumber.lower
00000006	D400005E		bsr		printString_ANSI
00000007	21890000		addi	r8,r9,0
00000008	D40000D5		bsr		printLong_ANSI
00000009	D400015B		bsr		newLine_ANSI
0000000a	21890000		addi	r8,r9,0
0000000b	D4000009		bsr		readDumpBlock_SDCard
0000000c	D4000158		bsr		newLine_ANSI
0000000d	4280007C		lix		r8,anyKeyToContinue.lower
0000000e	D4000056		bsr		printString_ANSI
0000000f	D4000029		bsr		getChar_PS2
00000010	D4000154		bsr		newLine_ANSI
00000011	21990200		addi	r9,r9,512
00000012	C0FFFFF3		bra		readNextBlock
loopForever:
00000013	C0000000		bra		loopForever
	

;
; readBlock_SDCard
;
; To read a 512-byte block from the SDCARD:
; Wait until SDSTATUS=0x80 (ensures previous cmd has completed)
; Write SDLBA0, SDLBA1 SDLBA2 to select block index to read from
; Write 0 to SDCONTROL to issue read command
; Loop 512 times:
;     Wait until SDSTATUS=0xE0 (read byte ready, block busy)
;     Read byte from SDDATA
; r8 = Block number
;  31 30 29 28.27 26 25 24.23 22 21 20.19 18 17 16.15 14 13 12.11 10 09 08.07 06 05 04.03 02 01 00
; +------- SDLBA2 -----+------- SDLBA1 --------+------- SDLBA0 --------+ 0  0  0  0  0  0  0  0  0
;

readDumpBlock_SDCard:
00000014	A0408000		push	r8
00000015	A0409000		push	r9
00000016	A040A000		push	r10
00000017	A0405000		push	PAR
00000018	42501001		lix		PAR,0x1001			; SDSTATUS
waitForSDStatusRdRdy:
00000019	84905000		lpl		r9
0000001a	39390080		cmpi	r9,0x80
0000001b	D2FFFFFE		bne		waitForSDStatusRdRdy
0000001c	33808000		sr8		r8,r8				; Shift SD card block address right by 9 bits
0000001d	32808000		sr1		r8,r8
0000001e	42501002		lix		PAR,0x1002
0000001f	89508000		spbp	r8					; SDLBA0
00000020	33808000		sr8		r8,r8
00000021	89508000		spbp	r8					; SDLBA1
00000022	33808000		sr8		r8,r8
00000023	81508000		spb		r8					; SDLBA2
00000024	42900000		lix		r9,0
00000025	42501001		lix		PAR,0x1001			; SDCONTROL
00000026	81509000		spb		r9
00000027	42900200		lix		r9,512				; 512 characters to read
nextSDReadChar:
00000028	42501001		lix		PAR,0x1001			; SDSTATUS
waitSDCharPresent:
00000029	80A05000		lpb		r10
0000002a	393A00E0		cmpi	r10,0xE0
0000002b	D2FFFFFE		bne		waitSDCharPresent
0000002c	42501000		lix		PAR,0x1000			; SDDATA
0000002d	80805000		lpb		r8
0000002e	D40000ED		bsr		printByte_ANSI		; char is in r8
0000002f	42800020		lix		r8,0x20
00000030	D400004A		bsr		putChar_ANSI ; space between characters
00000031	23990001		subi	r9,r9,1
00000032	C7FFFFF6		bnz		nextSDReadChar
00000033	A1504000		pull	PAR
00000034	A1A04000		pull	r10
00000035	A1904000		pull	r9
00000036	A1804000		pull	r8
00000037	A1704000		pull	PC
	
;
; getChar_PS2
; returns character received in r8
;

getChar_PS2:
00000038	A0405000		push	PAR
00000039	42500801		lix		PAR,0x0801	; PS/2 Status
waitPS2RxStat:
0000003a	84805000		lpl		r8			; Read Status into r9
0000003b	2B880001		andi 	r8,r8,1
0000003c	C3FFFFFE		bez 	waitPS2RxStat
getCharFromPS2:
0000003d	42500800		lix 	PAR,0x0800
0000003e	84805000		lpl		r8
whilePS2RxStat:
0000003f	A1504000		pull	PAR
00000040	A1704000		pull	PC

;
; waitCharPolled_PS2 - Check the polled character interface
; wait for a character
; return when a character is present
; returns character received in r8
;

waitCharPolled_PS2:
00000041	A0405000		push	PAR
00000042	42500803		lix		PAR,0x0803	; PS/2 Status
waitPS2RxStatPolled:
00000043	84805000		lpl		r8			; Read Status into r8
00000044	2B880001		andi 	r8,r8,0x1
00000045	C3FFFFFE		bez 	waitPS2RxStatPolled
getCharFromPS2Polled:
00000046	42500802		lix 	PAR,0x0802
00000047	84805000		lpl		r8
whilePS2RxStatPolled:
00000048	A1504000		pull	PAR
00000049	A1704000		pull	PC

;
; checkGetStat_PS2 - Checks the polling status
; Polled interface is active while the keyboard key is pressed
; returns 
;	-1 if there is no character, 
;	character if there is a character
;

checkGetStat_PS2:
0000004a	A0405000		push	PAR
0000004b	42500803		lix		PAR,0x0803	; PS/2 Status
0000004c	84805000		lpl		r8			; Read Status into r8
0000004d	2B880001		andi	r8,r8,0x1
0000004e	C3000004		bez		charNotPresent
0000004f	42500802		lix		PAR,0x0802
00000050	84805000		lpl		r8
00000051	C0000002		bra		gotCharIn
charNotPresent:
00000052	20802000		add		r8,ZERO,MINUS1
gotCharIn:
00000053	A1504000		pull	PAR
00000054	A1704000		pull	PC

;
; putChar_UART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putChar_UART:
00000055	A0405000		push	PAR
00000056	A0408000		push	r8
00000057	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
00000058	84805000		lpl		r8			; Read Status into r8
00000059	2B880002		andi 	r8,r8,0x2
0000005a	C7000005		bnz 	uartRdy
; Remind user to enable HW handshake
; would be better to add a HW handshake timeout
; Since the USB is so much faster it is unlikely this path 
;	will be exercised. 
; For cards with RS-232 serial this would be a serious concern
; It's more likely that PuTTY needed to be run in HW handshake mode.
handshakeStuck:
0000005b	4280001C		lix		r8,missingHandshake.lower
0000005c	D4000008		bsr		printString_ANSI
0000005d	A1804000		pull	r8
0000005e	C0000004		bra		getOut
uartRdy:
0000005f	42501801		lix 	PAR,0x1801
00000060	A1804000		pull	r8
00000061	85508000		spl		r8			; echo the character
getOut:
00000062	A1504000		pull	PAR
00000063	A1704000		pull	PC
	
;
; printString_ANSI - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI:
00000064	A0408000		push	r8					; save r8
00000065	A0406000		push	DAR
00000066	21680000		addi	DAR,r8,0x0		; set the start of the string
nextCharANSI:
00000067	68806000		ldbp	r8					; get the character01
00000068	39380000		cmpi	r8,0x0				; Null terminated string
00000069	D1000003		beq		donePrANSIStr		; done if null
0000006a	D4000010		bsr		putChar_ANSI	; write out the character
0000006b	C0FFFFFC		bra		nextCharANSI
donePrANSIStr:
0000006c	A1604000		pull	DAR					; restore DAR
0000006d	A1804000		pull	r8					; restore r8
0000006e	A1704000		pull	PC					; rts
	
;
; clearScreen_ANSI - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
; No passed value
; Uses r8 (saved during function)
; no return value
;

clearScreen_ANSI:
0000006f	A0408000		push	r8				; save r8
00000070	4280001B		lix		r8,0x1b			; ESC
00000071	D4000009		bsr		putChar_ANSI
00000072	4280005B		lix		r8,0x5b			; [
00000073	D4000007		bsr		putChar_ANSI
00000074	42800032		lix		r8,0x32			; 2
00000075	D4000005		bsr		putChar_ANSI
00000076	4280004A		lix		r8,0x4A			; J
00000077	D4000003		bsr		putChar_ANSI
00000078	A1804000		pull	r8
00000079	A1704000		pull	PC				; rts

;
; putChar_ANSI - Put a character to the screen
; r8 - Character to put to screen
; r8 - returns character that was sent to screen
;

putChar_ANSI:
0000007a	A0405000		push	PAR
0000007b	A0408000		push	r8
0000007c	42500000		lix		PAR,0x0		; ANSI Screen (UART-style) Status
waitScreenTxStat:
0000007d	84805000		lpl		r8			; Read Status into r9
0000007e	2B880002		andi 	r8,r8,0x2
0000007f	C3FFFFFE		bez 	waitScreenTxStat
00000080	42500001		lix 	PAR,0x1		; ANSI Screen (UART-style) Data
00000081	A1804000		pull	r8
00000082	81508000		spb		r8			; send character to the screen
00000083	A1504000		pull	PAR
00000084	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
00000085	A0408000		push	r8
00000086	A0409000		push	r9
00000087	42503802		lix		PAR,0x3802		; address of the mSec counter
00000088	84905000		lpl		r9				; read the peripheral counter into r9
00000089	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
0000008a	84905000		lpl		r9				; check the elapsed time counter
0000008b	38389000		cmp		r8,r9
0000008c	CCFFFFFE		blt		loop_delay_mS
0000008d	A1904000		pull	r9
0000008e	A1804000		pull	r8
0000008f	A1704000		pull	PC

; convLineBuff2DigASCIIToHex7Seg - Convert a two ASCII digit value into a hex byte
; Passed: r8 points to the start of the hex string
; Returned: r8 contains the hex value of the string
; Put the byte to the Seven Segment Display
;

convLineBuff2DigASCIIToHex7Seg:
00000090	A0409000		push	r9
00000091	A0406000		push	DAR
00000092	A0405000		push	PAR
00000093	42900000		lix		r9,0
00000094	20680000		add		DAR,r8,ZERO		; Address of lineBuff (passed into this routine)
00000095	68806000		ldbp	r8
00000096	D400001C		bsr		asciiCharToHexNibble
00000097	3938DEAD		cmpi	r8,0xDEAD
00000098	D1000011		beq		badHexVal
00000099	2B88000F		andi	r8,r8,0xf
0000009a	28998000		or		r9,r9,r8
0000009b	30909000		sl1		r9,r9
0000009c	30909000		sl1		r9,r9
0000009d	30909000		sl1		r9,r9
0000009e	30909000		sl1		r9,r9
0000009f	60806000		ldb		r8
000000a0	D4000012		bsr		asciiCharToHexNibble
000000a1	3938DEAD		cmpi	r8,0xDEAD
000000a2	D1000007		beq		badHexVal
000000a3	2B88000F		andi	r8,r8,0xf
000000a4	28998000		or		r9,r9,r8
000000a5	42503000		lix		PAR,0x3000		; seven segment display
000000a6	85509000		spl		r9
000000a7	20890000		add		r8,r9,ZERO
000000a8	C0000006		bra		valOKDone
badHexVal:
000000a9	42800054		lix		r8,syntaxError.lower
000000aa	D40000B3		bsr		newLine_ANSI_UART
000000ab	D400009B		bsr		printString_ANSI_UART
000000ac	D40000B1		bsr		newLine_ANSI_UART
000000ad	4280DEAD		lix		r8,0xDEAD
valOKDone:
000000ae	A1504000		pull	PAR
000000af	A1604000		pull	DAR
000000b0	A1904000		pull	r9
000000b1	A1704000		pull	PC

;
; asciiCharToHexNibble - Convert a single ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
; Result is returned in r8
;	0x0-0xf - Legal Values
;	'DEAD' - Not hex character
;

asciiCharToHexNibble:
000000b2	39380066		cmpi	r8,0x66			; past 'f'
000000b3	CC000011		blt		a2h_Error
000000b4	39380030		cmpi	r8,0x30			; below '0'
000000b5	CF00000F		bgt		a2h_Error
000000b6	3938003A		cmpi	r8,0x3A			; '0' - '9'
000000b7	CF000009		bgt		gotDigit
000000b8	39380041		cmpi	r8,0x41			; ':' - '@'
000000b9	CF00000B		bgt		a2h_Error
000000ba	39380047		cmpi	r8,0x47			; 'A' - 'F'
000000bb	CC000007		blt		gotUpperLetter
000000bc	39380061		cmpi	r8,0x61			; 'G' - 'tick'
000000bd	CC000007		blt		a2h_Error
; Lower case letter
000000be	23880057		subi	r8,r8,0x57
000000bf	C000000A		bra		doneConvA2H
; number 0-9
gotDigit:
000000c0	23880030		subi	r8,r8,0x30
000000c1	C0000008		bra		doneConvA2H
; A-F
gotUpperLetter:
000000c2	23880037		subi	r8,r8,0x37
000000c3	C0000006		bra		doneConvA2H
a2h_Error:
000000c4	42800054		lix		r8,syntaxError.lower
000000c5	D4000098		bsr		newLine_ANSI_UART
000000c6	D4000080		bsr		printString_ANSI_UART
000000c7	D4000096		bsr		newLine_ANSI_UART
000000c8	4280DEAD		lix		r8,0xDEAD
doneConvA2H:
000000c9	A1704000		pull	PC

;
; printLong_ANSI_UART
; r8 contains the long value to print
;

printLong_ANSI_UART:
000000ca	A0408000		push	r8
000000cb	A0409000		push	r9
000000cc	A0408000		push	r8				; temporarily save r8
000000cd	42800030		lix		r8,0x30			; print 0x
000000ce	D400005F		bsr		putChar_ANSI_UART
000000cf	42800078		lix		r8,0x78
000000d0	D400005D		bsr		putChar_ANSI_UART
000000d1	A1804000		pull	r8				; restore r8
000000d2	42900008		lix		r9,8			; loop counter
doNextprintLong_ANSI_UART:
000000d3	34808000		rol1	r8,r8
000000d4	34808000		rol1	r8,r8
000000d5	34808000		rol1	r8,r8
000000d6	34808000		rol1	r8,r8
000000d7	D4000059		bsr		printHexVal_ANSI_UART
000000d8	23990001		subi	r9,r9,1
000000d9	C7FFFFFA		bnz		doNextprintLong_ANSI_UART
000000da	A1904000		pull	r9
000000db	A1804000		pull	r8
000000dc	A1704000		pull	PC

;
; printLong_ANSI
; r8 contains the long value to print
;

printLong_ANSI:
000000dd	A0408000		push	r8
000000de	A0409000		push	r9
000000df	A0408000		push	r8				; temporarily save r8
000000e0	42800030		lix		r8,0x30			; print 0x
000000e1	D4FFFF99		bsr		putChar_ANSI
000000e2	42800078		lix		r8,0x78
000000e3	D4FFFF97		bsr		putChar_ANSI
000000e4	A1804000		pull	r8				; restore r8
000000e5	42900008		lix		r9,8			; loop counter
doNextprintLong_ANSI:
000000e6	34808000		rol1	r8,r8
000000e7	34808000		rol1	r8,r8
000000e8	34808000		rol1	r8,r8
000000e9	34808000		rol1	r8,r8
000000ea	D4000051		bsr		printHexVal_ANSI
000000eb	23990001		subi	r9,r9,1
000000ec	C7FFFFFA		bnz		doNextprintLong_ANSI
000000ed	A1904000		pull	r9
000000ee	A1804000		pull	r8
000000ef	A1704000		pull	PC

;
; printShort_ANSI_UART
; r8 contains the short value to print
;

printShort_ANSI_UART:
000000f0	A0408000		push	r8
000000f1	A0409000		push	r9
000000f2	A0408000		push	r8				; temporarily save r8
000000f3	42800030		lix		r8,0x30			; print 0x
000000f4	D4000039		bsr		putChar_ANSI_UART
000000f5	42800078		lix		r8,0x78
000000f6	D4000037		bsr		putChar_ANSI_UART
000000f7	A1804000		pull	r8				; restore r8
000000f8	42900004		lix		r9,4			; loop counter
000000f9	31808000		sl8		r8,r8
000000fa	31808000		sl8		r8,r8
doNextprintShort_ANSI_UART:
000000fb	34808000		rol1	r8,r8
000000fc	34808000		rol1	r8,r8
000000fd	34808000		rol1	r8,r8
000000fe	34808000		rol1	r8,r8
000000ff	D4000031		bsr		printHexVal_ANSI_UART
00000100	23990001		subi	r9,r9,1
00000101	C7FFFFFA		bnz		doNextprintShort_ANSI_UART
00000102	A1904000		pull	r9
00000103	A1804000		pull	r8
00000104	A1704000		pull	PC

;
; printByte_ANSI_UART
; r8 contains the char value to print
;

printByte_ANSI_UART:
00000105	A0408000		push	r8
00000106	A0409000		push	r9
00000107	A0408000		push	r8				; temporarily save r8
00000108	42800030		lix		r8,0x30			; print 0x
00000109	D4000024		bsr		putChar_ANSI_UART
0000010a	42800078		lix		r8,0x78
0000010b	D4000022		bsr		putChar_ANSI_UART
0000010c	A1804000		pull	r8				; restore r8
0000010d	42900002		lix		r9,2			; loop counter
0000010e	31808000		sl8		r8,r8
0000010f	31808000		sl8		r8,r8
00000110	31808000		sl8		r8,r8
doNextprintByte_ANSI_UART:
00000111	34808000		rol1	r8,r8
00000112	34808000		rol1	r8,r8
00000113	34808000		rol1	r8,r8
00000114	34808000		rol1	r8,r8
00000115	D400001B		bsr		printHexVal_ANSI_UART
00000116	23990001		subi	r9,r9,1
00000117	C7FFFFFA		bnz		doNextprintByte_ANSI_UART
00000118	A1904000		pull	r9
00000119	A1804000		pull	r8
0000011a	A1704000		pull	PC
	
;
; printByte_ANSI
; r8 contains the char value to print
;

printByte_ANSI:
0000011b	A0408000		push	r8
0000011c	A0409000		push	r9
0000011d	A0408000		push	r8				; temporarily save r8
0000011e	A1804000		pull	r8				; restore r8
0000011f	42900002		lix		r9,2			; loop counter
00000120	31808000		sl8		r8,r8
00000121	31808000		sl8		r8,r8
00000122	31808000		sl8		r8,r8
doNextprintByte_ANSI:
00000123	34808000		rol1	r8,r8
00000124	34808000		rol1	r8,r8
00000125	34808000		rol1	r8,r8
00000126	34808000		rol1	r8,r8
00000127	D4000014		bsr		printHexVal_ANSI
00000128	23990001		subi	r9,r9,1
00000129	C7FFFFFA		bnz		doNextprintByte_ANSI
0000012a	A1904000		pull	r9
0000012b	A1804000		pull	r8
0000012c	A1704000		pull	PC
	
; putChar_ANSI_UART
; write out a character to both 
;	the ANSI screen and the UART

putChar_ANSI_UART:
0000012d	D4FFFF4D		bsr		putChar_ANSI
0000012e	D4FFFF27		bsr		putChar_UART
0000012f	A1704000		pull	PC

;
; printHexVal_ANSI_UART
;

printHexVal_ANSI_UART:
00000130	A0408000		push	r8
00000131	2B88000F		andi	r8,r8,0xf
00000132	39380009		cmpi	r8,9
00000133	CC000004		blt		printHexLetter
00000134	21880030		addi	r8,r8,0x30
00000135	D4FFFFF8		bsr		putChar_ANSI_UART
00000136	C0000003		bra		donePrintHexVal
printHexLetter:
00000137	21880037		addi	r8,r8,0x37		; 'A' - 10
00000138	D4FFFFF5		bsr		putChar_ANSI_UART
donePrintHexVal:
00000139	A1804000		pull	r8
0000013a	A1704000		pull	PC

;
; printHexVal_ANSI_UART
;

printHexVal_ANSI:
0000013b	A0408000		push	r8
0000013c	2B88000F		andi	r8,r8,0xf
0000013d	39380009		cmpi	r8,9
0000013e	CC000004		blt		printHexLetterANSI
0000013f	21880030		addi	r8,r8,0x30
00000140	D4FFFF3A		bsr		putChar_ANSI
00000141	C0000003		bra		donePrintHexValANSI
printHexLetterANSI:
00000142	21880037		addi	r8,r8,0x37		; 'A' - 10
00000143	D4FFFF37		bsr		putChar_ANSI
donePrintHexValANSI:
00000144	A1804000		pull	r8
00000145	A1704000		pull	PC

;
; printString_ANSI_UART - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI_UART:
00000146	A0408000		push	r8					; save r8
00000147	A0406000		push	DAR
00000148	21680000		addi	DAR,r8,0			; set the start of the string
nextChar:
00000149	68806000		ldbp	r8					; get the character01
0000014a	39380000		cmpi	r8,0x0				; Null terminated string
0000014b	D1000003		beq		donePrStr			; done if null
0000014c	D4FFFFE1		bsr		putChar_ANSI_UART	; write out the character
0000014d	C0FFFFFC		bra		nextChar
donePrStr:
0000014e	A1604000		pull	DAR					; restore DAR
0000014f	A1804000		pull	r8					; restore r8
00000150	A1704000		pull	PC					; rts
	
;
; printLinebuffer_ANSI_UART - Print a screen to the current screen position with CRLF at the end
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printLinebuffer_ANSI_UART:
00000151	A0408000		push	r8					; save r8
00000152	A0406000		push	DAR
00000153	21680000		addi	DAR,r8,0x0			; set the start of the string
nextChar2:
00000154	68806000		ldbp	r8					; get the character
00000155	39380000		cmpi	r8,0x0				; Null terminated string
00000156	D1000003		beq		donePrStr2			; done if null
00000157	D4FFFF0D		bsr		printString_ANSI	; write out the character
00000158	C0FFFFFC		bra		nextChar2
donePrStr2:
00000159	D4000004		bsr		newLine_ANSI_UART
0000015a	A1604000		pull	DAR					; restore DAR
0000015b	A1804000		pull	r8					; restore r8
0000015c	A1704000		pull	PC					; rts
	
;
; newLine_ANSI_UART - Print out a newLine_ANSI_UART (CR-LF)
;

newLine_ANSI_UART:
0000015d	A0408000		push	r8
0000015e	4280000A		lix		r8,0x0A				; Line Feed
0000015f	D4FFFFCE		bsr		putChar_ANSI_UART	; Put the character to the screen
00000160	4280000D		lix		r8,0x0D				; Carriage Return
00000161	D4FFFFCC		bsr		putChar_ANSI_UART		; Echo character back to the UART
00000162	A1804000		pull	r8
00000163	A1704000		pull	PC

;
; newLine_ANSI - Print out a newLine_ANSI (CR-LF)
;

newLine_ANSI:
00000164	A0408000		push	r8
00000165	4280000A		lix		r8,0x0A				; Line Feed
00000166	D4FFFF14		bsr		putChar_ANSI	; Put the character to the screen
00000167	4280000D		lix		r8,0x0D				; Carriage Return
00000168	D4FFFF12		bsr		putChar_ANSI	; Echo character back to the UART
00000169	A1804000		pull	r8
0000016a	A1704000		pull	PC

;
; clearScreen_ANSI_UART - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen_ANSI_UART:
0000016b	A0408000		push	r8				; save r8
0000016c	4280001B		lix		r8,0x1b			; ESC
0000016d	D4FFFFC0		bsr		putChar_ANSI_UART
0000016e	4280005B		lix		r8,0x5b			; [
0000016f	D4FFFFBE		bsr		putChar_ANSI_UART
00000170	42800032		lix		r8,0x32			; 2
00000171	D4FFFFBC		bsr		putChar_ANSI_UART
00000172	4280004A		lix		r8,0x4A			; J
00000173	D4FFFFBA		bsr		putChar_ANSI_UART
00000174	A1804000		pull	r8
00000175	A1704000		pull	PC				; rts

	