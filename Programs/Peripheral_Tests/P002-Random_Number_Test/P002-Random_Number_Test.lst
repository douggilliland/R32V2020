;
; P002-Random_Number_Test - Test our random number generator
;

banner:			.string "Random_Number_Test"
keyToStart:		.string "Any key to start"
guessString:	.string "Guess a hex number (0x00-0xFF) : "
; lineBuff is 80 characters long
lineBuff:		.string "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
syntaxError:	.string "*** Bad number error (at a2h_Error) ***"
tooHigh:		.string "Your guess was too high"
tooLow:			.string "Your guess was too low"
gotItRight:		.string "Congratulations, you got it right"
numberOfGuesses: .string "Number of Guesses : "

;
; Test the random number generator
;

main:
00000000	D4000032	bsr		clearScreen_ANSI_UART	; clear both screens
00000001	D400002A	bsr		newLine_ANSI_UART		; UART does not start at the top of the screen
00000002	42800000	lix		r8,banner.lower			; print program banner
00000003	D4000011	bsr		printString_ANSI_UART
00000004	D4000027	bsr		newLine_ANSI_UART		; start 2 lines down
waitForKeyHit:
00000005	D40000E4	bsr		checkForCharAndDiscard	; returns 1 when key was pressed
00000006	39380000	cmpi	r8,0x00					; wait for keypress
00000007	D1FFFFFE	beq		waitForKeyHit
;	bsr		newLine_ANSI_UART		; extra LF to move down
runAgain:
00000008	D4000004	bsr		randomNumber_8bits		; pull random number from counter
00000009	D4000092	bsr		printShort_ANSI_UART
0000000a	D4000021	bsr		newLine_ANSI_UART		; start 2 lines down
0000000b	C0FFFFFA	bra		waitForKeyHit
;
; randomNumber_8bits - Generate a random number - 8-bit value
; 0x3803 is the Processor Instruction Cycle counter
;

randomNumber_8bits:
0000000c	A0405000	push	PAR
0000000d	42503803	lix		PAR,0x3803
0000000e	84805000	lpl		r8
0000000f	32808000	sr1		r8,r8
00000010	32808000	sr1		r8,r8
00000011	2B8800FF	andi	r8,r8,0xff
00000012	A1504000	pull	PAR
00000013	A1704000	pull	PC

;--------------------------------------------------------------------
; ANSI_UART_io.asm

;
; ANSI_UART_io.asm -
;

;
; printString_ANSI_UART - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI_UART:
00000014	A0408000	push	r8					; save r8
00000015	A0406000	push	DAR
00000016	20680000	add		DAR,r8,ZERO			; set the start of the string
nextChar:
00000017	68806000	ldbp	r8					; get the character01
00000018	39380000	cmpi	r8,0x0				; Null terminated string
00000019	D1000003	beq		donePrStr			; done if null
0000001a	D4000023	bsr		write_ANSI_UART	; write out the character
0000001b	C0FFFFFC	bra		nextChar
donePrStr:
0000001c	A1604000	pull	DAR					; restore DAR
0000001d	A1804000	pull	r8					; restore r8
0000001e	A1704000	pull	PC					; rts

;
; printLinebuffer_ANSI_UART - Print a screen to the current screen position with CRLF at the end
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printLinebuffer_ANSI_UART:
0000001f	A0408000	push	r8					; save r8
00000020	A0406000	push	DAR
00000021	21680000	addi	DAR,r8,0x0			; set the start of the string
nextChar2:
00000022	68806000	ldbp	r8					; get the character
00000023	39380000	cmpi	r8,0x0				; Null terminated string
00000024	D1000003	beq		donePrStr2			; done if null
00000025	D4000018	bsr		write_ANSI_UART	; write out the character
00000026	C0FFFFFC	bra		nextChar2
donePrStr2:
00000027	D4000004	bsr		newLine_ANSI_UART
00000028	A1604000	pull	DAR					; restore DAR
00000029	A1804000	pull	r8					; restore r8
0000002a	A1704000	pull	PC					; rts

;
; newLine_ANSI_UART - Print out a newLine_ANSI_UART (CR-LF)
;

newLine_ANSI_UART:
0000002b	A0408000	push	r8
0000002c	4280000A	lix		r8,0x0A				; Line Feed
0000002d	D4000010	bsr		write_ANSI_UART	; Put the character to the screen
0000002e	4280000D	lix		r8,0x0D				; Carriage Return
0000002f	D400000E	bsr		write_ANSI_UART		; Echo character back to the UART
00000030	A1804000	pull	r8
00000031	A1704000	pull	PC

;
; clearScreen_ANSI_UART - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen_ANSI_UART:
00000032	A0408000	push	r8				; save r8
00000033	4280001B	lix		r8,0x1b			; ESC
00000034	D4000009	bsr		write_ANSI_UART
00000035	4280005B	lix		r8,0x5b			; [
00000036	D4000007	bsr		write_ANSI_UART
00000037	42800032	lix		r8,0x32			; 2
00000038	D4000005	bsr		write_ANSI_UART
00000039	4280004A	lix		r8,0x4A			; J
0000003a	D4000003	bsr		write_ANSI_UART
0000003b	A1804000	pull	r8
0000003c	A1704000	pull	PC				; rts

; write_ANSI_UART
; write out a character to both
;	the ANSI screen and the UART

write_ANSI_UART:
0000003d	D4000109	bsr		putChar_ANSI
0000003e	D4000179	bsr		putChar_UART
0000003f	A1704000	pull	PC

;
; asciiToHex_ANSI_UART - Convert a single ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
; Result is returned in r8
;	0x0-0xf - Legal Values
;	'DEAD' - Not hex character
;

asciiToHex_ANSI_UART:
00000040	39380066	cmpi	r8,0x66			; past 'f'
00000041	CC000011	blt		a2h_Error
00000042	39380030	cmpi	r8,0x30			; below '0'
00000043	CF00000F	bgt		a2h_Error
00000044	3938003A	cmpi	r8,0x3A			; '0' - '9'
00000045	CF000009	bgt		gotDigit
00000046	39380041	cmpi	r8,0x41			; ':' - '@'
00000047	CF00000B	bgt		a2h_Error
00000048	39380047	cmpi	r8,0x47			; 'A' - 'F'
00000049	CC000007	blt		gotUpperLetter
0000004a	39380061	cmpi	r8,0x61			; 'G' - 'tick'
0000004b	CC000007	blt		a2h_Error
; Lower case letter
0000004c	23880057	subi	r8,r8,0x57
0000004d	C000000A	bra		doneConvA2H
; number 0-9
gotDigit:
0000004e	23880030	subi	r8,r8,0x30
0000004f	C0000008	bra		doneConvA2H
; A-F
gotUpperLetter:
00000050	23880037	subi	r8,r8,0x37
00000051	C0000006	bra		doneConvA2H
a2h_Error:
00000052	428000A0	lix		r8,syntaxError.lower
00000053	D4FFFFD8	bsr		newLine_ANSI_UART
00000054	D4FFFFC0	bsr		printString_ANSI_UART
00000055	D4FFFFD6	bsr		newLine_ANSI_UART
00000056	4280DEAD	lix		r8,0xDEAD
doneConvA2H:
00000057	A1704000	pull	PC

; hexToSevenSeg_ANSI_UART - Convert a two ASCII digit value into a hex byte
; Passed: r8 points to the start of the hex string
; Returned: r8 contains the hex value of the string
; Put the byte to the Seven Segment Display
;

hexToSevenSeg_ANSI_UART:
00000058	A0409000	push	r9
00000059	A0406000	push	DAR
0000005a	A0405000	push	PAR
0000005b	42900000	lix		r9,0
0000005c	20680000	add		DAR,r8,ZERO		; Address of lineBuff (passed into this routine)
0000005d	68806000	ldbp	r8
0000005e	D4FFFFE2	bsr		asciiToHex_ANSI_UART
0000005f	3938DEAD	cmpi	r8,0xDEAD
00000060	D1000011	beq		badHexVal
00000061	2B88000F	andi	r8,r8,0xf
00000062	28998000	or		r9,r9,r8
00000063	30909000	sl1		r9,r9
00000064	30909000	sl1		r9,r9
00000065	30909000	sl1		r9,r9
00000066	30909000	sl1		r9,r9
00000067	60806000	ldb		r8
00000068	D4FFFFD8	bsr		asciiToHex_ANSI_UART
00000069	3938DEAD	cmpi	r8,0xDEAD
0000006a	D1000007	beq		badHexVal
0000006b	2B88000F	andi	r8,r8,0xf
0000006c	28998000	or		r9,r9,r8
0000006d	42503000	lix		PAR,0x3000		; seven segment display
0000006e	85509000	spl		r9
0000006f	20890000	add		r8,r9,ZERO
00000070	C0000006	bra		valOKDone
badHexVal:
00000071	428000A0	lix		r8,syntaxError.lower
00000072	D4FFFFB9	bsr		newLine_ANSI_UART
00000073	D4FFFFA1	bsr		printString_ANSI_UART
00000074	D4FFFFB7	bsr		newLine_ANSI_UART
00000075	4280DEAD	lix		r8,0xDEAD
valOKDone:
00000076	A1504000	pull	PAR
00000077	A1604000	pull	DAR
00000078	A1904000	pull	r9
00000079	A1704000	pull	PC

;
; printHexVal_ANSI_UART
;

printHexVal_ANSI_UART:
0000007a	A0408000	push	r8
0000007b	2B88000F	andi	r8,r8,0xf
0000007c	39380009	cmpi	r8,9
0000007d	CC000004	blt		printHexLetterANSI_UART
0000007e	21880030	addi	r8,r8,0x30
0000007f	D4FFFFBE	bsr		write_ANSI_UART
00000080	C0000003	bra		doneprintHexValANSI_UART
printHexLetterANSI_UART:
00000081	21880037	addi	r8,r8,0x37		; 'A' - 10
00000082	D4FFFFBB	bsr		write_ANSI_UART
doneprintHexValANSI_UART:
00000083	A1804000	pull	r8
00000084	A1704000	pull	PC

;
; printByte_ANSI_UART
; r8 contains the short value to print
;

printByte_ANSI_UART:
00000085	A0408000	push	r8
00000086	A0409000	push	r9
00000087	A0408000	push	r8				; temporarily save r8
00000088	42800030	lix		r8,0x30			; print 0x
00000089	D400003E	bsr		putChar_ANSI_UART
0000008a	42800078	lix		r8,0x78
0000008b	D400003C	bsr		putChar_ANSI_UART
0000008c	A1804000	pull	r8				; restore r8
0000008d	42900002	lix		r9,2			; loop counter
0000008e	31808000	sl8		r8,r8
0000008f	31808000	sl8		r8,r8
00000090	31808000	sl8		r8,r8
doNextprintByte_ANSI_UART:
00000091	34808000	rol1	r8,r8
00000092	34808000	rol1	r8,r8
00000093	34808000	rol1	r8,r8
00000094	34808000	rol1	r8,r8
00000095	D4FFFFE5	bsr		printHexVal_ANSI_UART
00000096	23990001	subi	r9,r9,1
00000097	C7FFFFFA	bnz		doNextprintByte_ANSI_UART
00000098	A1904000	pull	r9
00000099	A1804000	pull	r8
0000009a	A1704000	pull	PC

;
; printShort_ANSI_UART
; r8 contains the short value to print
;

printShort_ANSI_UART:
0000009b	A0408000	push	r8
0000009c	A0409000	push	r9
0000009d	A040A000	push	r10
0000009e	A0408000	push	r8				; temporarily save r8
0000009f	42800030	lix		r8,0x30
000000a0	D4FFFF9D	bsr		write_ANSI_UART
000000a1	42800078	lix		r8,0x78
000000a2	D4FFFF9B	bsr		write_ANSI_UART
000000a3	A1804000	pull	r8				; restore r8
000000a4	42900004	lix		r9,4			; loop counter
000000a5	31808000	sl8		r8,r8
000000a6	31808000	sl8		r8,r8
doNextprintShortANSI_UART:
000000a7	34808000	rol1	r8,r8
000000a8	34808000	rol1	r8,r8
000000a9	34808000	rol1	r8,r8
000000aa	34808000	rol1	r8,r8
000000ab	D4FFFFCF	bsr		printHexVal_ANSI_UART
000000ac	23990001	subi	r9,r9,1
000000ad	C7FFFFFA	bnz		doNextprintShortANSI_UART
000000ae	A1A04000	pull	r10
000000af	A1904000	pull	r9
000000b0	A1804000	pull	r8
000000b1	A1704000	pull	PC

;
; printLong_ANSI_UART
; r8 contains the long value to print
;

printLong_ANSI_UART:
000000b2	A0408000	push	r8
000000b3	A0409000	push	r9
000000b4	A040A000	push	r10
000000b5	A0408000	push	r8				; temporarily save r8
000000b6	42800030	lix		r8,0x30
000000b7	D4FFFF86	bsr		write_ANSI_UART
000000b8	42800078	lix		r8,0x78
000000b9	D4FFFF84	bsr		write_ANSI_UART
000000ba	A1804000	pull	r8				; restore r8
000000bb	42900008	lix		r9,8			; loop counter
doNextprintLongANSI_UART:
000000bc	34808000	rol1	r8,r8
000000bd	34808000	rol1	r8,r8
000000be	34808000	rol1	r8,r8
000000bf	34808000	rol1	r8,r8
000000c0	D4FFFFBA	bsr		printHexVal_ANSI_UART
000000c1	23990001	subi	r9,r9,1
000000c2	C7FFFFFA	bnz		doNextprintLongANSI_UART
000000c3	A1A04000	pull	r10
000000c4	A1904000	pull	r9
000000c5	A1804000	pull	r8
000000c6	A1704000	pull	PC

; putChar_ANSI_UART
; write out a character to both
;	the ANSI screen and the UART

putChar_ANSI_UART:
000000c7	D400007F	bsr		putChar_ANSI
000000c8	D40000EF	bsr		putChar_UART
000000c9	A1704000	pull	PC
;--------------------------------------------------------------------
; switches.asm

;
; readSws
; switches value returned in r8
; switches are high when pressed
; Switches d0-d2 are the pushbutton switches (inverted in FPGA hardware)
; 	Pushbutton switches are debounced
; Switches d3-10 are the DIP switches (not inverted)
;

readSws:
000000ca	A0405000	push	PAR
000000cb	42502000	lix		PAR,0x2000	; Switches address
000000cc	84805000	lpl		r8			; Read switches into r9
000000cd	2B880FFF	andi	r8,r8,0xfff	; just the switches
000000ce	A1504000	pull	PAR
000000cf	A1704000	pull	PC

;--------------------------------------------------------------------
; ps2.asm - Functions to read the PS/2 keyboard
;
; Address	Function
; x0800 	Latched Keyboard Data
; x0801 	Latched Keyboard Status
; x0802 	Polled Keyboard Data
; x0803 	Polled Keyboard Status
;
; getChar_PS2
; returns character received in r8
;

getChar_PS2:
000000d0	A0405000	push	PAR
000000d1	42500801	lix		PAR,0x0801	; PS/2 Status
waitPS2RxStat:
000000d2	84805000	lpl		r8			; Read Status into r9
000000d3	2B880001	andi 	r8,r8,1
000000d4	C3FFFFFE	bez 	waitPS2RxStat
getCharFromPS2:
000000d5	42500800	lix 	PAR,0x0800
000000d6	84805000	lpl		r8
whilePS2RxStat:
000000d7	A1504000	pull	PAR
000000d8	A1704000	pull	PC

; waitReadPS2_UART
; wait for character from either
;	the PS/2 keyboard or the UART serial
; r8 = read character

waitReadPS2_UART:
000000d9	A0405000	push	PAR
checkCharFromPS2:
000000da	42500801	lix		PAR,0x0801	; PS/2 Status
000000db	84805000	lpl		r8			; Read Status
000000dc	2B880001	andi	r8,r8,0x1	; =1 when char received
000000dd	C3000004	bez 	checkUARTStat
000000de	42500800	lix 	PAR,0x0800	; PS/2 Data
000000df	84805000	lpl		r8
000000e0	C0000007	bra		gotPS2Char
checkUARTStat:
000000e1	42501800	lix		PAR,0x1800	; UART Status
000000e2	84805000	lpl		r8			; Read Status
000000e3	2B880001	andi 	r8,r8,0x1	; =1 when char received
000000e4	C3FFFFF6	bez 	checkCharFromPS2
000000e5	42501801	lix 	PAR,0x1801	; UART Data
000000e6	84805000	lpl		r8
gotPS2Char:
000000e7	A1504000	pull	PAR
000000e8	A1704000	pull	PC

; checkForCharAndDiscard - Check for a character in UART or PS/2
; Discard the character received
; return whether char was present (1) or no char was present (0)

checkForCharAndDiscard:
000000e9	A0405000	push	PAR
000000ea	42500801	lix		PAR,0x0801	; PS/2 Status
000000eb	84805000	lpl		r8			; Read Status
000000ec	2B880001	andi	r8,r8,0x1	; =1 when char received
000000ed	C3000005	bez 	checkUARTStat2
000000ee	42500800	lix 	PAR,0x0800	; PS/2 Data
000000ef	84805000	lpl		r8			; throw away char
000000f0	42800001	lix		r8,0x1
000000f1	C000000A	bra		gotChar
checkUARTStat2:
000000f2	42501800	lix		PAR,0x1800	; UART Status
000000f3	84805000	lpl		r8			; Read Status
000000f4	2B880001	andi 	r8,r8,0x1	; =1 when char received
000000f5	C3000005	bez 	noCharReceived
000000f6	42501801	lix 	PAR,0x1801	; UART Data
000000f7	84805000	lpl		r8
000000f8	42800001	lix		r8,1
000000f9	C0000002	bra		gotChar
noCharReceived:
000000fa	42800000	lix		r8,0
gotChar:
000000fb	A1504000	pull	PAR
000000fc	A1704000	pull	PC

;
; waitCharPolled_PS2 - Check the polled character interface
; wait for a character
; return when a character is present
; returns character received in r8
;

waitCharPolled_PS2:
000000fd	A0405000	push	PAR
000000fe	42500803	lix		PAR,0x0803	; PS/2 Status
waitPS2RxStatPolled:
000000ff	84805000	lpl		r8			; Read Status into r8
00000100	2B880001	andi 	r8,r8,0x1
00000101	C3FFFFFE	bez 	waitPS2RxStatPolled
getCharFromPS2Polled:
00000102	42500802	lix 	PAR,0x0802
00000103	84805000	lpl		r8
whilePS2RxStatPolled:
00000104	A1504000	pull	PAR
00000105	A1704000	pull	PC

;
; checkGetStat_PS2 - Checks the polling status
; Polled interface is active while the keyboard key is pressed
; returns
;	-1 if there is no character,
;	character if there is a character
;

checkGetStat_PS2:
00000106	A0405000	push	PAR
00000107	42500803	lix		PAR,0x0803	; PS/2 Status
00000108	84805000	lpl		r8			; Read Status into r8
00000109	2B880001	andi	r8,r8,0x1
0000010a	C3000004	bez		charNotPresent
0000010b	42500802	lix		PAR,0x0802
0000010c	84805000	lpl		r8
0000010d	C0000002	bra		gotCharIn
charNotPresent:
0000010e	20802000	add		r8,ZERO,MINUS1
gotCharIn:
0000010f	A1504000	pull	PAR
00000110	A1704000	pull	PC
;--------------------------------------------------------------------
; timers.asm

; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
00000111	A0409000	push	r9
00000112	42503802	lix		PAR,0x3802		; address of the mSec counter
00000113	84905000	lpl		r9				; read the peripheral counter into r9
00000114	20898000	add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
00000115	84905000	lpl		r9				; check the elapsed time counter
00000116	38389000	cmp		r8,r9
00000117	CCFFFFFE	blt		loop_delay_mS
00000118	A1904000	pull	r9
00000119	A1704000	pull	PC

;
; delay_uS - delay for the number of uSecs
; pass mSec delay in r8
; Uses routine uses r9 (saved and restored)
;

delay_uS:
0000011a	A0409000	push	r9
0000011b	A0405000	push	PAR
0000011c	42503801	lix		PAR,0x3801		; address of the uSec counter
0000011d	84905000	lpl		r9				; read the peripheral counter into r9
0000011e	20898000	add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_uS:
0000011f	84905000	lpl		r9				; check the elapsed time counter
00000120	38389000	cmp		r8,r9
00000121	CCFFFFFE	blt		loop_delay_uS
00000122	A1504000	pull	PAR
00000123	A1904000	pull	r9
00000124	A1704000	pull	PC

;--------------------------------------------------------------------
; buzzer.asm

;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
00000125	A0408000	push	r8
00000126	42800000	lix		r8,0			; first note is 0
00000127	D400001A	bsr 	setNote
00000128	D4000006	bsr		enableBuzzer
00000129	428000FA	lix		r8,250			; count for 1 Sec
0000012a	D4FFFFE7	bsr		delay_mS		; call delay_ms
0000012b	D400000C	bsr		disableBuzzer
0000012c	A1804000	pull	r8
0000012d	A1704000	pull	PC
;
; enableBuzzer
;

enableBuzzer:
0000012e	A0408000	push	r8
0000012f	A0405000	push	PAR
00000130	42502800	lix		PAR,0x2800
00000131	84805000	lpl		r8
00000132	29880010	ori		r8,r8,0x10
00000133	85508000	spl		r8
00000134	A1504000	pull	PAR
00000135	A1804000	pull	r8
00000136	A1704000	pull	PC

;
; disableBuzzer
;

disableBuzzer:
00000137	A0408000	push	r8
00000138	A0405000	push	PAR
00000139	4290FFEF	lix		r9,0xffef		; Buzzer Disable line
0000013a	42502800	lix		PAR,0x2800
0000013b	84805000	lpl		r8
0000013c	2B88FFEF	andi	r8,r8,0xffef
0000013d	85508000	spl		r8
0000013e	A1504000	pull	PAR
0000013f	A1804000	pull	r8
00000140	A1704000	pull	PC

;--------------------------------------------------------------------
; music.asm

;
; setNote - Set the note
; pass note in r8
; returns note
;

setNote:
00000141	A0405000	push	PAR
00000142	42504000	lix		PAR,0x4000
00000143	85508000	spl		r8
00000144	A1504000	pull	PAR
00000145	A1704000	pull	PC
;--------------------------------------------------------------------
; ANSIScreen.asm

;
; putChar_ANSI - Put a character to the screen
; Character to put to screen is in r8
;

putChar_ANSI:
00000146	A0409000	push	r9
00000147	A0405000	push	PAR
00000148	42500000	lix		PAR,0x0		; UART Status
waitScreenTxStat:
00000149	84905000	lpl		r9			; Read Status into r9
0000014a	2B990002	andi	r9,r9,0x2
0000014b	C3FFFFFE	bez 	waitScreenTxStat
0000014c	42500001	lix 	PAR,0x1
0000014d	85508000	spl		r8			; echo the character
0000014e	A1504000	pull	PAR
0000014f	A1904000	pull	r9
00000150	A1704000	pull	PC

;
; printANSICode - Send the ANSI Escape Sequence
; r8 - points to the string
; This routine supplies the ESC
;

printANSICode:
00000151	A0408000	push	r8
00000152	A0408000	push	r8
00000153	4280001B	lix		r8,0x1b			; ESC
00000154	D4FFFFF2	bsr		putChar_ANSI
00000155	A1804000	pull	r8
00000156	D4000012	bsr		printString_ANSI
00000157	A1804000	pull	r8
00000158	A1704000	pull	PC

;
; printCode_ANSI - Send the ANSI Escape Sequence
; r8 - points to the string
; This routine supplies the ESC
;

printCode_ANSI:
00000159	A0408000	push	r8
0000015a	A0408000	push	r8
0000015b	4280001B	lix		r8,0x1b			; ESC
0000015c	D4FFFFEA	bsr		putChar_ANSI
0000015d	A1804000	pull	r8
0000015e	D400000A	bsr		printString_ANSI
0000015f	A1804000	pull	r8
00000160	A1704000	pull	PC

;
; newLine_ANSI - Print out a newLine_ANSI (CR-LF)
;

newLine_ANSI:
00000161	A0408000	push	r8
00000162	4280000A	lix		r8,0x0A				; Line Feed
00000163	D4FFFFE3	bsr		putChar_ANSI	; Put the character to the screen
00000164	4280000D	lix		r8,0x0D				; Carriage Return
00000165	D4FFFFE1	bsr		putChar_ANSI	; Echo character back to the UART
00000166	A1804000	pull	r8
00000167	A1704000	pull	PC

;
; printString_ANSI - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI:
00000168	A0408000	push	r8					; save r8
00000169	A0406000	push	DAR
0000016a	20680000	add		DAR,r8,ZERO			; set the start of the string
nextCharANSI:
0000016b	68806000	ldbp	r8					; get the character01
0000016c	39380000	cmpi	r8,0x0				; Null terminated string
0000016d	D1000003	beq		donePrANSIStr		; done if null
0000016e	D4FFFFD8	bsr		putChar_ANSI	; write out the character
0000016f	C0FFFFFC	bra		nextCharANSI
donePrANSIStr:
00000170	A1604000	pull	DAR					; restore DAR
00000171	A1804000	pull	r8					; restore r8
00000172	A1704000	pull	PC					; rts

;
; printByte_ANSI
; r8 contains the char value to print
;

printByte_ANSI:
00000173	A0408000	push	r8
00000174	A0409000	push	r9
00000175	A0408000	push	r8				; temporarily save r8
00000176	A1804000	pull	r8				; restore r8
00000177	42900002	lix		r9,2			; loop counter
00000178	31808000	sl8		r8,r8
00000179	31808000	sl8		r8,r8
0000017a	31808000	sl8		r8,r8
doNextprintByte_ANSI:
0000017b	34808000	rol1	r8,r8
0000017c	34808000	rol1	r8,r8
0000017d	34808000	rol1	r8,r8
0000017e	34808000	rol1	r8,r8
0000017f	D4000006	bsr		printHexVal_ANSI
00000180	23990001	subi	r9,r9,1
00000181	C7FFFFFA	bnz		doNextprintByte_ANSI
00000182	A1904000	pull	r9
00000183	A1804000	pull	r8
00000184	A1704000	pull	PC

;
; printHexValANSI
;

printHexVal_ANSI:
00000185	A0408000	push	r8
00000186	2B88000F	andi	r8,r8,0xf
00000187	39380009	cmpi	r8,9
00000188	CC000004	blt		printHexLetterANSI
00000189	21880030	addi	r8,r8,0x30
0000018a	D4FFFFBC	bsr		putChar_ANSI
0000018b	C0000003	bra		donePrintHexValANSI
printHexLetterANSI:
0000018c	21880037	addi	r8,r8,0x37		; 'A' - 10
0000018d	D4FFFFB9	bsr		putChar_ANSI
donePrintHexValANSI:
0000018e	A1804000	pull	r8
0000018f	A1704000	pull	PC

;
; clearScreen_ANSI - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
; No passed value
; Uses r8 (saved during function)
; no return value
;

clearScreen_ANSI:
00000190	A0408000	push	r8				; save r8
00000191	4280001B	lix		r8,0x1b			; ESC
00000192	D4FFFFB4	bsr		putChar_ANSI
00000193	4280005B	lix		r8,0x5b			; [
00000194	D4FFFFB2	bsr		putChar_ANSI
00000195	42800032	lix		r8,0x32			; 2
00000196	D4FFFFB0	bsr		putChar_ANSI
00000197	4280004A	lix		r8,0x4A			; J
00000198	D4FFFFAE	bsr		putChar_ANSI
00000199	A1804000	pull	r8
0000019a	A1704000	pull	PC				; rts

;
; printLong_ANSI
; r8 contains the long value to print
;

printLong_ANSI:
0000019b	A0408000	push	r8
0000019c	A0409000	push	r9
0000019d	A0408000	push	r8				; temporarily save r8
0000019e	42800030	lix		r8,0x30			; print 0x
0000019f	D4FFFFA7	bsr		putChar_ANSI
000001a0	42800078	lix		r8,0x78
000001a1	D4FFFFA5	bsr		putChar_ANSI
000001a2	A1804000	pull	r8				; restore r8
000001a3	42900008	lix		r9,8			; loop counter
doNextprintLong_ANSI:
000001a4	34808000	rol1	r8,r8
000001a5	34808000	rol1	r8,r8
000001a6	34808000	rol1	r8,r8
000001a7	34808000	rol1	r8,r8
000001a8	D4FFFFDD	bsr		printHexVal_ANSI
000001a9	23990001	subi	r9,r9,1
000001aa	C7FFFFFA	bnz		doNextprintLong_ANSI
000001ab	A1904000	pull	r9
000001ac	A1804000	pull	r8
000001ad	A1704000	pull	PC
;--------------------------------------------------------------------
; uart.asm

missingHandshake: .string "*** Run PuTTY and enable hardware handshake ***"

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
000001ae	A0405000	push	PAR
000001af	42501800	lix		PAR,0x1800	; UART Status
waitUartRxStat:
000001b0	84805000	lpl		r8			; Read Status into r8
000001b1	2B880001	andi 	r8,r8,0x1
000001b2	C3FFFFFE	bez 	waitUartRxStat
000001b3	42501801	lix 	PAR,0x1801
000001b4	84805000	lpl		r8
000001b5	A1504000	pull	PAR
000001b6	A1704000	pull	PC

;
; putChar_UART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putChar_UART:
000001b7	A0405000	push	PAR
000001b8	A0408000	push	r8
000001b9	42501800	lix		PAR,0x1800	; UART Status
waitUartTxStat:
000001ba	84805000	lpl		r8			; Read Status into r8
000001bb	2B880002	andi 	r8,r8,0x2
000001bc	C7000005	bnz 	uartRdy
; Remind user to enable HW handshake
; would be better to add a HW handshake timeout
; Since the USB is so much faster it is unlikely this path
;	will be exercised.
; For cards with RS-232 serial this would be a serious concern
; It's more likely that PuTTY needed to be run in HW handshake mode.
handshakeStuck:
000001bd	42800134	lix		r8,missingHandshake.lower
000001be	D4FFFFAA	bsr		printString_ANSI
000001bf	A1804000	pull	r8
000001c0	C0000004	bra		getOut
uartRdy:
000001c1	42501801	lix 	PAR,0x1801
000001c2	A1804000	pull	r8
000001c3	85508000	spl		r8			; echo the character
getOut:
000001c4	A1504000	pull	PAR
000001c5	A1704000	pull	PC

;--------------------------------------------------------------------
; bufferedIO.asm - collection of buffered I/O routines
;
; readToLineBuffer - Reads the UART and fills a buffer with the characters received
; r8 received character - Character received from the UART
; r9 is the input buffer length
; r10 used to test the backspace doesn't go past the start of the buffer
; DAR points to lineBuff current character position
;

readToLineBuffer:
000001c6	A0408000	push	r8
000001c7	A0409000	push	r9
000001c8	A040A000	push	r10
000001c9	A0406000	push	DAR
000001ca	4260004C	lix		DAR,lineBuff.lower	; DAR pointer = start of line buffer
000001cb	4290004F	lix		r9,79				; number of chars in the line buffer
loopReadLine:
000001cc	D4FFFF0D	bsr		waitReadPS2_UART	; Get a character from the UART
000001cd	D4FFFE70	bsr		write_ANSI_UART		; Echo character back to the UART
000001ce	3938000D	cmpi	r8,0x0D				; check if received char was end of line
000001cf	D1000006	beq		gotEOL
000001d0	3938007F	cmpi	r8,0x7F
000001d1	D1000009	beq		gotBackspace
000001d2	69608000	sdbp	r8
000001d3	20992000	add		r9,r9,MINUS1
000001d4	C7FFFFF8	bnz		loopReadLine		; Next char would overflow
; tbd add code for line too long
gotEOL:
000001d5	4280000A	lix		r8,0x0A				; Echo line feed after CR
000001d6	D4FFFE67	bsr		write_ANSI_UART	; Put the character to the screen
000001d7	D4FFFFE0	bsr		putChar_UART		; Echo character back to the UART
000001d8	61600000	sdb		r0					; null at end of line read
000001d9	C0000007	bra		doneHandlingLine
gotBackspace:
000001da	20662000	add		DAR,DAR,MINUS1
000001db	42A0004C	lix		r10,lineBuff.lower	; r10 pointer = start of line buffer
000001dc	383A6000	cmp		r10,DAR
000001dd	CFFFFFEF	bgt		loopReadLine
000001de	216A0000	addi	DAR,r10,0
000001df	C0FFFFED	bra		loopReadLine
doneHandlingLine:
000001e0	A1604000	pull	DAR
000001e1	A1A04000	pull	r10
000001e2	A1904000	pull	r9
000001e3	A1804000	pull	r8
000001e4	A1704000	pull	PC

;
; printLong
; r8 contains the long value to print
;

printLong:
000001e5	A0408000	push	r8
000001e6	A0409000	push	r9
000001e7	A040A000	push	r10
000001e8	A0408000	push	r8				; temporarily save r8
000001e9	42800030	lix		r8,0x30
000001ea	D4FFFE53	bsr		write_ANSI_UART
000001eb	42800078	lix		r8,0x78
000001ec	D4FFFE51	bsr		write_ANSI_UART
000001ed	A1804000	pull	r8				; restore r8
000001ee	42900008	lix		r9,8			; loop counter
doNextPrintLong:
000001ef	34808000	rol1	r8,r8
000001f0	34808000	rol1	r8,r8
000001f1	34808000	rol1	r8,r8
000001f2	34808000	rol1	r8,r8
000001f3	D4000007	bsr		printHexVal
000001f4	23990001	subi	r9,r9,1
000001f5	C7FFFFFA	bnz		doNextPrintLong
000001f6	A1A04000	pull	r10
000001f7	A1904000	pull	r9
000001f8	A1804000	pull	r8
000001f9	A1704000	pull	PC

;
; printHexVal
;

printHexVal:
000001fa	A0408000	push	r8
000001fb	2B88000F	andi	r8,r8,0xf
000001fc	39380009	cmpi	r8,9
000001fd	CC000004	blt		printHexLetter
000001fe	21880030	addi	r8,r8,0x30
000001ff	D4FFFE3E	bsr		write_ANSI_UART
00000200	C0000003	bra		donePrintHexVal
printHexLetter:
00000201	21880037	addi	r8,r8,0x37		; 'A' - 10
00000202	D4FFFE3B	bsr		write_ANSI_UART
donePrintHexVal:
00000203	A1804000	pull	r8
00000204	A1704000	pull	PC

