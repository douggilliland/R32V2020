hello:	.string "R32V2020> "
screenPtr:	.long 0x0000
screenBase:	.long 0x0
; Read UART character and put it to the SVGA Display
start:
00000000	D400001B		bsr	clearScreen
00000001	42800000		lix	r8,0x0			; Move cursor to home position
00000002	D4000034		bsr	setCharPos
readDataMemory:
00000003	41800000		liu	r8,hello.upper
00000004	40800000		lil	r8,hello.lower
00000005	D400000A		bsr	printString
readUartStatus:
00000006	40501800		lil	par,0x1800	; UART Status
waitUartRxChar:
00000007	84905000		lpl	r9			; Read Status into r9
00000008	25991000		and r9,r9,r1
00000009	C3FFFFFE		bez waitUartRxChar
getCharFromUart:
0000000a	40501801		lil par,0x1801
0000000b	84805000		lpl	r8
0000000c	85508000		spl	r8			; echo the character
putCharToScreen:
0000000d	D400001A		bsr	putChar		; put the character to the screen
0000000e	C0FFFFF8		bra	readUartStatus

;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
0000000f	A0408000		push	r8				; save r8
00000010	A0406000		push	DAR
00000011	20680000		add		DAR,r8,ZERO		; set the start of the string
nextChar:
00000012	60806000		ldb		r8				; get the character
00000013	38380000		cmp		r8,ZERO			; Null terminated string
00000014	D1000004		beq		donePrStr		; done if null
00000015	D400002F		bsr		putCharToANSIScreen	; write out the character
00000016	20661000		add		DAR,DAR,r1		; Point to next character
00000017	C0FFFFFB		bra		nextChar
donePrStr:
00000018	A1604000		pull	DAR				; restore DAR
00000019	A1804000		pull	r8				; restore r8
0000001a	A1704000		pull	PC				; rts

;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
;

clearScreen:
0000001b	A0409000		push	r9				; save r9
0000001c	A0408000		push	r8				; save r8
0000001d	42800000		lix	r8,0x0			; set screen position to home
0000001e	D4000018		bsr	setCharPos
0000001f	42800020		lix	r8,0x0020		; fill with spaces
00000020	429007FE		lix r9,0x7FE		; loopCount	(1K minus 1)
looper:
00000021	D4000006		bsr	putChar
00000022	20992000		add r9,r9,MINUS1	; decrement character counter
00000023	D2FFFFFE		bne	looper			; loop until complete
00000024	A1804000		pull	r8
00000025	A1904000		pull	r9
00000026	A1704000		pull	PC				; rts

;
; putChar - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putChar:
00000027	A040A000		push	r10					; save r10
00000028	A0409000		push	r9					; save r9
00000029	A0406000		push	DAR
0000002a	41900000		liu	r9,screenPtr.upper
0000002b	4090000C		lil	r9,screenPtr.lower	; r9 is the ptr to screenPtr
0000002c	20690000		add	DAR,r9,r0			; DAR points to screenPtr
0000002d	64A06000		ldl	r10					; r10 has screenPtr value
0000002e	205A0000		add	PAR,r10,r0			; Set PAR to screenPtr
0000002f	81508000		spb	r8					; write character to screen
00000030	20AA1000		add	r10,r10,ONE			; increment screen pointer
00000031	6560A000		sdl	r10					; save new pointer
00000032	A1604000		pull DAR					; restore r9
00000033	A1904000		pull r9					; restore r9
00000034	A1A04000		pull r10					; restore r10
00000035	A1704000		pull	PC					; rts

; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; screenBase has the base address of the screen memory
; screenPtr contains the address of the current char position

setCharPos:
00000036	A0409000		push	r9						; save r9
00000037	A040A000		push	r10						; save r10
00000038	41A00000		liu	r10,screenBase.upper
00000039	40A00010		lil	r10,screenBase.lower
0000003a	206A0000		add	DAR,r10,ZERO			; DAR points to the screenBase
0000003b	64A06000		ldl	r10						; r10 has the screen base address
0000003c	20A80000		add	r10,r8,ZERO				; add passed position to base
0000003d	41900000		liu	r9,screenPtr.upper
0000003e	4090000C		lil	r9,screenPtr.lower		; r9 is the ptr to screenPtr
0000003f	20690000		add	DAR,r9,ZERO				; DAR points to screenPtr
00000040	6560A000		sdl	r10						; store new screen address
00000041	A1A04000		pull r10						; restore r10
00000042	A1904000		pull r9						; restore r9
00000043	A1704000		pull	PC						; rts
;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
00000044	A0409000		push	r9
00000045	A0405000		push	PAR
00000046	A040A000		push	r10
00000047	42A00002		lix		r10,0x2		; TxReady bit
00000048	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
00000049	84905000		lpl		r9			; Read Status into r9
0000004a	2599A000		and 	r9,r9,r10
0000004b	C3FFFFFE		bez 	waitScreenTxStat
0000004c	42500001		lix 	PAR,0x1
0000004d	85508000		spl		r8			; echo the character
0000004e	A1A04000		pull	r10
0000004f	A1504000		pull	PAR
00000050	A1904000		pull	r9
00000051	A1704000		pull	PC
