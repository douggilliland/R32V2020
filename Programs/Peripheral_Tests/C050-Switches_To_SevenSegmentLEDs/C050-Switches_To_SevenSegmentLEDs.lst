; Read Switches and put to Seven Segment LED Display
hello:		.string "R32V2020> "
screenPtr:	.long 0x0000
screenBase:	.long 0x0

;
; Read Switches and put to the Seven Segment LED Display
;

main:
00000000	D4000046		bsr	clearScreen
00000001	42800000		lix		r8,0x0			; Move cursor to home position
00000002	D4000061		bsr		setCharPos
readDataMemory:
00000003	41800000		liu		r8,hello.upper
00000004	40800000		lil		r8,hello.lower
00000005	D4000035		bsr		printString
loopReadSwitches:
00000006	D400000B		bsr		readSws
00000007	D4000002		bsr		wr7Seg8Dig		; put the switches to the 7 Segment LED
00000008	C0FFFFFE		bra		loopReadSwitches

; wr7Seg8Dig
; passed r8 - value to send to the 7 seg display

wr7Seg8Dig:
00000009	A0405000		push	PAR
0000000a	A0408000		push	r8
0000000b	41500000		liu		PAR,0x0000
0000000c	40503000		lil		PAR,0x3000		; Seven Segment LED lines
0000000d	85508000		spl		r8				; Write out LED bits
0000000e	A1804000		pull	r8
0000000f	A1504000		pull	PAR
00000010	A1704000		pull	PC
	
;
; readSws
; switches value returned in r8
; switches are high when pressed
;

readSws:
00000011	A0405000		push	PAR
00000012	A0409000		push	r9
00000013	42900007		lix		r9,0x7
00000014	41500000		liu		PAR,0x0000
00000015	40502000		lil		PAR,0x2000	; Switches address
00000016	84805000		lpl		r8			; Read switches into r9
00000017	2C889000		xor		r8,r8,r9
00000018	A1904000		pull	r9
00000019	A1504000		pull	PAR
0000001a	A1704000		pull	PC

;
; getPS2Char
; returns character received in r8
;

getPS2Char:
0000001b	A0409000		push	r9
0000001c	A0405000		push	PAR
0000001d	41500000		liu		PAR,0x0000
0000001e	40500801		lil		PAR,0x0801	; PS/2 Status
waitPS2RxStat:
0000001f	84905000		lpl		r9			; Read Status into r9
00000020	2A991000		and 	r9,r9,r1
00000021	C3FFFFFE		bez 	waitPS2RxStat
getCharFromPS2:
00000022	41500000		liu		PAR,0x0000
00000023	40500800		lil 	PAR,0x0800
00000024	84805000		lpl		r8
00000025	41500000		liu		PAR,0x0000
00000026	40500801		lil		PAR,0x0801	; PS/2 Status
whilePS2RxStat:
00000027	A1504000		pull	PAR
00000028	A1904000		pull	r9
00000029	A1704000		pull	PC

;
; putUARTChar - Put a character to the UART
; passed character in r8 is sent out the UART
;

putUARTChar:
0000002a	A0408000		push	r8
0000002b	A0409000		push	r9
0000002c	A040A000		push	r10
0000002d	A0405000		push	PAR
0000002e	40A00002		lil		r10,0x2
0000002f	40501800		lil		PAR,0x1800	; UART Status
waitUartTxStat:
00000030	84905000		lpl		r9			; Read Status into r9
00000031	2A99A000		and 	r9,r9,r10
00000032	C3FFFFFE		bez 	waitUartTxStat
00000033	40501801		lil 	PAR,0x1801
00000034	85508000		spl		r8			; echo the character
00000035	A1504000		pull	PAR
00000036	A1A04000		pull	r10
00000037	A1904000		pull	r9
00000038	A1804000		pull	r8
00000039	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
0000003a	A0408000		push	r8				; save r8
0000003b	A0406000		push	DAR
0000003c	20680000		add		DAR,r8,ZERO		; set the start of the string
nextChar:
0000003d	60806000		ldb		r8				; get the character
0000003e	38380000		cmp		r8,ZERO			; Null terminated string
0000003f	D1000004		beq		donePrStr		; done if null
00000040	D4000033		bsr		putCharToANSIScreen	; write out the character
00000041	20661000		add		DAR,DAR,r1		; Point to next character
00000042	C0FFFFFB		bra		nextChar
donePrStr:
00000043	A1604000		pull	DAR				; restore DAR
00000044	A1804000		pull	r8				; restore r8
00000045	A1704000		pull	PC				; rts

;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
;

clearScreen:
00000046	A0409000		push	r9				; save r9
00000047	A0408000		push	r8				; save r8
00000048	42800000		lix		r8,0x0			; set screen position to home
00000049	D400001A		bsr		setCharPos
0000004a	42800020		lix		r8,0x0020		; fill with spaces
0000004b	429007FE		lix 	r9,0x7FE		; loopCount	(1K minus 1)
looper:
0000004c	D4000006		bsr		putCharToScreen
0000004d	20992000		add 	r9,r9,MINUS1	; decrement character counter
0000004e	D2FFFFFE		bne		looper			; loop until complete
0000004f	A1804000		pull	r8
00000050	A1904000		pull	r9
00000051	A1704000		pull	PC			; rts

;
; putCharToScreen - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToScreen:
00000052	A040A000		push	r10					; save r10
00000053	A0409000		push	r9					; save r9
00000054	A0406000		push	DAR
00000055	A0405000		push	PAR
00000056	41900000		liu		r9,screenPtr.upper
00000057	4090000C		lil		r9,screenPtr.lower	; r9 is the ptr to screenPtr
00000058	20690000		add		DAR,r9,r0			; DAR points to screenPtr
00000059	64A06000		ldl		r10					; r10 has screenPtr value
0000005a	205A0000		add		PAR,r10,r0			; Set PAR to screenPtr
0000005b	81508000		spb		r8					; write character to screen
0000005c	20AA1000		add		r10,r10,ONE			; increment screen pointer
0000005d	6560A000		sdl		r10					; save new pointer
0000005e	A1504000		pull 	PAR					; restore PAR
0000005f	A1604000		pull 	DAR					; restore DAR
00000060	A1904000		pull 	r9					; restore r9
00000061	A1A04000		pull 	r10					; restore r10
00000062	A1704000		pull	PC					; rts

;
; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; screenBase has the base address of the screen memory
; screenPtr contains the address of the current char position
;

setCharPos:
00000063	A0409000		push	r9						; save r9
00000064	A040A000		push	r10						; save r10
00000065	A0406000		push	DAR						; save DAR
00000066	41A00000		liu		r10,screenBase.upper
00000067	40A00010		lil		r10,screenBase.lower
00000068	206A0000		add		DAR,r10,ZERO			; DAR points to the screenBase
00000069	64A06000		ldl		r10						; r10 has the screen base address
0000006a	20A80000		add		r10,r8,ZERO				; add passed position to base
0000006b	41900000		liu		r9,screenPtr.upper
0000006c	4090000C		lil		r9,screenPtr.lower		; r9 is the ptr to screenPtr
0000006d	20690000		add		DAR,r9,ZERO				; DAR points to screenPtr
0000006e	6560A000		sdl		r10						; store new screen address
0000006f	A1604000		pull 	DAR						; restore DAR
00000070	A1A04000		pull 	r10						; restore r10
00000071	A1904000		pull 	r9						; restore r9
00000072	A1704000		pull	PC						; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
00000073	A0409000		push	r9
00000074	A0405000		push	PAR
00000075	A040A000		push	r10
00000076	42A00002		lix		r10,0x2		; TxReady bit
00000077	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
00000078	84905000		lpl		r9			; Read Status into r9
00000079	2A99A000		and 	r9,r9,r10
0000007a	C3FFFFFE		bez 	waitScreenTxStat
0000007b	42500001		lix 	PAR,0x1
0000007c	85508000		spl		r8			; echo the character
0000007d	A1A04000		pull	r10
0000007e	A1504000		pull	PAR
0000007f	A1904000		pull	r9
00000080	A1704000		pull	PC
