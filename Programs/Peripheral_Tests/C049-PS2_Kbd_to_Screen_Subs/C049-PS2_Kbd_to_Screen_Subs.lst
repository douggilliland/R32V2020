; Read PS/2 keyboard character and put it to the Screen
hello:	.string "R32V2020> "
screenPtr:	.long 0x0000
screenBase:	.long 0x0

;
; Read PS/2 character and put it to the SVGA Display
;

main:
00000000	D4000029		bsr	clearScreen
00000001	42800000		lix	r8,0x0			; Move cursor to home position
00000002	D4000044		bsr	setCharPos
readDataMemory:
00000003	41800000		liu	r8,hello.upper
00000004	40800000		lil	r8,hello.lower
00000005	D400005F		bsr	printString
loopPS2Read_ScreenWrite:
00000006	D4000004		bsr	getPS2Char
00000007	D400002E		bsr	putCharToScreen	; put the character to the screen
00000008	D4000011		bsr	putUARTChar
00000009	C0FFFFFD		bra	loopPS2Read_ScreenWrite

;
; getPS2Char
; returns character received in r8
;

getPS2Char:
0000000a	A0409000		push	r9
0000000b	A0405000		push	PAR
0000000c	41500000		liu	PAR,0x0000
0000000d	40500801		lil	PAR,0x0801	; PS/2 Status
waitPS2RxStat:
0000000e	84905000		lpl	r9			; Read Status into r9
0000000f	2A991000		and r9,r9,r1
00000010	C3FFFFFE		bez waitPS2RxStat
getCharFromPS2:
00000011	41500000		liu	PAR,0x0000
00000012	40500800		lil PAR,0x0800
00000013	84805000		lpl	r8
00000014	41500000		liu	PAR,0x0000
00000015	40500801		lil	PAR,0x0801	; PS/2 Status
whilePS2RxStat:
00000016	A1504000		pull	PAR
00000017	A1904000		pull	r9
00000018	A1704000		pull	PC

;
; putUARTChar - Put a character to the UART
; passed character in r8 is sent out the UART
;

putUARTChar:
00000019	A0408000		push	r8
0000001a	A0409000		push	r9
0000001b	A040A000		push	r10
0000001c	A0405000		push	PAR
0000001d	40A00002		lil	r10,0x2
0000001e	40501800		lil	PAR,0x1800	; UART Status
waitUartTxStat:
0000001f	84905000		lpl	r9			; Read Status into r9
00000020	2A99A000		and r9,r9,r10
00000021	C3FFFFFE		bez waitUartTxStat
00000022	40501801		lil PAR,0x1801
00000023	85508000		spl	r8			; echo the character
00000024	A1504000		pull	PAR
00000025	A1A04000		pull	r10
00000026	A1904000		pull	r9
00000027	A1804000		pull	r8
00000028	A1704000		pull	PC
	

;
; clearScreen - Clear the screen routine
; Fills the screen with space characters
; Screen is memory mapped
; Screen is 64 columns by 32 rows = 2KB total space
; Return address (-1) is on the stack - need to increment before return
;

clearScreen:
00000029	A0409000		push	r9				; save r9
0000002a	A0408000		push	r8				; save r8
0000002b	42800000		lix	r8,0x0			; set screen position to home
0000002c	D400001A		bsr	setCharPos
0000002d	42800020		lix	r8,0x0020		; fill with spaces
0000002e	429007FE		lix r9,0x7FE		; loopCount	(1K minus 1)
looper:
0000002f	D4000006		bsr	putCharToScreen
00000030	20992000		add r9,r9,MINUS1	; decrement character counter
00000031	D2FFFFFE		bne	looper			; loop until complete
00000032	A1804000		pull	r8
00000033	A1904000		pull	r9
00000034	A1704000		pull	PC				; rts

;
; putCharToScreen - Put a character to the screen and increment the address
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToScreen:
00000035	A040A000		push	r10					; save r10
00000036	A0409000		push	r9					; save r9
00000037	A0406000		push	DAR
00000038	A0405000		push	PAR
00000039	41900000		liu	r9,screenPtr.upper
0000003a	4090000C		lil	r9,screenPtr.lower	; r9 is the ptr to screenPtr
0000003b	20690000		add	DAR,r9,r0			; DAR points to screenPtr
0000003c	64A06000		ldl	r10					; r10 has screenPtr value
0000003d	205A0000		add	PAR,r10,r0			; Set PAR to screenPtr
0000003e	81508000		spb	r8					; write character to screen
0000003f	20AA1000		add	r10,r10,ONE			; increment screen pointer
00000040	6560A000		sdl	r10					; save new pointer
00000041	A1504000		pull PAR					; restore PAR
00000042	A1604000		pull DAR					; restore DAR
00000043	A1904000		pull r9					; restore r9
00000044	A1A04000		pull r10					; restore r10
00000045	A1704000		pull	PC					; rts

;
; setCharPos - Move to x,y position
; x,y value is passed in r8
;	First 6 least significant bits (0-63 columns)
; 	Next 5 bits (row on the screen)
; screenBase has the base address of the screen memory
; screenPtr contains the address of the current char position
;

setCharPos:
00000046	A0409000		push	r9						; save r9
00000047	A040A000		push	r10						; save r10
00000048	A0406000		push	DAR						; save DAR
00000049	41A00000		liu	r10,screenBase.upper
0000004a	40A00010		lil	r10,screenBase.lower
0000004b	206A0000		add	DAR,r10,ZERO			; DAR points to the screenBase
0000004c	64A06000		ldl	r10						; r10 has the screen base address
0000004d	20A80000		add	r10,r8,ZERO				; add passed position to base
0000004e	41900000		liu	r9,screenPtr.upper
0000004f	4090000C		lil	r9,screenPtr.lower		; r9 is the ptr to screenPtr
00000050	20690000		add	DAR,r9,ZERO				; DAR points to screenPtr
00000051	6560A000		sdl	r10						; store new screen address
00000052	A1604000		pull DAR						; restore DAR
00000053	A1A04000		pull r10						; restore r10
00000054	A1904000		pull r9						; restore r9
00000055	A1704000		pull	PC						; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
00000056	A0409000		push	r9
00000057	A0405000		push	PAR
00000058	A040A000		push	r10
00000059	42A00002		lix		r10,0x2		; TxReady bit
0000005a	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
0000005b	84905000		lpl		r9			; Read Status into r9
0000005c	2A99A000		and 	r9,r9,r10
0000005d	C3FFFFFE		bez 	waitScreenTxStat
0000005e	42500001		lix 	PAR,0x1
0000005f	85508000		spl		r8			; echo the character
00000060	A1A04000		pull	r10
00000061	A1504000		pull	PAR
00000062	A1904000		pull	r9
00000063	A1704000		pull	PC

;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
00000064	A0408000		push	r8					; save r8
00000065	A0406000		push	DAR
00000066	20680000		add		DAR,r8,ZERO			; set the start of the string
nextChar:
00000067	68806000		ldbp	r8					; get the character01
00000068	38380000		cmp		r8,ZERO				; Null terminated string
00000069	D1000003		beq		donePrStr			; done if null
0000006a	D4FFFFEC		bsr		putCharToANSIScreen	; write out the character
0000006b	C0FFFFFC		bra		nextChar
donePrStr:
0000006c	A1604000		pull	DAR					; restore DAR
0000006d	A1804000		pull	r8					; restore r8
0000006e	A1704000		pull	PC					; rts
	