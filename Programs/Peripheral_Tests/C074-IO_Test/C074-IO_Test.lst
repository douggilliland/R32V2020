;
; C074-IO_Test - Read a line from the UART serial input
; Echo line to the serial port and to the screen
; Parse the line
;

prompt:			.string "R32V2020> "
; lineBuff is 80 characters long
lineBuff:		.string "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
syntaxError:	.string "Syntax error"
runningString:	.string "Running..."
hitAnyKey:		.string "Hit any key to exit..."
menuItem_01:	.string "01-Ring LED Test      "
menuItem_02:	.string "02-7 Segment LED Test "
menuItem_03:	.string "03-Pushbutton Test    "
menuItem_04:	.string "04-DIP Switch Test    "
menuItem_05:	.string "05-ANSI Screen Test   "
menuItem_06:	.string "06-Serial Port Test   "
menuItem_07:	.string "07-MCP23008 I2C Test  "
menuItem_08:	.string "08-MCP4231 SPI Test   "
menuItem_09:	.string "09-PS/2 Keyboard Test "
menuItem_10:	.string "10-Buzzer Test        "
menuItem_11:	.string "11-Timers Test        "
menuItem_12:	.string "12-TBD Test           "

;
; Read a line from the UART and parse the line
;

main:
00000000	D40002E8		bsr		clearANSIScreenAndUART
00000001	D4000004		bsr		printMenu
00000002	D400001F		bsr		readToLineBuffer
00000003	D400003D		bsr		parseLine
00000004	C0FFFFFC		bra		main

;
; printMenu - Print the menu
;

printMenu:
00000005	A0408000		push	r8
00000006	D40002D4		bsr		newLine_ANSI_UART
00000007	42800094		lix		r8,menuItem_01.lower
00000008	D40002B0		bsr		printString_ANSI_UART
00000009	428000AC		lix		r8,menuItem_02.lower
0000000a	D40002AE		bsr		printString_ANSI_UART
0000000b	428000C4		lix		r8,menuItem_03.lower
0000000c	D40002C2		bsr		printLinebuffer_ANSI_UART
0000000d	428000DC		lix		r8,menuItem_04.lower
0000000e	D40002AA		bsr		printString_ANSI_UART
0000000f	428000F4		lix		r8,menuItem_05.lower
00000010	D40002A8		bsr		printString_ANSI_UART
00000011	4280010C		lix		r8,menuItem_06.lower
00000012	D40002BC		bsr		printLinebuffer_ANSI_UART
00000013	42800124		lix		r8,menuItem_07.lower
00000014	D40002A4		bsr		printString_ANSI_UART
00000015	4280013C		lix		r8,menuItem_08.lower
00000016	D40002A2		bsr		printString_ANSI_UART
00000017	42800154		lix		r8,menuItem_09.lower
00000018	D40002B6		bsr		printLinebuffer_ANSI_UART
00000019	4280016C		lix		r8,menuItem_10.lower
0000001a	D400029E		bsr		printString_ANSI_UART
0000001b	42800184		lix		r8,menuItem_11.lower
0000001c	D40002B2		bsr		printLinebuffer_ANSI_UART
0000001d	42800000		lix		r8,prompt.lower
0000001e	D400029A		bsr		printString_ANSI_UART
0000001f	A1804000		pull	r8
00000020	A1704000		pull	PC

;
; readToLineBuffer - Reads the UART and fills a buffer with the characters received
; r8 received character - Character received from the UART
; r9 is the input buffer length
; r10 used to test the backspace doesn't go past the start of the buffer
; DAR points to lineBuff current character position
;

readToLineBuffer:
00000021	A0408000		push	r8
00000022	A0409000		push	r9
00000023	A040A000		push	r10
00000024	A0406000		push	DAR
00000025	4260000C		lix		DAR,lineBuff.lower	; DAR pointer = start of line buffer
00000026	4290004F		lix		r9,79				; number of chars in the line buffer
loopReadLine:
00000027	D400030D		bsr		waitReadPS2_UART		; Get a character from the UART
00000028	D4000330		bsr		writeANSI_UART		; Echo character back to the UART
00000029	3938000D		cmpi	r8,0x0D				; check if received char was end of line
0000002a	D1000006		beq		gotEOL
0000002b	3938007F		cmpi	r8,0x7F
0000002c	D1000009		beq		gotBackspace
0000002d	69608000		sdbp	r8
0000002e	20992000		add		r9,r9,MINUS1
0000002f	C7FFFFF8		bnz		loopReadLine		; Next char would overflow
	; tbd add code for line too long	
gotEOL:
00000030	4280000A		lix		r8,0x0A				; Echo line feed after CR
00000031	D4000327		bsr		writeANSI_UART	; Put the character to the screen
00000032	D400027B		bsr		putCharToUART		; Echo character back to the UART
00000033	61600000		sdb		r0					; null at end of line read
00000034	C0000007		bra		doneHandlingLine
gotBackspace:
00000035	20662000		add		DAR,DAR,MINUS1
00000036	42A0000C		lix		r10,lineBuff.lower	; r10 pointer = start of line buffer
00000037	383A6000		cmp		r10,DAR
00000038	CFFFFFEF		bgt		loopReadLine
00000039	216A0000		addi	DAR,r10,0
0000003a	C0FFFFED		bra		loopReadLine
doneHandlingLine:
0000003b	A1604000		pull	DAR
0000003c	A1A04000		pull	r10
0000003d	A1904000		pull	r9
0000003e	A1804000		pull	r8
0000003f	A1704000		pull	PC

;
; parseLine - 
; line is in lineBuff
;

parseLine:
00000040	A0408000		push	r8
00000041	4280000C		lix		r8,lineBuff.lower
00000042	D4000234		bsr		hexToSevenSeg
; Check to see if the command is 0x01
00000043	39380001		cmpi	r8,0x01
00000044	D2000003		bne		skipTo2
00000045	D4000032		bsr		testRingLEDs
00000046	C000002D		bra		doneTests
; Check to see if the command is 0x02
skipTo2:
00000047	39380002		cmpi	r8,0x02
00000048	D2000003		bne		skipTo3
00000049	D400004C		bsr		test7Segs
0000004a	C0000029		bra		doneTests
; Check to see if the command is 0x03
skipTo3:
0000004b	39380003		cmpi	r8,0x03
0000004c	D2000003		bne		skipTo4
0000004d	D4000067		bsr		testPushbuttons
0000004e	C0000025		bra		doneTests
; Check to see if the command is 0x04
skipTo4:
0000004f	39380004		cmpi	r8,0x04
00000050	D2000003		bne		skipTo5
00000051	D4000083		bsr		testDIPSwitches
00000052	C0000021		bra		doneTests
; Check to see if the command is 0x05
skipTo5:
00000053	39380005		cmpi	r8,0x05
00000054	D2000003		bne		skipTo6
00000055	D40000A5		bsr		testANSIScreen
00000056	C000001D		bra		doneTests
; Check to see if the command is 0x06
skipTo6:
00000057	39380006		cmpi	r8,0x06
00000058	D2000003		bne		skipTo7
00000059	D4000101		bsr		testSerialPort
0000005a	C0000019		bra		doneTests
; Check to see if the command is 0x07
skipTo7:
0000005b	39380007		cmpi	r8,0x07
0000005c	D2000003		bne		skipTo8
0000005d	D4000109		bsr		testMCP23008
0000005e	C0000015		bra		doneTests
; Check to see if the command is 0x08
skipTo8:
0000005f	39380008		cmpi	r8,0x08
00000060	D2000003		bne		skipTo9
00000061	D400019A		bsr		testMCP4231
00000062	C0000011		bra		doneTests
; Check to see if the command is 0x09
skipTo9:
00000063	39380009		cmpi	r8,0x09
00000064	D2000003		bne		skipTo10
00000065	D40001C3		bsr		testPS2Keyboard
00000066	C000000D		bra		doneTests
; Check to see if the command is 0x10
skipTo10:
00000067	39380010		cmpi	r8,0x10
00000068	D2000003		bne		skipTo11
00000069	D40001CA		bsr		testBuzzer
0000006a	C0000009		bra		doneTests
;
skipTo11:
0000006b	39380011		cmpi	r8,0x11
0000006c	D2000003		bne		skipTo12
0000006d	D40001D1		bsr		testTBD
0000006e	C0000005		bra		doneTests

skipTo12:
0000006f	A0408000		push	r8
00000070	42800060		lix		r8,syntaxError.lower
00000071	D4000247		bsr		printString_ANSI_UART
00000072	A1804000		pull	r8
doneTests:
00000073	428007D0		lix		r8,2000
00000074	D40002AB		bsr		delay_mS
00000075	A1804000		pull	r8
00000076	A1704000		pull	PC
	
;
; Test Ring LEDs
;

testRingLEDs:
00000077	A0408000		push	r8
00000078	42800070		lix		r8,runningString.lower
00000079	D400023F		bsr		printString_ANSI_UART
0000007a	42800094		lix		r8,menuItem_01.lower
0000007b	D4000253		bsr		printLinebuffer_ANSI_UART
0000007c	4280007C		lix		r8,hitAnyKey.lower
0000007d	D400023B		bsr		printString_ANSI_UART
reload:
0000007e	42800001		lix		r8,1
loopLEDRing:
0000007f	D400000F		bsr		putValueToRingLEDs	; put the switches to the 7 Segment LED
00000080	A0408000		push	r8
00000081	428000FA		lix		r8,250				; wait for 1 second
00000082	D400029D		bsr		delay_mS
00000083	A1804000		pull	r8
00000084	30808000		sl1		r8,r8
00000085	39380801		cmpi	r8,0x0801
00000086	D2FFFFF9		bne		loopLEDRing
00000087	42800000		lix		r8,0
00000088	D4000006		bsr		putValueToRingLEDs	; put the switches to the 7 Segment LED
00000089	D40002BB		bsr		checkForCharAndDiscard
0000008a	39380000		cmpi	r8,0
0000008b	D1FFFFF3		beq		reload
0000008c	A1804000		pull	r8
0000008d	A1704000		pull	PC
	
; putValueToRingLEDs
; passed r8 - value to send to the ring LEDs

putValueToRingLEDs:
0000008e	A0405000		push	PAR
0000008f	A0408000		push	r8
00000090	42504800		lix		PAR,0x4800		; Ring LED address
00000091	85508000		spl		r8				; Write out LED bits
00000092	A1804000		pull	r8
00000093	A1504000		pull	PAR
00000094	A1704000		pull	PC

;
; Seven Segment Display Test
;

test7Segs:
00000095	A0408000		push	r8
00000096	42800070		lix		r8,runningString.lower
00000097	D4000221		bsr		printString_ANSI_UART
00000098	428000AC		lix		r8,menuItem_02.lower
00000099	D4000235		bsr		printLinebuffer_ANSI_UART
0000009a	4280007C		lix		r8,hitAnyKey.lower
0000009b	D400021D		bsr		printString_ANSI_UART
rerun7Segs:
0000009c	41801234		liu		r8,0x1234
0000009d	40805678		lil		r8,0x5678
0000009e	D400000F		bsr		wr7Seg8Dig
0000009f	428007D0		lix		r8,2000
000000a0	D400027F		bsr		delay_mS
000000a1	4180ABCD		liu		r8,0xABCD
000000a2	4080EF12		lil		r8,0xEF12
000000a3	D400000A		bsr		wr7Seg8Dig
000000a4	428007D0		lix		r8,2000
000000a5	D400027A		bsr		delay_mS
000000a6	42800000		lix		r8,0x0
000000a7	D4000006		bsr		wr7Seg8Dig
000000a8	D400029C		bsr		checkForCharAndDiscard
000000a9	39380000		cmpi	r8,0
000000aa	D1FFFFF2		beq		rerun7Segs
000000ab	A1804000		pull	r8
000000ac	A1704000		pull	PC
	
; wr7Seg8Dig
; passed r8 - value to send to the 7 seg display

wr7Seg8Dig:
000000ad	A0405000		push	PAR
000000ae	A0408000		push	r8
000000af	42503000		lix		PAR,0x3000		; Seven Segment LED lines
000000b0	85508000		spl		r8				; Write out LED bits
000000b1	A1804000		pull	r8
000000b2	A1504000		pull	PAR
000000b3	A1704000		pull	PC
	
;
; Pushbutton Test
; r8 used for temporary variables
; r9 stores the previous button value
;

testPushbuttons:
000000b4	A0408000		push	r8
000000b5	A0409000		push	r9
000000b6	42800070		lix		r8,runningString.lower
000000b7	D4000201		bsr		printString_ANSI_UART
000000b8	428000C4		lix		r8,menuItem_03.lower
000000b9	D4000215		bsr		printLinebuffer_ANSI_UART
000000ba	4280007C		lix		r8,hitAnyKey.lower
000000bb	D4000213		bsr		printLinebuffer_ANSI_UART
000000bc	42900000		lix		r9,0x0
loopSwRead:
000000bd	D4000287		bsr		checkForCharAndDiscard
000000be	39380001		cmpi	r8,1
000000bf	D100000C		beq		doneWithSwitches
000000c0	D400000E		bsr		readSws		; returns switches and pushbuttons in r8
000000c1	2B880007		andi	r8,r8,0x7	; just the pushbuttons
000000c2	21880030		addi	r8,r8,0x30
000000c3	38389000		cmp		r8,r9
000000c4	D1FFFFF9		beq		loopSwRead
000000c5	21980000		addi	r9,r8,0
000000c6	D4000292		bsr		writeANSI_UART
000000c7	D4000213		bsr		newLine_ANSI_UART
000000c8	428000FA		lix		r8,250
000000c9	D4000256		bsr		delay_mS
000000ca	C0FFFFF3		bra		loopSwRead
doneWithSwitches:
000000cb	A1904000		pull	r9
000000cc	A1804000		pull	r8
000000cd	A1704000		pull	PC
	
;
; readSws
; switches value returned in r8
; switches are high when pressed
; Switches d0-d2 are the pushbutton switches (inverted in FPGA hardware)
; 	Pushbutton switches are debounced
; Switches d3-10 are the DIP switches (not inverted)
;

readSws:
000000ce	A0405000		push	PAR
000000cf	42502000		lix		PAR,0x2000	; Switches address
000000d0	84805000		lpl		r8			; Read switches into r9
000000d1	2B880FFF		andi	r8,r8,0xfff	; just the switches
000000d2	A1504000		pull	PAR
000000d3	A1704000		pull	PC
	
;
; DIP Switch Test
;

testDIPSwitches:
000000d4	A0408000		push	r8
000000d5	A0409000		push	r9
000000d6	42800070		lix		r8,runningString.lower
000000d7	D40001E1		bsr		printString_ANSI_UART
000000d8	428000DC		lix		r8,menuItem_04.lower
000000d9	D40001F5		bsr		printLinebuffer_ANSI_UART
000000da	4280007C		lix		r8,hitAnyKey.lower
000000db	D40001F3		bsr		printLinebuffer_ANSI_UART
000000dc	42900000		lix		r9,0x0
000000dd	42800000		lix		r8,0x0
000000de	D4FFFFCF		bsr		wr7Seg8Dig
loopSwRead2:
000000df	D4000265		bsr		checkForCharAndDiscard
000000e0	39380001		cmpi	r8,1
000000e1	D100000E		beq		doneWithDIPSwitches
000000e2	D4FFFFEC		bsr		readSws		; returns switches and pushbuttons in r8
000000e3	32808000		sr1		r8,r8
000000e4	32808000		sr1		r8,r8
000000e5	32808000		sr1		r8,r8
000000e6	32808000		sr1		r8,r8
000000e7	2B8800FF		andi	r8,r8,0xff
000000e8	38389000		cmp		r8,r9
000000e9	D1FFFFF6		beq		loopSwRead2
000000ea	21980000		addi	r9,r8,0
000000eb	D4FFFFC2		bsr		wr7Seg8Dig
000000ec	428000FA		lix		r8,250
000000ed	D4000232		bsr		delay_mS
000000ee	C0FFFFF1		bra		loopSwRead2
doneWithDIPSwitches:
000000ef	A1904000		pull	r9
000000f0	A1804000		pull	r8
000000f1	A1704000		pull	PC
	
;
; printANSICode - Send the ANSI Escape Sequence
; r8 - points to the string
; This routine supplies the ESC
;

printANSICode:
000000f2	A0408000		push	r8
000000f3	A0408000		push	r8
000000f4	4280001B		lix		r8,0x1b			; ESC
000000f5	D40001FE		bsr		putCharToANSIScreen
000000f6	A1804000		pull	r8
000000f7	D40001CC		bsr		printString_ANSI
000000f8	A1804000		pull	r8
000000f9	A1704000		pull	PC

;
; ANSI Screen Test
;

redString:		.string "Red "
greenString:	.string "Green "
blueString:		.string "Blue "
cyanString:		.string "Cyan "
magentaString:	.string "Magenta "
yellowString:	.string "Yellow "
blackString:	.string "Black "
grayString:		.string "Gray "
onString:		.string "on "
brightString:	.string "Bright "

testANSIScreen:
000000fa	A0408000		push	r8
000000fb	42800070		lix		r8,runningString.lower
000000fc	D40001BC		bsr		printString_ANSI_UART
000000fd	428000F4		lix		r8,menuItem_05.lower
000000fe	D40001D0		bsr		printLinebuffer_ANSI_UART
000000ff	42800020		lix		r8,0x20			; start with a space
anotherCharT5:
00000100	D40001F3		bsr		putCharToANSIScreen
00000101	21880001		addi	r8,r8,1
00000102	393800FF		cmpi	r8,0xFF
00000103	D2FFFFFD		bne		anotherCharT5
00000104	D40001DD		bsr		newLine_ANSI
; Test screen character colors
; Light characters
defaultColors:	.string "[0;1m"
00000105	42800204		lix		r8,defaultColors.lower
00000106	D4FFFFEC		bsr		printANSICode
redChars:	.string	"[31;22m"
00000107	4280020C		lix		r8,redChars.lower
00000108	D4FFFFEA		bsr		printANSICode
00000109	428001B4		lix		r8,redString.lower
0000010a	D40001B9		bsr		printString_ANSI
grnChars:	.string	"[32m"
0000010b	42800214		lix		r8,grnChars.lower
0000010c	D4FFFFE6		bsr		printANSICode
0000010d	428001BC		lix		r8,greenString.lower
0000010e	D40001B5		bsr		printString_ANSI
bluChars:	.string	"[34m"
0000010f	4280021C		lix		r8,bluChars.lower
00000110	D4FFFFE2		bsr		printANSICode
00000111	428001C4		lix		r8,blueString.lower
00000112	D40001B1		bsr		printString_ANSI
cyanChars:	.string	"[36m"
00000113	42800224		lix		r8,cyanChars.lower
00000114	D4FFFFDE		bsr		printANSICode
00000115	428001CC		lix		r8,cyanString.lower
00000116	D40001AD		bsr		printString_ANSI
magChars:	.string	"[35m"
00000117	4280022C		lix		r8,magChars.lower
00000118	D4FFFFDA		bsr		printANSICode
00000119	428001D4		lix		r8,magentaString.lower
0000011a	D40001A9		bsr		printString_ANSI
yelChars:	.string	"[33m"
0000011b	42800234		lix		r8,yelChars.lower
0000011c	D4FFFFD6		bsr		printANSICode
0000011d	428001E0		lix		r8,yellowString.lower
0000011e	D40001A5		bsr		printString_ANSI
0000011f	D40001C2		bsr		newLine_ANSI
00000120	42800204		lix		r8,defaultColors.lower
00000121	D4FFFFD1		bsr		printANSICode
; Bright characters
redChars2:	.string	"[31;1m"
00000122	4280023C		lix		r8,redChars2.lower
00000123	D4FFFFCF		bsr		printANSICode
00000124	428001B4		lix		r8,redString.lower
00000125	D400019E		bsr		printString_ANSI
00000126	42800214		lix		r8,grnChars.lower
00000127	D4FFFFCB		bsr		printANSICode
00000128	428001BC		lix		r8,greenString.lower
00000129	D400019A		bsr		printString_ANSI
0000012a	4280021C		lix		r8,bluChars.lower
0000012b	D4FFFFC7		bsr		printANSICode
0000012c	428001C4		lix		r8,blueString.lower
0000012d	D4000196		bsr		printString_ANSI
0000012e	42800224		lix		r8,cyanChars.lower
0000012f	D4FFFFC3		bsr		printANSICode
00000130	428001CC		lix		r8,cyanString.lower
00000131	D4000192		bsr		printString_ANSI
00000132	4280022C		lix		r8,magChars.lower
00000133	D4FFFFBF		bsr		printANSICode
00000134	428001D4		lix		r8,magentaString.lower
00000135	D400018E		bsr		printString_ANSI
00000136	42800234		lix		r8,yelChars.lower
00000137	D4FFFFBB		bsr		printANSICode
00000138	428001E0		lix		r8,yellowString.lower
00000139	D400018A		bsr		printString_ANSI
0000013a	D40001A7		bsr		newLine_ANSI
0000013b	42800204		lix		r8,defaultColors.lower
0000013c	D4FFFFB6		bsr		printANSICode
; Red on Black
redOnBlackANSI:	.string	"[27;40;31m"
0000013d	42800244		lix		r8,redOnBlackANSI.lower
0000013e	D4FFFFB4		bsr		printANSICode
0000013f	428001B4		lix		r8,redString.lower
00000140	D4000183		bsr		printString_ANSI
00000141	428001F8		lix		r8,onString.lower
00000142	D4000181		bsr		printString_ANSI
00000143	428001F0		lix		r8,grayString.lower
00000144	D400017F		bsr		printString_ANSI
; Bright Yellow on Green
brtYelOnGrn:	.string "[93;42m"
00000145	42800250		lix		r8,brtYelOnGrn.lower
00000146	D4FFFFAC		bsr		printANSICode
00000147	428001FC		lix		r8,brightString.lower
00000148	D400017B		bsr		printString_ANSI
00000149	428001E0		lix		r8,yellowString.lower
0000014a	D4000179		bsr		printString_ANSI
0000014b	428001F8		lix		r8,onString.lower
0000014c	D4000177		bsr		printString_ANSI
0000014d	428001BC		lix		r8,greenString.lower
0000014e	D4000175		bsr		printString_ANSI
; Reset to default colors
0000014f	42800204		lix		r8,defaultColors.lower
00000150	D4FFFFA2		bsr		printANSICode
00000151	D4000190		bsr		newLine_ANSI
; Hit any key to continue
00000152	D4000188		bsr		newLine_ANSI_UART
00000153	4280007C		lix		r8,hitAnyKey.lower
00000154	D400017A		bsr		printLinebuffer_ANSI_UART
keepCheckCharIn:
00000155	D40001EF		bsr		checkForCharAndDiscard
00000156	39380000		cmpi	r8,0
00000157	D1FFFFFE		beq		keepCheckCharIn
00000158	A1804000		pull	r8
00000159	A1704000		pull	PC
	
;
; Serial Port Test
;

testSerialPort:
0000015a	A0408000		push	r8
0000015b	42800070		lix		r8,runningString.lower
0000015c	D400015C		bsr		printString_ANSI_UART
0000015d	4280010C		lix		r8,menuItem_06.lower
0000015e	D4000170		bsr		printLinebuffer_ANSI_UART
0000015f	42800020		lix		r8,0x20			; start with a space
anotherCharT6:
00000160	D400014D		bsr		putCharToUART
00000161	21880001		addi	r8,r8,1
00000162	3938007F		cmpi	r8,0x7f
00000163	D2FFFFFD		bne		anotherCharT6
00000164	A1804000		pull	r8
00000165	A1704000		pull	PC
	
;
; MCP23008 I2C Test
;

testMCP23008:
00000166	42800070		lix		r8,runningString.lower
00000167	D4000151		bsr		printString_ANSI_UART
00000168	42800124		lix		r8,menuItem_07.lower
00000169	D4000165		bsr		printLinebuffer_ANSI_UART
0000016a	4280007C		lix		r8,hitAnyKey.lower
0000016b	D4000163		bsr		printLinebuffer_ANSI_UART
; Code to initialize I2CIO8 card
0000016c	D4000035		bsr		init_Regs_I2CIO8	; initialize the MCP23008 on the I2CIO8
restartLoop:
0000016d	42800008		lix		r8,0x08
loopMain:
0000016e	D400004E		bsr		wrI2CAdrDat_MCP23008	; write to LEDs
0000016f	D4000008		bsr		delayFromJumpers
00000170	32808000		sr1		r8,r8					; shift LED bit right by 1
00000171	39380000		cmpi	r8,0
00000172	D2FFFFFC		bne		loopMain
00000173	D40001D1		bsr		checkForCharAndDiscard
00000174	39380000		cmpi	r8,0
00000175	D1FFFFF8		beq		restartLoop				; restart the shifting
00000176	A1704000		pull	PC
	
;
; delayFromJumpers - Set delay based on header value
; returns: nothing (restores registers at return)
;

delayFromJumpers:
00000177	A0408000		push	r8
00000178	D4000052	 	bsr		readI2CDat_MCP23008		; read headers into r8
00000179	2C882000		xor		r8,r8,MINUS1			; invert headers
0000017a	2B8800F0		andi	r8,r8,0xF0				; keep 8 bits
0000017b	30808000		sl1		r8,r8
0000017c	30808000		sl1		r8,r8
0000017d	30808000		sl1		r8,r8
0000017e	D40001A1		bsr		delay_mS
0000017f	A1804000		pull	r8
00000180	A1704000		pull	PC

;
; printLong
; r8 contains the long value to print
;

printLong:
00000181	A0408000		push	r8
00000182	A0409000		push	r9
00000183	A040A000		push	r10
00000184	A0408000		push	r8				; temporarily save r8
00000185	42800030		lix		r8,0x30
00000186	D40001D2		bsr		writeANSI_UART
00000187	42800078		lix		r8,0x78
00000188	D40001D0		bsr		writeANSI_UART
00000189	A1804000		pull	r8				; restore r8
0000018a	42900008		lix		r9,8			; loop counter
doNextPrintLong:
0000018b	34808000		rol1	r8,r8
0000018c	34808000		rol1	r8,r8
0000018d	34808000		rol1	r8,r8
0000018e	34808000		rol1	r8,r8
0000018f	D4000007		bsr		printHexVal
00000190	23990001		subi	r9,r9,1
00000191	C7FFFFFA		bnz		doNextPrintLong
00000192	A1A04000		pull	r10
00000193	A1904000		pull	r9
00000194	A1804000		pull	r8
00000195	A1704000		pull	PC

;
; printHexVal
;

printHexVal:
00000196	A0408000		push	r8
00000197	2B88000F		andi	r8,r8,0xf
00000198	39380009		cmpi	r8,9
00000199	CC000004		blt		printHexLetter
0000019a	21880030		addi	r8,r8,0x30
0000019b	D40001BD		bsr		writeANSI_UART
0000019c	C0000003		bra		donePrintHexVal
printHexLetter:
0000019d	21880037		addi	r8,r8,0x37		; 'A' - 10
0000019e	D40001BA		bsr		writeANSI_UART
donePrintHexVal:
0000019f	A1804000		pull	r8
000001a0	A1704000		pull	PC

;
; init_Regs_I2CIO8 - Set IO Dir
;

init_Regs_I2CIO8:
000001a1	A0408000		push	r8
	; Write 0x22 to IOCON register (not sequential operations)
000001a2	42800001		lix		r8,0x01		; I2C_Ctrl = START
000001a3	D400004A		bsr		write_I2C_Ctrl_Reg
000001a4	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
000001a5	D4000039		bsr		write_I2C_Data_Address_Reg
000001a6	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
000001a7	D4000046		bsr		write_I2C_Ctrl_Reg
000001a8	42800005		lix		r8,0x05		; MCP23008 IOCON
000001a9	D4000035		bsr		write_I2C_Data_Address_Reg
000001aa	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
000001ab	D4000042		bsr		write_I2C_Ctrl_Reg	
000001ac	42800022		lix		r8,0x22		; SEQOP = Disabled, INTPOL = Active-high
000001ad	D4000031		bsr		write_I2C_Data_Address_Reg
	; Write 0xF0 to Direction Control register
000001ae	42800001		lix		r8,0x01		; I2C_Ctrl = START
000001af	D400003E		bsr		write_I2C_Ctrl_Reg
000001b0	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
000001b1	D400002D		bsr		write_I2C_Data_Address_Reg
000001b2	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
000001b3	D400003A		bsr		write_I2C_Ctrl_Reg
000001b4	42800000		lix		r8,0x00		; MCP23008 IODIR
000001b5	D4000029		bsr		write_I2C_Data_Address_Reg
000001b6	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
000001b7	D4000036		bsr		write_I2C_Ctrl_Reg
000001b8	428000F0		lix		r8,0xF0		; Input and output bits
000001b9	D4000025		bsr		write_I2C_Data_Address_Reg
000001ba	A1804000		pull	r8
000001bb	A1704000		pull	PC

;
; wrI2CAdrDat_MCP23008 - Write address to the I2C bus
; Address 0x5800 -> DATA (write/read) or SLAVE ADDRESS (write)  
; Address 0x5801 -> Command/Status Register (write/read)
; r8 is the value to write
;

wrI2CAdrDat_MCP23008:
000001bc	A0408000		push	r8
000001bd	42800001		lix		r8,0x01		; I2C_Ctrl = START
000001be	D400002F		bsr		write_I2C_Ctrl_Reg
000001bf	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
000001c0	D400001E		bsr		write_I2C_Data_Address_Reg
000001c1	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
000001c2	D400002B		bsr		write_I2C_Ctrl_Reg	
000001c3	4280000A		lix		r8,0x0A		; MCP23008 OLAT
000001c4	D400001A		bsr		write_I2C_Data_Address_Reg
000001c5	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
000001c6	D4000027		bsr		write_I2C_Ctrl_Reg	
000001c7	A1804000		pull	r8			; Data to write is in r8
000001c8	D4000016		bsr		write_I2C_Data_Address_Reg
000001c9	A1704000		pull	PC
	
;
; readI2CDat_MCP23008 - Read data from the I2C bus
; Address 0x5800 -> DATA (write/read) or SLAVE ADDRESS (write)  
; Address 0x5801 -> Command/Status Register (write/read)
; r8 is the value to write
;

readI2CDat_MCP23008:
	; write the GPIO address register
000001ca	42800001		lix		r8,0x01		; I2C_Ctrl = START
000001cb	D4000022		bsr		write_I2C_Ctrl_Reg
000001cc	42800040		lix		r8,0x40		; I2C write command at slave address = 0x20
000001cd	D4000011		bsr		write_I2C_Data_Address_Reg
000001ce	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
000001cf	D400001E		bsr		write_I2C_Ctrl_Reg	
000001d0	42800009		lix		r8,0x09		; MCP23008 - GPIO register address
000001d1	D400000D		bsr		write_I2C_Data_Address_Reg
	; Read the GPIO line value
000001d2	42800001		lix		r8,0x01		; I2C_Ctrl = START
000001d3	D400001A		bsr		write_I2C_Ctrl_Reg
000001d4	42800041		lix		r8,0x41		; I2C read command at slave address = 0x20
000001d5	D4000009		bsr		write_I2C_Data_Address_Reg
000001d6	42800000		lix		r8,0x00		; I2C_Ctrl = IDLE
000001d7	D4000016		bsr		write_I2C_Ctrl_Reg	
000001d8	D400000C		bsr		read_I2C_Data_Reg
000001d9	A0408000		push	r8
000001da	42800003		lix		r8,0x03		; I2C_Ctrl = STOP
000001db	D4000012		bsr		write_I2C_Ctrl_Reg	
000001dc	A1804000		pull	r8
000001dd	A1704000		pull	PC
	
;
; write_I2C_Data_Address_Reg
;

write_I2C_Data_Address_Reg:
000001de	A0405000		push	PAR
000001df	42505800		lix		PAR,0x5800	; I2C Address/register
000001e0	85508000		spl		r8			; Write control register
000001e1	D4000011		bsr		i2c_ack
000001e2	A1504000		pull	PAR
000001e3	A1704000		pull	PC

;
; read_I2C_Data_Reg - Read I2C data into r8
;

read_I2C_Data_Reg:
000001e4	A0405000		push	PAR
000001e5	42505800		lix		PAR,0x5800	; I2C Data Address
000001e6	42800054		lix		r8,0x54
000001e7	85508000		spl		r8
000001e8	D400000A		bsr		i2c_ack
000001e9	42505800		lix		PAR,0x5800	; I2C Data Address
000001ea	84805000		lpl		r8
000001eb	A1504000		pull	PAR
000001ec	A1704000		pull	PC
	
;
; write_I2C_Ctrl_Reg
; Command Register (write):
;	bit 7-2	= Reserved
;	bit 1-0	= 
;		00: IDLE
;		01: START
;		10: nSTART
;		11: STOP
;

write_I2C_Ctrl_Reg:
000001ed	A0405000		push	PAR
000001ee	42505801		lix		PAR,0x5801	; I2C Control register
000001ef	85508000		spl		r8			; Write control register
000001f0	A1504000		pull	PAR
000001f1	A1704000		pull	PC

;
; i2c_ack - wait for transfer to complete
; Status Register (read):
;	bit 7-2	= Reserved
;	bit 1 	= ERROR 	(I2C transaction error)
;	bit 0 	= BUSY 	(I2C bus busy)
;

i2c_ack:
000001f2	A0405000		push	PAR
000001f3	A0408000		push	r8
000001f4	42505801		lix		PAR,0x5801	; Control register
i2c_ack_loop:
000001f5	84805000		lpl		r8
000001f6	2B880001		andi	r8,r8,0x1	; busy bit is least significant bit
000001f7	C4FFFFFE		be1		i2c_ack_loop
000001f8	A1804000		pull	r8
000001f9	A1504000		pull	PAR
000001fa	A1704000		pull	PC

;
; MCP4231 SPI Test
; Write ramp output to SPI-POTX2
; x6000-x67FF (2KB)	- SPI Address Range
; x6000 - d0-d7 = Write value
; x6001 - d0 = Write Chip Select line
; x6002 - d0 = Busy flag
;

testMCP4231:
000001fb	A0408000		push	r8
000001fc	42800070		lix		r8,runningString.lower
000001fd	D40000BB		bsr		printString_ANSI_UART
000001fe	4280013C		lix		r8,menuItem_08.lower
000001ff	D40000CF		bsr		printLinebuffer_ANSI_UART
00000200	4280007C		lix		r8,hitAnyKey.lower
00000201	D40000CD		bsr		printLinebuffer_ANSI_UART
reloadr8:
00000202	42800000		lix		r8,0x00				; sent out low voltage from pot
loopForever:
00000203	D4000009		bsr		writeSPI0
00000204	21880001		addi	r8,r8,0x1
00000205	39380080		cmpi	r8,0x80
00000206	D2FFFFFD		bne		loopForever
00000207	D400013D		bsr		checkForCharAndDiscard
00000208	39380000		cmpi	r8,0
00000209	D1FFFFF9		beq		reloadr8
0000020a	A1804000		pull	r8
0000020b	A1704000		pull	PC
	
;
; writeSPI0 - Write to the first SPI pot
; r8 contains the data to write out
; 16-bit command Fig 7-1 in the MCP4231 data sheet
;

writeSPI0:
0000020c	A0408000		push	r8
0000020d	42800000		lix		r8,0x00			; start chip select
0000020e	42506001		lix		PAR,0x6001		; Chip Select Address
0000020f	85508000		spl		r8				; Turn on Chip Select
00000210	42800000		lix		r8,0x00			; register select - REG0
00000211	42506000		lix		PAR,0x6000		; Data address
00000212	85508000		spl		r8				; Store data to the SPI bus
00000213	D400000B		bsr		waitSPITxRdy	; Wait for Tx Ready
00000214	A1804000		pull	r8				; data to write
00000215	A0408000		push	r8
00000216	42506000		lix		PAR,0x6000		; data address
00000217	85508000		spl		r8				; Store data to the SPI bus
00000218	D4000006		bsr		waitSPITxRdy	; Wait for Tx Ready
00000219	42800001		lix		r8,0x01			; end chip select
0000021a	42506001		lix		PAR,0x6001		; Chip select address
0000021b	85508000		spl		r8				; Turn off chip select
0000021c	A1804000		pull	r8
0000021d	A1704000		pull	PC				; return	

;
; waitSPITxRdy - wait for SPI transfer to be complete
; Don't write until the busy cycles high then low
; R32V2020 is much faster than the SPI interface
; Need to wait for the busy to get set and the cleared again
;

waitSPITxRdy:
0000021e	A0408000		push	r8			; save r8 since it's used by calling function(s)
0000021f	42506002		lix		PAR,0x6002	; SPI busy bit address
loopSPIRdy:				; wait until busy gets set
00000220	84805000		lpl		r8			; load the busy bit
00000221	39380000		cmpi	r8,0		; 0 = not yet set
00000222	D1FFFFFE		beq		loopSPIRdy	; wait until busy is set
loopSPIRdy2:			; wait while busy is set
00000223	84805000		lpl		r8			; load the busy bit
00000224	39380001		cmpi	r8,1		; 1 = busy is set
00000225	D1FFFFFE		beq		loopSPIRdy2	; still busy
00000226	A1804000		pull	r8			; restore r8
00000227	A1704000		pull	PC			; return

;
; PS/2 Keyboard Test
; 0x0D
;

testPS2Keyboard:
00000228	A0408000		push	r8
00000229	42800070		lix		r8,runningString.lower
0000022a	D400008E		bsr		printString_ANSI_UART
0000022b	42800154		lix		r8,menuItem_09.lower
0000022c	D40000A2		bsr		printLinebuffer_ANSI_UART
loopForeverT9:
0000022d	D40000FB		bsr		getPS2Char
0000022e	D400012A		bsr		writeANSI_UART
0000022f	3938000D		cmpi	r8,0x0D
00000230	D2FFFFFD		bne		loopForeverT9
00000231	A1804000		pull	r8
00000232	A1704000		pull	PC

;
; Buzzer Test
;

testBuzzer:
00000233	A0408000		push	r8
00000234	42800070		lix		r8,runningString.lower
00000235	D4000083		bsr		printString_ANSI_UART
00000236	4280016C		lix		r8,menuItem_10.lower
00000237	D4000097		bsr		printLinebuffer_ANSI_UART
00000238	D40000D4		bsr		enableBuzzer
00000239	42800100		lix		r8,0x100
0000023a	D40000E5		bsr		delay_mS
0000023b	D40000DA		bsr		disableBuzzer
0000023c	A1804000		pull	r8
0000023d	A1704000		pull	PC
	
;
; Timers Test
; 	Address	Timer
; 	X3800	Elapsed Time Counter
;	X3801	MicroSeconds Counter
;	X3802	Milliseconds Counter
;	X3803	CPU Instruction Counter
;

testTBD:
0000023e	A0408000		push	r8
0000023f	42800070		lix		r8,runningString.lower
00000240	D4000078		bsr		printString_ANSI_UART
00000241	42800184		lix		r8,menuItem_11.lower
00000242	D400008C		bsr		printLinebuffer_ANSI_UART
00000243	D4000003		bsr		testTimers
00000244	A1804000		pull	r8
00000245	A1704000		pull	PC
	
; 
; testTimers
; 

testTimers:
00000246	A0408000		push	r8
00000247	A0409000		push	r9
00000248	A0405000		push	PAR
	; First test the CPU Instruction Counter
00000249	42503803		lix		PAR,0x3803		; CPU Instruction Counter
0000024a	84905000		lpl		r9				; Get the counter value
0000024b	00000000		nop
0000024c	00000000		nop
0000024d	00000000		nop
0000024e	00000000		nop
0000024f	00000000		nop
00000250	84805000		lpl		r8
00000251	22998000		sub		r9,r9,r8
00000252	39390006		cmpi	r9,0x06
00000253	D1000006		beq		CPUCycleTimerDone
00000254	42503000		lix		PAR,0x3000
00000255	4180DEAD		liu		r8,0xDEAD
00000256	40800001		lil		r8,0x0001
00000257	85508000		spl		r8
00000258	C0000011		bra		timerTestsDone
CPUCycleTimerDone:
00000259	42503803		lix		PAR,0x3803		; CPU Instruction Counter
0000025a	84905000		lpl		r9				; Get the counter value
0000025b	00000000		nop
0000025c	00000000		nop
0000025d	00000000		nop
0000025e	00000000		nop
0000025f	00000000		nop
00000260	84805000		lpl		r8
00000261	22998000		sub		r9,r9,r8
00000262	39390006		cmpi	r9,06
00000263	D1000006		beq		millisecondTimerDone
00000264	42503000		lix		PAR,0x3000
00000265	4180DEAD		liu		r8,0xDEAD
00000266	40800002		lil		r8,0x0002
00000267	85508000		spl		r8
00000268	C0000001		bra		timerTestsDone
millisecondTimerDone:

timerTestsDone:
00000269	A1504000		pull	PAR
0000026a	A1904000		pull	r9
0000026b	A1804000		pull	r8
0000026c	A1704000		pull	PC


;
; TBD Test
;

testRingLEDs2:
0000026d	A0408000		push	r8
0000026e	A0409000		push	r9
0000026f	42800070		lix		r8,runningString.lower
00000270	D4000048		bsr		printString_ANSI_UART
00000271	4280019C		lix		r8,menuItem_12.lower
00000272	D400005C		bsr		printLinebuffer_ANSI_UART
	;
00000273	A1904000		pull	r9
00000274	A1804000		pull	r8
00000275	A1704000		pull	PC
	
;
; hexToSevenSeg - Convert a two ASCII digit value into a hex byte
; Passed: r8 points to the start of the hex string
; Returned: r8 contains the hex value of the string
; Put the byte to the Seven Segment Display
;

hexToSevenSeg:
00000276	A0409000		push	r9
00000277	A0406000		push	DAR
00000278	A0405000		push	PAR
00000279	42900000		lix		r9,0
0000027a	20680000		add		DAR,r8,ZERO		; Address of lineBuff (passed into this routine)
0000027b	68806000		ldbp	r8
0000027c	D4000012		bsr		asciiToHex
0000027d	2B88000F		andi	r8,r8,0xf
0000027e	28998000		or		r9,r9,r8
0000027f	30909000		sl1		r9,r9
00000280	30909000		sl1		r9,r9
00000281	30909000		sl1		r9,r9
00000282	30909000		sl1		r9,r9
00000283	60806000		ldb		r8
00000284	D400000A		bsr		asciiToHex
00000285	2B88000F		andi	r8,r8,0xf
00000286	28998000		or		r9,r9,r8
00000287	42503000		lix		PAR,0x3000		; seven segment display
00000288	85509000		spl		r9
00000289	20890000		add		r8,r9,ZERO
0000028a	A1504000		pull	PAR
0000028b	A1604000		pull	DAR
0000028c	A1904000		pull	r9
0000028d	A1704000		pull	PC

;
; asciiToHex - Convert a single ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
; Result is returned in r8
;	0x0-0xf - Legal Values
;	'DEAD' - Not hex character
;

asciiToHex:
0000028e	39380066		cmpi	r8,0x66			; past 'f'
0000028f	CC000011		blt		a2h_Error
00000290	39380030		cmpi	r8,0x30			; below '0'
00000291	CF00000F		bgt		a2h_Error
00000292	3938003A		cmpi	r8,0x3A			; '0' - '9'
00000293	CF000009		bgt		gotDigit
00000294	39380041		cmpi	r8,0x41			; ':' - '@'
00000295	CF00000B		bgt		a2h_Error
00000296	39380047		cmpi	r8,0x47			; 'A' - 'F'
00000297	CC000007		blt		gotUpperLetter
00000298	39380061		cmpi	r8,0x61			; 'G' - 'tick'
00000299	CC000007		blt		a2h_Error
; Lower case letter
0000029a	23880057		subi	r8,r8,0x57
0000029b	C0000008		bra		doneConvA2H
; number 0-9
gotDigit:
0000029c	23880030		subi	r8,r8,0x30
0000029d	C0000006		bra		doneConvA2H
; A-F
gotUpperLetter:
0000029e	23880037		subi	r8,r8,0x37
0000029f	C0000004		bra		doneConvA2H
a2h_Error:
000002a0	42800060		lix		r8,syntaxError.lower
000002a1	D4000017		bsr		printString_ANSI_UART
000002a2	4280DEAD		lix		r8,0xDEAD
doneConvA2H:
000002a3	A1704000		pull	PC

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
000002a4	A0405000		push	PAR
000002a5	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
000002a6	84805000		lpl		r8			; Read Status into r8
000002a7	2B880001		andi 	r8,r8,0x1
000002a8	C3FFFFFE		bez 	waitUartRxStat
000002a9	42501801		lix 	PAR,0x1801
000002aa	84805000		lpl		r8
000002ab	A1504000		pull	PAR
000002ac	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
000002ad	A0409000		push	r9
000002ae	A0405000		push	PAR
000002af	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
000002b0	84905000		lpl		r9			; Read Status into r9
000002b1	2B990002		andi	r9,r9,0x2
000002b2	C3FFFFFE		bez 	waitUartTxStat
000002b3	42501801		lix 	PAR,0x1801
000002b4	85508000		spl		r8			; echo the character
000002b5	A1504000		pull	PAR
000002b6	A1904000		pull	r9
000002b7	A1704000		pull	PC
	
;
; printString_ANSI_UART - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI_UART:
000002b8	A0408000		push	r8					; save r8
000002b9	A0406000		push	DAR
000002ba	20680000		add		DAR,r8,ZERO			; set the start of the string
nextChar:
000002bb	68806000		ldbp	r8					; get the character01
000002bc	39380000		cmpi	r8,0x0				; Null terminated string
000002bd	D1000003		beq		donePrStr			; done if null
000002be	D400009A		bsr		writeANSI_UART	; write out the character
000002bf	C0FFFFFC		bra		nextChar
donePrStr:
000002c0	A1604000		pull	DAR					; restore DAR
000002c1	A1804000		pull	r8					; restore r8
000002c2	A1704000		pull	PC					; rts
	
;
; printString_ANSI - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString_ANSI:
000002c3	A0408000		push	r8					; save r8
000002c4	A0406000		push	DAR
000002c5	20680000		add		DAR,r8,ZERO			; set the start of the string
nextCharANSI:
000002c6	68806000		ldbp	r8					; get the character01
000002c7	39380000		cmpi	r8,0x0				; Null terminated string
000002c8	D1000003		beq		donePrANSIStr		; done if null
000002c9	D400002A		bsr		putCharToANSIScreen	; write out the character
000002ca	C0FFFFFC		bra		nextCharANSI
donePrANSIStr:
000002cb	A1604000		pull	DAR					; restore DAR
000002cc	A1804000		pull	r8					; restore r8
000002cd	A1704000		pull	PC					; rts
	
;
; printLinebuffer_ANSI_UART - Print a screen to the current screen position with CRLF at the end
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printLinebuffer_ANSI_UART:
000002ce	A0408000		push	r8					; save r8
000002cf	A0406000		push	DAR
000002d0	21680000		addi	DAR,r8,0x0			; set the start of the string
nextChar2:
000002d1	68806000		ldbp	r8					; get the character
000002d2	39380000		cmpi	r8,0x0				; Null terminated string
000002d3	D1000003		beq		donePrStr2			; done if null
000002d4	D4000084		bsr		writeANSI_UART	; write out the character
000002d5	C0FFFFFC		bra		nextChar2
donePrStr2:
000002d6	D4000004		bsr		newLine_ANSI_UART
000002d7	A1604000		pull	DAR					; restore DAR
000002d8	A1804000		pull	r8					; restore r8
000002d9	A1704000		pull	PC					; rts
	
;
; newLine_ANSI_UART - Print out a newLine_ANSI_UART (CR-LF)
;

newLine_ANSI_UART:
000002da	A0408000		push	r8
000002db	4280000A		lix		r8,0x0A				; Line Feed
000002dc	D400007C		bsr		writeANSI_UART	; Put the character to the screen
000002dd	4280000D		lix		r8,0x0D				; Carriage Return
000002de	D400007A		bsr		writeANSI_UART		; Echo character back to the UART
000002df	A1804000		pull	r8
000002e0	A1704000		pull	PC

;
; newLine_ANSI - Print out a newLine_ANSI (CR-LF)
;

newLine_ANSI:
000002e1	A0408000		push	r8
000002e2	4280000A		lix		r8,0x0A				; Line Feed
000002e3	D4000010		bsr		putCharToANSIScreen	; Put the character to the screen
000002e4	4280000D		lix		r8,0x0D				; Carriage Return
000002e5	D400000E		bsr		putCharToANSIScreen	; Echo character back to the UART
000002e6	A1804000		pull	r8
000002e7	A1704000		pull	PC

;
; clearANSIScreenAndUART - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearANSIScreenAndUART:
000002e8	A0408000		push	r8				; save r8
000002e9	4280001B		lix		r8,0x1b			; ESC
000002ea	D400006E		bsr		writeANSI_UART
000002eb	4280005B		lix		r8,0x5b			; [
000002ec	D400006C		bsr		writeANSI_UART
000002ed	42800032		lix		r8,0x32			; 2
000002ee	D400006A		bsr		writeANSI_UART
000002ef	4280004A		lix		r8,0x4A			; J
000002f0	D4000068		bsr		writeANSI_UART
000002f1	A1804000		pull	r8
000002f2	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
000002f3	A0409000		push	r9
000002f4	A0405000		push	PAR
000002f5	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
000002f6	84905000		lpl		r9			; Read Status into r9
000002f7	2B990002		andi	r9,r9,0x2
000002f8	C3FFFFFE		bez 	waitScreenTxStat
000002f9	42500001		lix 	PAR,0x1
000002fa	85508000		spl		r8			; echo the character
000002fb	A1504000		pull	PAR
000002fc	A1904000		pull	r9
000002fd	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
000002fe	A0408000		push	r8
000002ff	42800000		lix		r8,0			; first note is 0
00000300	D4000007		bsr 	setNote
00000301	D400000B		bsr		enableBuzzer
00000302	428000FA		lix		r8,250			; count for 1 Sec
00000303	D400001C		bsr		delay_mS		; call delay_ms
00000304	D4000011		bsr		disableBuzzer
00000305	A1804000		pull	r8
00000306	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
; returns note
;

setNote:
00000307	A0405000		push	PAR
00000308	42504000		lix		PAR,0x4000
00000309	85508000		spl		r8
0000030a	A1504000		pull	PAR
0000030b	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
0000030c	A0408000		push	r8
0000030d	A0405000		push	PAR
0000030e	42502800		lix		PAR,0x2800
0000030f	84805000		lpl		r8
00000310	29880010		ori		r8,r8,0x10
00000311	85508000		spl		r8
00000312	A1504000		pull	PAR
00000313	A1804000		pull	r8
00000314	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
00000315	A0408000		push	r8
00000316	A0405000		push	PAR
00000317	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
00000318	42502800		lix		PAR,0x2800
00000319	84805000		lpl		r8
0000031a	2B88FFEF		andi	r8,r8,0xffef
0000031b	85508000		spl		r8
0000031c	A1504000		pull	PAR
0000031d	A1804000		pull	r8
0000031e	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
0000031f	A0409000		push	r9
00000320	42503802		lix		PAR,0x3802		; address of the mSec counter
00000321	84905000		lpl		r9				; read the peripheral counter into r9
00000322	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
00000323	84905000		lpl		r9				; check the elapsed time counter
00000324	38389000		cmp		r8,r9
00000325	CCFFFFFE		blt		loop_delay_mS
00000326	A1904000		pull	r9
00000327	A1704000		pull	PC

;
; getPS2Char
; returns character received in r8
;

getPS2Char:
00000328	A0409000		push	r9
00000329	A0405000		push	PAR
0000032a	42500801		lix		PAR,0x0801	; PS/2 Status
waitPS2RxStat:
0000032b	84905000		lpl		r9			; Read Status into r9
0000032c	2B990001		andi	r9,r9,0x1
0000032d	C3FFFFFE		bez 	waitPS2RxStat
getCharFromPS2:
0000032e	42500800		lix 	PAR,0x0800
0000032f	84805000		lpl		r8
00000330	42500801		lix		PAR,0x0801	; PS/2 Status
whilePS2RxStat:
00000331	A1504000		pull	PAR
00000332	A1904000		pull	r9
00000333	A1704000		pull	PC

; waitReadPS2_UART
; wait for character from either 
;	the PS/2 keyboard and UART serial
; r8 = read character

waitReadPS2_UART:
00000334	A0405000		push	PAR
checkCharFromPS2:
00000335	42500801		lix		PAR,0x0801	; PS/2 Status
00000336	84805000		lpl		r8			; Read Status
00000337	2B880001		andi	r8,r8,0x1	; =1 when char received
00000338	C3000004		bez 	checkUARTStat
00000339	42500800		lix 	PAR,0x0800	; PS/2 Data
0000033a	84805000		lpl		r8
0000033b	C0000007		bra		gotPS2Char
checkUARTStat:
0000033c	42501800		lix		PAR,0x1800	; UART Status
0000033d	84805000		lpl		r8			; Read Status
0000033e	2B880001		andi 	r8,r8,0x1	; =1 when char received
0000033f	C3FFFFF6		bez 	checkCharFromPS2
00000340	42501801		lix 	PAR,0x1801	; UART Data
00000341	84805000		lpl		r8
gotPS2Char:
00000342	A1504000		pull	PAR
00000343	A1704000		pull	PC
	
; checkForCharAndDiscard - Check for a character in UART or PS/2
; Discard the character received
; return whether char was present (1) or no char was present (0)

checkForCharAndDiscard:
00000344	A0405000		push	PAR
00000345	42500801		lix		PAR,0x0801	; PS/2 Status
00000346	84805000		lpl		r8			; Read Status
00000347	2B880001		andi	r8,r8,0x1	; =1 when char received
00000348	C3000005		bez 	checkUARTStat2
00000349	42500800		lix 	PAR,0x0800	; PS/2 Data
0000034a	84805000		lpl		r8			; throw away char
0000034b	42800001		lix		r8,0x1
0000034c	C000000A		bra		gotChar
checkUARTStat2:
0000034d	42501800		lix		PAR,0x1800	; UART Status
0000034e	84805000		lpl		r8			; Read Status
0000034f	2B880001		andi 	r8,r8,0x1	; =1 when char received
00000350	C3000005		bez 	noCharReceived
00000351	42501801		lix 	PAR,0x1801	; UART Data
00000352	84805000		lpl		r8
00000353	42800001		lix		r8,1
00000354	C0000002		bra		gotChar
noCharReceived:
00000355	42800000		lix		r8,0
gotChar:
00000356	A1504000		pull	PAR
00000357	A1704000		pull	PC

; writeANSI_UART
; write out a character to both 
;	the ANSI screen and the UART

writeANSI_UART:
00000358	D4FFFF9B		bsr		putCharToANSIScreen
00000359	D4FFFF54		bsr		putCharToUART
0000035a	A1704000		pull	PC
