; Write to the SPI-POTX2 card
;	http://land-boards.com/blwiki/index.php?title=SPI-POTX2
;	Card has an Dual Digital Potentiometers
; Arduino code 
; https://raw.githubusercontent.com/land-boards/lb-Arduino-Code/master/LBCards/SPIPOTX2/SPI-POTX2-Triangle/SPI-POTX2-Triangle.ino
; 

prompt:			.string "R32V2020> "
xfered:			.string "Transfered"

;
; main
;

main:
00000000	D400004F		bsr		clearScreen			; Not required for this example
00000001	42800000		lix		r8,prompt.lower		; r8 contains the pointer to the the prompt 
00000002	D4000041		bsr		printString			; Print the prompt to the screen

; Write ramp output to SPI-POTX2
; x6000-x67FF (2KB)	- SPI Address Range
; x6000 - d0-d7 = Write value
; x6001 - d0 = Write Chip Select line
; x6002 - d0 = Busy flag
; x6003 - 

00000003	42900080		lix		r9,0x80				; loop terminal count
reloadr8:
00000004	42800000		lix		r8,0x00				; sent out low voltage from pot
loopForever:
00000005	D4000007		bsr		writeSPI0
00000006	20881000		add		r8,r8,r1
00000007	38389000		cmp		r8,r9
00000008	D2FFFFFD		bne		loopForever
00000009	C0FFFFFB		bra		reloadr8

transferDone:
0000000a	4280000C		lix		r8,xfered.lower		; embedded print string
0000000b	D4000038		bsr		printString			; Print the string to the screen

;
; writeSPI0 - Write to the first SPI pot
; r8 contains the data to write out
; 16-bit command Fig 7-1 in the data sheet
;

writeSPI0:
0000000c	A0408000		push	r8
0000000d	42800000		lix		r8,0x00			; start chip select
0000000e	42506001		lix		PAR,0x6001		; Chip Select Address
0000000f	85508000		spl		r8				; Turn on Chip Select
00000010	42800000		lix		r8,0x00			; register select - REG0
00000011	42506000		lix		PAR,0x6000		; Data address
00000012	85508000		spl		r8				; Store data to the SPI bus
00000013	D400000B		bsr		waitSPITxRdy	; Wait for Tx Ready
00000014	A1804000		pull	r8				; data to write
00000015	A0408000		push	r8
00000016	42506000		lix		PAR,0x6000		; data address
00000017	85508000		spl		r8				; Store data to the SPI bus
00000018	D4000006		bsr		waitSPITxRdy	; Wait for Tx Ready
00000019	42800001		lix		r8,0x01			; end chip select
0000001a	42506001		lix		PAR,0x6001		; Chip select address
0000001b	85508000		spl		r8				; Turn off chip select
0000001c	A1804000		pull	r8
0000001d	A1704000		pull	PC				; return	

;
; waitSPITxRdy - wait for SPI transfer to be complete
; Don't write until the busy cycles high then low
; R32V2020 is much faster than the SPI interface
; Need to wait for the busy to get set and the cleared again
;

waitSPITxRdy:
0000001e	A0408000		push	r8			; save r8 since it's used by calling function(s)
0000001f	42506002		lix		PAR,0x6002	; SPI busy bit address
loopSPIRdy:				; wait until busy gets set
00000020	84805000		lpl		r8			; load the busy bit
00000021	38380000		cmp		r8,r0		; 0 = not yet set
00000022	D1FFFFFE		beq		loopSPIRdy	; wait until busy is set
loopSPIRdy2:			; wait while busy is set
00000023	84805000		lpl		r8			; load the busy bit
00000024	38381000		cmp		r8,r1		; 1 = busy is set
00000025	D1FFFFFE		beq		loopSPIRdy2	; still busy
00000026	A1804000		pull	r8			; restore r8
00000027	A1704000		pull	PC			; return

;
; readUartStatus
;
	
readUartStatus:
00000028	D4000004		bsr		waitGetCharFromUART
putCharToANSIScreenAndUART:
00000029	D4000031		bsr		putCharToANSIScreen	; put the character to the screen
0000002a	D400000B		bsr		putCharToUART
0000002b	C0FFFFFD		bra		readUartStatus

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
0000002c	A0405000		push	PAR
0000002d	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
0000002e	84805000		lpl		r8			; Read Status into r8
0000002f	25881000		and 	r8,r8,ONE
00000030	C3FFFFFE		bez 	waitUartRxStat
00000031	42501801		lix 	PAR,0x1801
00000032	84805000		lpl		r8
00000033	A1504000		pull	PAR
00000034	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
00000035	A0409000		push	r9
00000036	A0405000		push	PAR
00000037	A040A000		push	r10
00000038	42A00002		lix		r10,0x2
00000039	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
0000003a	84905000		lpl		r9			; Read Status into r9
0000003b	2599A000		and 	r9,r9,r10
0000003c	C3FFFFFE		bez 	waitUartTxStat
0000003d	42501801		lix 	PAR,0x1801
0000003e	85508000		spl		r8			; echo the character
0000003f	A1A04000		pull	r10
00000040	A1504000		pull	PAR
00000041	A1904000		pull	r9
00000042	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
00000043	A0408000		push	r8				; save r8
00000044	A0406000		push	DAR
00000045	20680000		add		DAR,r8,ZERO		; set the start of the string
nextChar:
00000046	60806000		ldb		r8				; get the character
00000047	38380000		cmp		r8,ZERO			; Null terminated string
00000048	D1000004		beq		donePrStr		; done if null
00000049	D4000011		bsr		putCharToANSIScreen	; write out the character
0000004a	20661000		add		DAR,DAR,r1		; Point to next character
0000004b	C0FFFFFB		bra		nextChar
donePrStr:
0000004c	A1604000		pull	DAR				; restore DAR
0000004d	A1804000		pull	r8				; restore r8
0000004e	A1704000		pull	PC				; rts

;
; clearScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen:
0000004f	A0408000		push	r8				; save r8
00000050	4280001B		lix		r8,0x1b			; ESC
00000051	D4000009		bsr		putCharToANSIScreen
00000052	4280005B		lix		r8,0x5b			; [
00000053	D4000007		bsr		putCharToANSIScreen
00000054	42800032		lix		r8,0x32			; 2
00000055	D4000005		bsr		putCharToANSIScreen
00000056	4280004A		lix		r8,0x4A			; J
00000057	D4000003		bsr		putCharToANSIScreen
00000058	A1804000		pull	r8
00000059	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
; Return address (-1) is on the stack - need to increment before return
;

putCharToANSIScreen:
0000005a	A0409000		push	r9
0000005b	A040A000		push	r10
0000005c	A0405000		push	PAR
0000005d	42A00002		lix		r10,0x2		; TxReady bit
0000005e	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
0000005f	84905000		lpl		r9			; Read Status into r9
00000060	2599A000		and 	r9,r9,r10
00000061	C3FFFFFE		bez 	waitScreenTxStat
00000062	42500001		lix 	PAR,0x1
00000063	85508000		spl		r8			; echo the character
00000064	A1504000		pull	PAR
00000065	A1A04000		pull	r10
00000066	A1904000		pull	r9
00000067	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
00000068	A0408000		push	r8
00000069	42800000		lix		r8,0			; first note is 0
0000006a	D4000007		bsr 	setNote
0000006b	D400000D		bsr		enableBuzzer
0000006c	428000FA		lix		r8,250			; count for 1 Sec
0000006d	D4000023		bsr		delay_mS		; call delay_ms
0000006e	D4000016		bsr		disableBuzzer
0000006f	A1804000		pull	r8
00000070	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
00000071	A0408000		push	r8
00000072	A0405000		push	PAR
00000073	42504000		lix		PAR,0x4000
00000074	85508000		spl		r8
00000075	A1504000		pull	PAR
00000076	A1804000		pull	r8
00000077	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
00000078	A0409000		push	r9
00000079	A0408000		push	r8
0000007a	A0405000		push	PAR
0000007b	42900010		lix		r9,0x0010		; Buzzer Enable line
0000007c	42502800		lix		PAR,0x2800
0000007d	84805000		lpl		r8
0000007e	24889000		or		r8,r8,r9
0000007f	85508000		spl		r8
00000080	A1504000		pull	PAR
00000081	A1804000		pull	r8
00000082	A1904000		pull	r9
00000083	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
00000084	A0409000		push	r9
00000085	A0408000		push	r8
00000086	A0405000		push	PAR
00000087	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
00000088	42502800		lix		PAR,0x2800
00000089	84805000		lpl		r8
0000008a	25889000		and		r8,r8,r9
0000008b	85508000		spl		r8
0000008c	A1504000		pull	PAR
0000008d	A1804000		pull	r8
0000008e	A1904000		pull	r9
0000008f	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
00000090	A0409000		push	r9
00000091	A0405000		push	PAR
00000092	42503802		lix		PAR,0x3802		; address of the mSec counter
00000093	84905000		lpl		r9				; read the peripheral counter into r9
00000094	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
00000095	84905000		lpl		r9				; check the elapsed time counter
00000096	38389000		cmp		r8,r9
00000097	CCFFFFFE		blt		loop_delay_mS
00000098	A1504000		pull	PAR
00000099	A1904000		pull	r9
0000009a	A1704000		pull	PC

;	
; delay_uS - delay for the number of uSecs
; pass mSec delay in r8
; Uses routine uses r9 (saved and restored)
;

delay_uS:
0000009b	A0409000		push	r9
0000009c	A0405000		push	PAR
0000009d	42503801		lix		PAR,0x3801		; address of the uSec counter
0000009e	84905000		lpl		r9				; read the peripheral counter into r9
0000009f	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_uS:
000000a0	84905000		lpl		r9				; check the elapsed time counter
000000a1	38389000		cmp		r8,r9
000000a2	CCFFFFFE		blt		loop_delay_uS
000000a3	A1504000		pull	PAR
000000a4	A1904000		pull	r9
000000a5	A1704000		pull	PC
