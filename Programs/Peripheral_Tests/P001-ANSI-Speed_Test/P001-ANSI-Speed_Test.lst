;
; P001-ANSI-Speed_Test - Test the speed of the ANSI display hardware
;
; Tests include
;	1 - Character write speed (no scroll)
;	2 - Screen clear speed
;	3 - Screen scroll speed
;

prompt:			.string "ANSI VDU Speed Tests"
; lineBuff is 80 characters long
lineBuff:		.string "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
syntaxError:	.string "Syntax error"
runningString:	.string "Running..."
hitAnyKey:		.string "Hit any key to exit..."
serialOverflow:	.string "Serial port overflow"
testMetric:		.string "Ran test 1024 times in (uSecs) : "
menuItem_01:	.string "01 - Character write speed"
menuItem_02:	.string "02 - Screen clear speed"
menuItem_03:	.string "03 - Screen scroll speed"

;
; Read a line from the UART and parse the line
;

main:
00000000	D4000171		bsr		clearANSIScreenAndUART
00000001	42800000		lix		r8,prompt.lower
00000002	D400015C		bsr		printLine
00000003	D4000004		bsr		printMenu
00000004	D40000E0		bsr		getLine
00000005	D400000B		bsr		callTests
00000006	C0FFFFFA		bra		main

;
; printMenu - Print the menu
;

printMenu:
00000007	A0408000		push	r8
00000008	428000DC		lix		r8,menuItem_01.lower
00000009	D4000155		bsr		printLine
0000000a	428000F8		lix		r8,menuItem_02.lower
0000000b	D4000153		bsr		printLine
0000000c	42800110		lix		r8,menuItem_03.lower
0000000d	D4000151		bsr		printLine
0000000e	A1804000		pull	r8
0000000f	A1704000		pull	PC

;
; callTests - 
; line is in lineBuff
;	1 - Character write speed
;	2 - Screen clear speed
;	3 - Screen scroll speed
; Uses r8 for the command
;

callTests:
00000010	A0408000		push	r8
00000011	42800018		lix		r8,lineBuff.lower
00000012	D4000101		bsr		hexToSevenSeg
; testCharWriteSpeed
00000013	39380001		cmpi	r8,0x01
00000014	D2000003		bne		skipTo2
00000015	D4000010		bsr		testCharWriteSpeed
00000016	C000000D		bra		doneTests
; testScreenClearSpeed
skipTo2:
00000017	39380002		cmpi	r8,0x02
00000018	D2000003		bne		skipTo3
00000019	D4000034		bsr		testScreenClearSpeed
0000001a	C0000009		bra		doneTests
; testScreenScrollSpeed
skipTo3:
0000001b	39380003		cmpi	r8,0x03
0000001c	D2000003		bne		skipToEnd
0000001d	D4000051		bsr		testScreenScrollSpeed
0000001e	C0000005		bra		doneTests
; testScreenScrollSpeed
skipToEnd:
0000001f	A0408000		push	r8
00000020	4280006C		lix		r8,syntaxError.lower
00000021	D4000132		bsr		printString
00000022	A1804000		pull	r8
doneTests:
00000023	A1804000		pull	r8
00000024	A1704000		pull	PC
	
;
; testCharWriteSpeed - Test Char Write Speed
; Use microsecond counter - 0x3801 is microsecond counter
; Measured 0x31F = 799 uS for 1024 chars or 0.78 uS/char or 1.2M chars/sec
;

testCharWriteSpeed:
00000025	A0405000		push	PAR
00000026	A0408000		push	r8
00000027	A0409000		push	r9
00000028	A040A000		push	r10
00000029	D4000073		bsr		clearANSIScreen
0000002a	4280000A		lix		r8,10		; Delay for 10 mS to give the screen time to clear
0000002b	D4000151		bsr		delay_mS
0000002c	42800031		lix		r8,0x31		; char to print is '1'
0000002d	42A00400		lix		r10,1024	; print 1024 characters
0000002e	42503801		lix		PAR,0x3801	; microsecond counter
0000002f	84905000		lpl		r9			; read the counter
anotherCharTest:
00000030	42500000		lix		PAR,0x0		; ANSI Screen Status (UART style)
waitScreenTxStat3:
00000031	84B05000		lpl		r11			; Read Status into r9
00000032	2BBB0002		andi	r11,r11,0x2
00000033	C3FFFFFE		bez 	waitScreenTxStat3
00000034	42500001		lix 	PAR,0x1		; ANSI Screen Data (UART style)
00000035	85508000		spl		r8			; echo the character
00000036	23AA0001		subi	r10,r10,1
00000037	C7FFFFF9		bnz		anotherCharTest
00000038	42503801		lix		PAR,0x3801	; microsecond counter
00000039	84805000		lpl		r8			; read the counter
0000003a	22898000		sub		r8,r9,r8	; How many microseconds to clear screen?
0000003b	D40000CB		bsr		wr7Seg8Dig	; put number of microseconds out to 7 seg display
0000003c	D400012E		bsr		newLine
0000003d	A0408000		push	r8
0000003e	428000B8		lix		r8,testMetric.lower
0000003f	D4000114		bsr		printString
00000040	A1804000		pull	r8
00000041	D4000083		bsr		printLong
00000042	D4000128		bsr		newLine
00000043	42800088		lix		r8,hitAnyKey.lower
00000044	D400011A		bsr		printLine
reload001:
00000045	D4000160		bsr		checkForCharAndDiscard
00000046	39380000		cmpi	r8,0
00000047	D1FFFFFE		beq		reload001
00000048	A1A04000		pull	r10
00000049	A1904000		pull	r9
0000004a	A1804000		pull	r8
0000004b	A1504000		pull	PAR
0000004c	A1704000		pull	PC
	
;
; testScreenClearSpeed - Test Screen Clear Speed
; 1024 screen clears take 0x190CC = 102,604 uS
;	100.2 uS to clear the screen
;

testScreenClearSpeed:
0000004d	A0405000		push	PAR
0000004e	A0408000		push	r8
0000004f	A0409000		push	r9
00000050	A040A000		push	r10
00000051	4280000A		lix		r8,10		; Delay for 10 mS to give the screen time to clear
00000052	D400012A		bsr		delay_mS
00000053	42A00400		lix		r10,1024	; clear screen 1024 times
00000054	42503801		lix		PAR,0x3801	; microsecond counter
00000055	84905000		lpl		r9			; read the counter
clearAgain:
00000056	D4000046		bsr		clearANSIScreen
00000057	23AA0001		subi	r10,r10,1
00000058	C7FFFFFE		bnz		clearAgain
00000059	42503801		lix		PAR,0x3801	; microsecond counter
0000005a	84805000		lpl		r8			; read the counter
0000005b	22898000		sub		r8,r9,r8	; How many microseconds to clear screen?
0000005c	D40000AA		bsr		wr7Seg8Dig	; put number of microseconds out to 7 seg display
0000005d	D400010D		bsr		newLine
0000005e	A0408000		push	r8
0000005f	428000B8		lix		r8,testMetric.lower
00000060	D40000F3		bsr		printString
00000061	A1804000		pull	r8
00000062	D4000062		bsr		printLong
00000063	D4000107		bsr		newLine
00000064	42800088		lix		r8,hitAnyKey.lower
00000065	D40000EE		bsr		printString
reload002:
00000066	D400013F		bsr		checkForCharAndDiscard
00000067	39380000		cmpi	r8,0
00000068	D1FFFFFE		beq		reload002
00000069	A1A04000		pull	r10
0000006a	A1904000		pull	r9
0000006b	A1804000		pull	r8
0000006c	A1504000		pull	PAR
0000006d	A1704000		pull	PC
	
;
; testScreenScrollSpeed - Test Screen Scroll Speed
; 1024 lines in 0x0FC7 uSecs = 4,039 uS
;	 3.94 uS to scroll screen
;

testScreenScrollSpeed:
0000006e	A0405000		push	PAR
0000006f	A0408000		push	r8
00000070	A0409000		push	r9
00000071	A040A000		push	r10
00000072	A040B000		push	r11
00000073	4280000A		lix		r8,0x0A				; Line Feed
00000074	42A0001A		lix		r10,26				; prescroll by 26 lines to get to the bottom of the screen
scrollAgain:
00000075	D4000046		bsr		putCharToANSIScreen
00000076	23AA0001		subi	r10,r10,1
00000077	C7FFFFFE		bnz		scrollAgain
00000078	428001F4		lix		r8,500		; Delay for 500 mS to give the screen time to scroll
00000079	D4000103		bsr		delay_mS
0000007a	4280000A		lix		r8,0x0A				; Line Feed
0000007b	42A00400		lix		r10,1024
0000007c	42503801		lix		PAR,0x3801	; microsecond counter
0000007d	84905000		lpl		r9			; read the counter
anotherScroll:
0000007e	42500000		lix		PAR,0x0		; ANSI Screen Status (UART style)
waitScreenTxStat2:
0000007f	84B05000		lpl		r11			; Read Status into r9
00000080	2BBB0002		andi	r11,r11,0x2
00000081	C3FFFFFE		bez 	waitScreenTxStat2
00000082	42500001		lix 	PAR,0x1		; ANSI Screen Data (UART style)
00000083	85508000		spl		r8			; echo the character
00000084	23AA0001		subi	r10,r10,1
00000085	C7FFFFF9		bnz		anotherScroll
00000086	42503801		lix		PAR,0x3801	; microsecond counter
00000087	84805000		lpl		r8			; read the counter
00000088	22898000		sub		r8,r9,r8	; How many microseconds to clear screen?
00000089	D400007D		bsr		wr7Seg8Dig	; put number of microseconds out to 7 seg display
0000008a	D40000E0		bsr		newLine
0000008b	A0408000		push	r8
0000008c	428000B8		lix		r8,testMetric.lower
0000008d	D40000C6		bsr		printString
0000008e	A1804000		pull	r8
0000008f	D4000035		bsr		printLong
00000090	D40000DA		bsr		newLine
00000091	42800088		lix		r8,hitAnyKey.lower
00000092	D40000C1		bsr		printString
reload003:
00000093	D4000112		bsr		checkForCharAndDiscard
00000094	39380000		cmpi	r8,0
00000095	D1FFFFFE		beq		reload003
00000096	A1B04000		pull	r11
00000097	A1A04000		pull	r10
00000098	A1904000		pull	r9
00000099	A1804000		pull	r8
0000009a	A1504000		pull	PAR
0000009b	A1704000		pull	PC
	
;
; clearANSIScreenAndUART - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearANSIScreen:
0000009c	A0408000		push	r8				; save r8
0000009d	4280001B		lix		r8,0x1b			; ESC
0000009e	42500000		lix		PAR,0x0		; ANSI Screen Status (UART style)
waitScreenTxStat4:
0000009f	84B05000		lpl		r11			; Read Status into r9
000000a0	2BBB0002		andi	r11,r11,0x2
000000a1	C3FFFFFE		bez 	waitScreenTxStat4
000000a2	42500001		lix 	PAR,0x1		; ANSI Screen Data (UART style)
000000a3	85508000		spl		r8			; echo the character
000000a4	4280005B		lix		r8,0x5b			; [
000000a5	42500000		lix		PAR,0x0		; ANSI Screen Status (UART style)
waitScreenTxStat5:
000000a6	84B05000		lpl		r11			; Read Status into r9
000000a7	2BBB0002		andi	r11,r11,0x2
000000a8	C3FFFFFE		bez 	waitScreenTxStat5
000000a9	42500001		lix 	PAR,0x1		; ANSI Screen Data (UART style)
000000aa	85508000		spl		r8			; echo the character
000000ab	42800032		lix		r8,0x32			; 2
000000ac	42500000		lix		PAR,0x0		; ANSI Screen Status (UART style)
waitScreenTxStat6:
000000ad	84B05000		lpl		r11			; Read Status into r9
000000ae	2BBB0002		andi	r11,r11,0x2
000000af	C3FFFFFE		bez 	waitScreenTxStat6
000000b0	42500001		lix 	PAR,0x1		; ANSI Screen Data (UART style)
000000b1	85508000		spl		r8			; echo the character
000000b2	4280004A		lix		r8,0x4A			; J
000000b3	42500000		lix		PAR,0x0		; ANSI Screen Status (UART style)
waitScreenTxStat7:
000000b4	84B05000		lpl		r11			; Read Status into r9
000000b5	2BBB0002		andi	r11,r11,0x2
000000b6	C3FFFFFE		bez 	waitScreenTxStat7
000000b7	42500001		lix 	PAR,0x1		; ANSI Screen Data (UART style)
000000b8	85508000		spl		r8			; echo the character
000000b9	A1804000		pull	r8
000000ba	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
;	push	r8
000000bb	A0409000		push	r9
;	push	PAR
000000bc	42500000		lix		PAR,0x0		; ANSI Screen Status (UART style)
waitScreenTxStat:
000000bd	84905000		lpl		r9			; Read Status into r9
000000be	2B990002		andi	r9,r9,0x2
000000bf	C3FFFFFE		bez 	waitScreenTxStat
000000c0	42500001		lix 	PAR,0x1		; ANSI Screen Data (UART style)
000000c1	85508000		spl		r8			; echo the character
;	pull	PAR
000000c2	A1904000		pull	r9
;	pull	r8
000000c3	A1704000		pull	PC
	
;
; printLong
; r8 contains the long value to print
;

printLong:
000000c4	A0408000		push	r8
000000c5	A0409000		push	r9
000000c6	A040A000		push	r10
000000c7	A0408000		push	r8				; temporarily save r8
000000c8	42800030		lix		r8,0x30
000000c9	D40000F0		bsr		writeANSI_UART
000000ca	42800078		lix		r8,0x78
000000cb	D40000EE		bsr		writeANSI_UART
000000cc	A1804000		pull	r8				; restore r8
000000cd	42900008		lix		r9,8			; loop counter
doNextPrintLong:
000000ce	34808000		rol1	r8,r8
000000cf	34808000		rol1	r8,r8
000000d0	34808000		rol1	r8,r8
000000d1	34808000		rol1	r8,r8
000000d2	D4000007		bsr		printHexVal
000000d3	23990001		subi	r9,r9,1
000000d4	C7FFFFFA		bnz		doNextPrintLong
000000d5	A1A04000		pull	r10
000000d6	A1904000		pull	r9
000000d7	A1804000		pull	r8
000000d8	A1704000		pull	PC

;
; printHexVal
;

printHexVal:
000000d9	A0408000		push	r8
000000da	2B88000F		andi	r8,r8,0xf
000000db	39380009		cmpi	r8,9
000000dc	CC000004		blt		printHexLetter
000000dd	21880030		addi	r8,r8,0x30
000000de	D40000DB		bsr		writeANSI_UART
000000df	C0000003		bra		donePrintHexVal
printHexLetter:
000000e0	21880037		addi	r8,r8,0x37		; 'A' - 10
000000e1	D40000D8		bsr		writeANSI_UART
donePrintHexVal:
000000e2	A1804000		pull	r8
000000e3	A1704000		pull	PC

;
; getLine - Reads the UART and fills a buffer with the characters received
; r8 received character - Character received from the UART
; r9 is the input buffer length
; r10 used to test the backspace doesn't go past the start of the buffer
; DAR points to lineBuff current character position
;

getLine:
000000e4	A0408000		push	r8
000000e5	A0409000		push	r9
000000e6	A040A000		push	r10
000000e7	A0406000		push	DAR
000000e8	42600018		lix		DAR,lineBuff.lower	; DAR pointer = start of line buffer
000000e9	4290004F		lix		r9,79				; max number of chars in the line buffer
loopReadLine:
000000ea	D40000AB		bsr		waitReadPS2_UART	; Get a character from the PS/2 or UART
000000eb	D40000CE		bsr		writeANSI_UART		; Echo character back to the ANSI Display and UART
000000ec	3938000D		cmpi	r8,0x0D				; check if received char was end of line
000000ed	D1000009		beq		gotEOL
000000ee	3938007F		cmpi	r8,0x7F
000000ef	D100000C		beq		gotBackspace
000000f0	69608000		sdbp	r8
000000f1	23990001		subi	r9,r9,1
000000f2	C7FFFFF8		bnz		loopReadLine		; Next char would overflow
000000f3	428000A0		lix		r8,serialOverflow.lower
000000f4	D40000C5		bsr		writeANSI_UART		; Put the character to the screen
000000f5	C000000C		bra		doneHandlingLine
gotEOL:
000000f6	4280000A		lix		r8,0x0A				; Echo line feed after CR
000000f7	D40000C2		bsr		writeANSI_UART		; Put the character to the screen
000000f8	D4000050		bsr		putCharToUART		; Echo character back to the UART
000000f9	61600000		sdb		r0					; null at end of line read
000000fa	C0000007		bra		doneHandlingLine
gotBackspace:
000000fb	23660001		subi	DAR,DAR,1
000000fc	42A00018		lix		r10,lineBuff.lower	; r10 pointer = start of line buffer
000000fd	383A6000		cmp		r10,DAR
000000fe	CFFFFFEC		bgt		loopReadLine
000000ff	216A0000		addi	DAR,r10,0
00000100	C0FFFFEA		bra		loopReadLine
doneHandlingLine:
00000101	A1604000		pull	DAR
00000102	A1A04000		pull	r10
00000103	A1904000		pull	r9
00000104	A1804000		pull	r8
00000105	A1704000		pull	PC

; wr7Seg8Dig
; passed r8 - value to send to the 7 seg display

wr7Seg8Dig:
00000106	A0405000		push	PAR
00000107	A0408000		push	r8
00000108	42503000		lix		PAR,0x3000		; Seven Segment LED lines
00000109	85508000		spl		r8				; Write out LED bits
0000010a	A1804000		pull	r8
0000010b	A1504000		pull	PAR
0000010c	A1704000		pull	PC
	
;
; readSws
; switches value returned in r8
; switches are high when pressed
; Switches d0-d2 are the pushbutton switches (inverted in FPGA hardware)
; 	Pushbutton switches are debounced
; Switches d3-10 are the DIP switches (not inverted)
;

readSws:
0000010d	A0405000		push	PAR
0000010e	42502000		lix		PAR,0x2000	; Switches address
0000010f	84805000		lpl		r8			; Read switches into r9
00000110	2B880FFF		andi	r8,r8,0xfff	; just the switches
00000111	A1504000		pull	PAR
00000112	A1704000		pull	PC
	

;
; hexToSevenSeg - Convert a two ASCII digit value into a hex byte
; Passed: r8 points to the start of the hex string
; Returned: r8 contains the hex value of the string
; Put the byte to the Seven Segment Display
;

hexToSevenSeg:
00000113	A0409000		push	r9
00000114	A0406000		push	DAR
00000115	A0405000		push	PAR
00000116	42900000		lix		r9,0
00000117	21680000		addi	DAR,r8,0		; Address of lineBuff (passed into this routine)
00000118	68806000		ldbp	r8				; read the first character of the line
00000119	D4000010		bsr		asciiToHex
0000011a	28998000		or		r9,r9,r8
0000011b	30909000		sl1		r9,r9
0000011c	30909000		sl1		r9,r9
0000011d	30909000		sl1		r9,r9
0000011e	30909000		sl1		r9,r9
	;add		DAR,DAR,ONE
0000011f	60806000		ldb		r8				; read the second character of the line
00000120	D4000009		bsr		asciiToHex
00000121	28998000		or		r9,r9,r8
00000122	42503000		lix		PAR,0x3000		; seven segment display
00000123	85509000		spl		r9
00000124	21890000		addi	r8,r9,0
00000125	A1504000		pull	PAR
00000126	A1604000		pull	DAR
00000127	A1904000		pull	r9
00000128	A1704000		pull	PC

;
; asciiToHex - Convert a single ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
; Result is returned in r8
;	0x0-0xf - Legal Values
;	'DEAD' - Not hex character
;

asciiToHex:
00000129	39380066		cmpi	r8,0x66			; past 'f'
0000012a	CC000011		blt		a2h_Error
0000012b	39380030		cmpi	r8,0x30			; below '0'
0000012c	CF00000F		bgt		a2h_Error
0000012d	3938003A		cmpi	r8,0x3A			; '0' - '9'
0000012e	CF000009		bgt		gotDigit
0000012f	39380041		cmpi	r8,0x41			; ':' - '@'
00000130	CF00000B		bgt		a2h_Error
00000131	39380047		cmpi	r8,0x47			; 'A' - 'F'
00000132	CC000007		blt		gotUpperLetter
00000133	39380061		cmpi	r8,0x61			; 'G' - 'tick'
00000134	CF000007		bgt		a2h_Error
; Lower case letter
00000135	23880057		subi	r8,r8,0x57
00000136	C0000008		bra		doneConvA2H
; number 0-9
gotDigit:
00000137	23880030		subi	r8,r8,0x30
00000138	C0000006		bra		doneConvA2H
; A-F
gotUpperLetter:
00000139	23880037		subi	r8,r8,0x37
0000013a	C0000004		bra		doneConvA2H
a2h_Error:
0000013b	4280006C		lix		r8,syntaxError.lower
0000013c	D4000017		bsr		printString
0000013d	4280DEAD		lix		r8,0xDEAD
doneConvA2H:
0000013e	A1704000		pull	PC

;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
0000013f	A0405000		push	PAR
00000140	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
00000141	84805000		lpl		r8			; Read Status into r8
00000142	2B880001		andi 	r8,r8,0x1
00000143	C3FFFFFE		bez 	waitUartRxStat
00000144	42501801		lix 	PAR,0x1801
00000145	84805000		lpl		r8
00000146	A1504000		pull	PAR
00000147	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
00000148	A0409000		push	r9
00000149	A0405000		push	PAR
0000014a	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
0000014b	84905000		lpl		r9			; Read Status into r9
0000014c	2B990002		andi	r9,r9,0x2
0000014d	C3FFFFFE		bez 	waitUartTxStat
0000014e	42501801		lix 	PAR,0x1801
0000014f	85508000		spl		r8			; echo the character
00000150	A1504000		pull	PAR
00000151	A1904000		pull	r9
00000152	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
00000153	A0408000		push	r8					; save r8
00000154	A0406000		push	DAR
00000155	20680000		add		DAR,r8,ZERO			; set the start of the string
nextChar:
00000156	68806000		ldbp	r8					; get the character01
00000157	39380000		cmpi	r8,0x0				; Null terminated string
00000158	D1000003		beq		donePrStr			; done if null
00000159	D4000060		bsr		writeANSI_UART		; write out the character
0000015a	C0FFFFFC		bra		nextChar
donePrStr:
0000015b	A1604000		pull	DAR					; restore DAR
0000015c	A1804000		pull	r8					; restore r8
0000015d	A1704000		pull	PC					; rts
	
;
; printLine - Print a screen to the current screen position with CRLF at the end
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printLine:
0000015e	A0408000		push	r8					; save r8
0000015f	A0406000		push	DAR
00000160	21680000		addi	DAR,r8,0x0			; set the start of the string
nextChar2:
00000161	68806000		ldbp	r8					; get the character
00000162	39380000		cmpi	r8,0x0				; Null terminated string
00000163	D1000003		beq		donePrStr2			; done if null
00000164	D4000055		bsr		writeANSI_UART	; write out the character
00000165	C0FFFFFC		bra		nextChar2
donePrStr2:
00000166	D4000004		bsr		newLine
00000167	A1604000		pull	DAR					; restore DAR
00000168	A1804000		pull	r8					; restore r8
00000169	A1704000		pull	PC					; rts
	
;
; newLine - Print out a newline (CR-LF)
;

newLine:
0000016a	A0408000		push	r8
0000016b	4280000A		lix		r8,0x0A				; Line Feed
0000016c	D400004D		bsr		writeANSI_UART	; Put the character to the screen
0000016d	4280000D		lix		r8,0x0D				; Carriage Return
0000016e	D400004B		bsr		writeANSI_UART		; Echo character back to the UART
0000016f	A1804000		pull	r8
00000170	A1704000		pull	PC

;
; clearANSIScreenAndUART - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearANSIScreenAndUART:
00000171	A0408000		push	r8				; save r8
00000172	4280001B		lix		r8,0x1b			; ESC
00000173	D4000046		bsr		writeANSI_UART
00000174	4280005B		lix		r8,0x5b			; [
00000175	D4000044		bsr		writeANSI_UART
00000176	42800032		lix		r8,0x32			; 2
00000177	D4000042		bsr		writeANSI_UART
00000178	4280004A		lix		r8,0x4A			; J
00000179	D4000040		bsr		writeANSI_UART
0000017a	A1804000		pull	r8
0000017b	A1704000		pull	PC				; rts

;
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r8,r9 (restores r8, r9 when returning)
;

delay_mS:
0000017c	A0408000		push	r8
0000017d	A0409000		push	r9
0000017e	42503802		lix		PAR,0x3802		; address of the mSec counter
0000017f	84905000		lpl		r9				; read the peripheral counter into r9
00000180	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
00000181	84905000		lpl		r9				; check the elapsed time counter
00000182	38389000		cmp		r8,r9
00000183	CCFFFFFE		blt		loop_delay_mS
00000184	A1904000		pull	r9
00000185	A1804000		pull	r8
00000186	A1704000		pull	PC

;
; getPS2Char
; returns character received in r8
; Routine uses r8,r9 (restores r8, r9 when returning)
;

getPS2Char:
00000187	A0408000		push	r8
00000188	A0409000		push	r9
00000189	A0405000		push	PAR
0000018a	42501000		lix		PAR,0x1000	; PS/2 Status
waitPS2RxStat:
0000018b	84905000		lpl		r9			; Read Status into r9
0000018c	2B990001		andi	r9,r9,0x1
0000018d	C3FFFFFE		bez 	waitPS2RxStat
getCharFromPS2:
0000018e	42500800		lix 	PAR,0x0800
0000018f	84805000		lpl		r8
00000190	42501000		lix		PAR,0x1000	; PS/2 Status
whilePS2RxStat:
00000191	A1504000		pull	PAR
00000192	A1904000		pull	r9
00000193	A1804000		pull	r8
00000194	A1704000		pull	PC

;
; waitReadPS2_UART
; wait for character from either 
;	the PS/2 keyboard and UART serial
; r8 = read character
;

waitReadPS2_UART:
00000195	A0405000		push	PAR
checkCharFromPS2:
00000196	42501000		lix		PAR,0x1000			; PS/2 Status
00000197	84805000		lpl		r8					; Read Status
00000198	2B880001		andi	r8,r8,0x1			; =1 when char received
00000199	C3000004		bez 	checkUARTStat
0000019a	42500800		lix 	PAR,0x0800			; PS/2 Data
0000019b	84805000		lpl		r8
0000019c	C0000007		bra		gotPS2Char
checkUARTStat:
0000019d	42501800		lix		PAR,0x1800			; UART Status
0000019e	84805000		lpl		r8					; Read Status
0000019f	2B880001		andi 	r8,r8,0x1			; =1 when char received
000001a0	C3FFFFF6		bez 	checkCharFromPS2
000001a1	42501801		lix 	PAR,0x1801			; UART Data
000001a2	84805000		lpl		r8
gotPS2Char:
000001a3	A1504000		pull	PAR
000001a4	A1704000		pull	PC
	
; checkForCharAndDiscard - Check for a character in UART or PS/2
; Discard the character received
; return whether char was present (1) or no char was present (0)

checkForCharAndDiscard:
000001a5	A0405000		push	PAR
000001a6	42501000		lix		PAR,0x1000		; PS/2 Status
000001a7	84805000		lpl		r8				; Read Status
000001a8	2B880001		andi	r8,r8,0x1		; =1 when char received
000001a9	C3000005		bez 	checkUARTStat2
000001aa	42500800		lix 	PAR,0x0800		; PS/2 Data
000001ab	84805000		lpl		r8				; throw away char
000001ac	42800001		lix		r8,0x1
000001ad	C000000A		bra		gotChar
checkUARTStat2:
000001ae	42501800		lix		PAR,0x1800		; UART Status
000001af	84805000		lpl		r8				; Read Status
000001b0	2B880001		andi 	r8,r8,0x1		; =1 when char received
000001b1	C3000005		bez 	noCharReceived
000001b2	42501801		lix 	PAR,0x1801		; UART Data
000001b3	84805000		lpl		r8
000001b4	42800001		lix		r8,1
000001b5	C0000002		bra		gotChar
noCharReceived:
000001b6	42800000		lix		r8,0
gotChar:
000001b7	A1504000		pull	PAR
000001b8	A1704000		pull	PC

;
; writeANSI_UART
; write out a character to both 
;	the ANSI screen and the UART
;

writeANSI_UART:
000001b9	D4FFFF02		bsr		putCharToANSIScreen
000001ba	D4FFFF8E		bsr		putCharToUART
000001bb	A1704000		pull	PC
