;
; inputLine - Read a line from the UART serial input
; Echo line to the serial port and to the screen
;

prompt:			.string "R32V2020> "
; lineBuff is 80 characters long
lineBuff:		.string "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
syntaxError:	.string "Syntax error"

;
; Read UART character and put it to the ANSI VGA Display
;

main:
00000000	D4000058		bsr		clearScreen
00000001	42800000		lix		r8,prompt.lower
00000002	D400004A		bsr		printString
loopRead:
00000003	D400000A		bsr		getLine
00000004	4280000C		lix		r8,lineBuff.lower	; DAR pointer = start of line buffer
00000005	D4000047		bsr		printString			; Echo the line
00000006	4280000A		lix		r8,0x0A				; Line Feed
00000007	D4000060		bsr		putCharToANSIScreen	; Put the character to the screen
00000008	4280000D		lix		r8,0x0D				; Carriage Return
00000009	D400005E		bsr		putCharToANSIScreen	; Put the character to the screen
0000000a	D4000034		bsr		putCharToUART		; Echo character back to the UART
0000000b	D4000029		bsr		parseLine
0000000c	C0FFFFF7		bra		loopRead

;
; getLine - Reads the UART and fills a buffer with the characters received
; r8 received character - Character received from the UART
; r9 is constant - ENTER key on keyboard
; r10 is the input buffer length
; r11 is the BACK key on keyboard
; r12 used to test the backspace doesn't go past the start of the buffer
; DAR points to lineBuff current character position
;

getLine:
0000000d	A0408000		push	r8
0000000e	A0409000		push	r9
0000000f	A040A000		push	r10
00000010	A040B000		push	r11
00000011	A040C000		push	r12
00000012	A0406000		push	DAR
00000013	4260000C		lix		DAR,lineBuff.lower	; DAR pointer = start of line buffer
00000014	42B0007F		lix		r11,0x7F			; BACK key - rubout
00000015	42A0004F		lix		r10,79				; number of chars in the line buffer
00000016	4290000D		lix		r9,0x0D				; ENTER key - ends the line
loopReadLine:
00000017	D400001E		bsr		waitGetCharFromUART	; Get a character from the UART
00000018	D400004F		bsr		putCharToANSIScreen	; Put the character to the screen
00000019	D4000025		bsr		putCharToUART		; Echo character back to the UART
0000001a	38389000		cmp		r8,r9				; check if received char was end of line
0000001b	D1000007		beq		gotEOL
0000001c	3838B000		cmp		r8,r11
0000001d	D100000A		beq		gotBackspace
0000001e	61608000		sdb		r8
0000001f	20661000		add		DAR,DAR,ONE			; increment to next long in buffer
00000020	20AA2000		add		r10,r10,MINUS1
00000021	C7FFFFF6		bnz		loopReadLine		; Next char would overflow
	; tbd add code for line too long	
gotEOL:
00000022	4280000A		lix		r8,0x0A				; Echo line feed after CR
00000023	D4000044		bsr		putCharToANSIScreen	; Put the character to the screen
00000024	D400001A		bsr		putCharToUART		; Echo character back to the UART
00000025	61600000		sdb		r0					; null at end of line read
00000026	C0000007		bra		doneHandlingLine
gotBackspace:
00000027	20662000		add		DAR,DAR,MINUS1
00000028	42C0000C		lix		r12,lineBuff.lower	; r12 pointer = start of line buffer
00000029	383C6000		cmp		r12,DAR
0000002a	CFFFFFED		bgt		loopReadLine
0000002b	206C0000		add		DAR,r12,r0
0000002c	C0FFFFEB		bra		loopReadLine
doneHandlingLine:
0000002d	A1604000		pull	DAR
0000002e	A1C04000		pull	r12
0000002f	A1B04000		pull	r11
00000030	A1A04000		pull	r10
00000031	A1904000		pull	r9
00000032	A1804000		pull	r8
00000033	A1704000		pull	PC

;
; parseLine
;
	
parseLine:
00000034	A1704000		pull	PC
	
;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
00000035	A0405000		push	PAR
00000036	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
00000037	84805000		lpl		r8			; Read Status into r8
00000038	25881000		and 	r8,r8,ONE
00000039	C3FFFFFE		bez 	waitUartRxStat
0000003a	42501801		lix 	PAR,0x1801
0000003b	84805000		lpl		r8
0000003c	A1504000		pull	PAR
0000003d	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
0000003e	A0409000		push	r9
0000003f	A0405000		push	PAR
00000040	A040A000		push	r10
00000041	42A00002		lix		r10,0x2
00000042	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
00000043	84905000		lpl		r9			; Read Status into r9
00000044	2599A000		and 	r9,r9,r10
00000045	C3FFFFFE		bez 	waitUartTxStat
00000046	42501801		lix 	PAR,0x1801
00000047	85508000		spl		r8			; echo the character
00000048	A1A04000		pull	r10
00000049	A1504000		pull	PAR
0000004a	A1904000		pull	r9
0000004b	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
0000004c	A0408000		push	r8				; save r8
0000004d	A0406000		push	DAR
0000004e	20680000		add		DAR,r8,ZERO		; set the start of the string
nextChar:
0000004f	60806000		ldb		r8				; get the character
00000050	38380000		cmp		r8,ZERO			; Null terminated string
00000051	D1000004		beq		donePrStr		; done if null
00000052	D4000015		bsr		putCharToANSIScreen	; write out the character
00000053	20661000		add		DAR,DAR,r1		; Point to next character
00000054	C0FFFFFB		bra		nextChar
donePrStr:
00000055	A1604000		pull	DAR				; restore DAR
00000056	A1804000		pull	r8				; restore r8
00000057	A1704000		pull	PC				; rts
	
;
; clearScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen:
00000058	A0408000		push	r8				; save r8
00000059	4280001B		lix		r8,0x1b			; ESC
0000005a	D400000D		bsr		putCharToANSIScreen
0000005b	D4FFFFE3		bsr		putCharToUART
0000005c	4280005B		lix		r8,0x5b			; [
0000005d	D400000A		bsr		putCharToANSIScreen
0000005e	D4FFFFE0		bsr		putCharToUART
0000005f	42800032		lix		r8,0x32			; 2
00000060	D4000007		bsr		putCharToANSIScreen
00000061	D4FFFFDD		bsr		putCharToUART
00000062	4280004A		lix		r8,0x4A			; J
00000063	D4000004		bsr		putCharToANSIScreen
00000064	D4FFFFDA		bsr		putCharToUART
00000065	A1804000		pull	r8
00000066	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
00000067	A0409000		push	r9
00000068	A0405000		push	PAR
00000069	A040A000		push	r10
0000006a	42A00002		lix		r10,0x2		; TxReady bit
0000006b	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
0000006c	84905000		lpl		r9			; Read Status into r9
0000006d	2599A000		and 	r9,r9,r10
0000006e	C3FFFFFE		bez 	waitScreenTxStat
0000006f	42500001		lix 	PAR,0x1
00000070	85508000		spl		r8			; echo the character
00000071	A1A04000		pull	r10
00000072	A1504000		pull	PAR
00000073	A1904000		pull	r9
00000074	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
00000075	A0408000		push	r8
00000076	42800000		lix		r8,0			; first note is 0
00000077	D4000007		bsr 	setNote
00000078	D400000D		bsr		enableBuzzer
00000079	428000FA		lix		r8,250			; count for 1 Sec
0000007a	D4000023		bsr		delay_mS		; call delay_ms
0000007b	D4000016		bsr		disableBuzzer
0000007c	A1804000		pull	r8
0000007d	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
0000007e	A0408000		push	r8
0000007f	A0405000		push	PAR
00000080	42504000		lix		PAR,0x4000
00000081	85508000		spl		r8
00000082	A1504000		pull	PAR
00000083	A1804000		pull	r8
00000084	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
00000085	A0409000		push	r9
00000086	A0408000		push	r8
00000087	A0405000		push	PAR
00000088	42900010		lix		r9,0x0010		; Buzzer Enable line
00000089	42502800		lix		PAR,0x2800
0000008a	84805000		lpl		r8
0000008b	24889000		or		r8,r8,r9
0000008c	85508000		spl		r8
0000008d	A1504000		pull	PAR
0000008e	A1804000		pull	r8
0000008f	A1904000		pull	r9
00000090	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
00000091	A0409000		push	r9
00000092	A0408000		push	r8
00000093	A0405000		push	PAR
00000094	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
00000095	42502800		lix		PAR,0x2800
00000096	84805000		lpl		r8
00000097	25889000		and		r8,r8,r9
00000098	85508000		spl		r8
00000099	A1504000		pull	PAR
0000009a	A1804000		pull	r8
0000009b	A1904000		pull	r9
0000009c	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
0000009d	A0409000		push	r9
0000009e	42503802		lix		PAR,0x3802		; address of the mSec counter
0000009f	84905000		lpl		r9				; read the peripheral counter into r9
000000a0	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
000000a1	84905000		lpl		r9				; check the elapsed time counter
000000a2	38389000		cmp		r8,r9
000000a3	CCFFFFFE		blt		loop_delay_mS
000000a4	A1904000		pull	r9
000000a5	A1704000		pull	PC

; wr7Seg8Dig
; passed r8 - value to send to the 7 seg display

wr7Seg8Dig:
000000a6	A0405000		push	PAR
000000a7	42503000		lix		PAR,0x3000		; Seven Segment LED lines
000000a8	85508000		spl		r8				; Write out LED bits
000000a9	A1504000		pull	PAR
000000aa	A1704000		pull	PC
