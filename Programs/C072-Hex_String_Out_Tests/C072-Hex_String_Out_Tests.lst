;
; C072-Hex_String_Out_Tests - Send out a hex long as a string of 8 hex digitsRead
;

prompt:			.string "R32V2020> "
; lineBuff is 80 characters long
lineBuff:		.string "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
lineEnd:		.long 0x00
syntaxError:	.string "Syntax error... "

;
; Read UART character and put it to the ANSI VGA Display
; Turn the first two characters into a hex 8-bit value
;

main:
00000000	D40000C3		bsr		clearScreen
00000001	42800000		lix		r8,prompt.lower
00000002	D40000B5		bsr		printString
00000003	4180DEAD		liu		r8,0xDEAD
00000004	4080BABA		lil		r8,0xBABA
00000005	D4000005		bsr		hexToScreen
00000006	41801234		liu		r8,0x1234
00000007	4080ABCD		lil		r8,0xABCD
00000008	D4000002		bsr		hexToScreen
00000009	01000000		hcf

;
; hexToScreen - Print hex value to screen
; r8 - value passed to routine in r8
;

hexToScreen:
0000000a	A0408000		push	r8
0000000b	A0409000		push	r9
0000000c	A040A000		push	r10
0000000d	A040B000		push	r11
0000000e	A0405000		push	PAR
0000000f	42B00008		lix		r11,0x8		; digits to send out
00000010	42A0000F		lix		r10,0xF		; bottom nibble mask
00000011	20980000		add		r9,r8,ZERO	; copy r8 to r9
anotherDigit:
00000012	34909000		rol1	r9,r9
00000013	34909000		rol1	r9,r9
00000014	34909000		rol1	r9,r9
00000015	34909000		rol1	r9,r9
00000016	2589A000		and		r8,r9,r10
00000017	D4000009		bsr		outHexCharToScreen
00000018	20BB2000		add		r11,r11,MINUS1
00000019	C7FFFFF9		bnz		anotherDigit
0000001a	A1504000		pull	PAR
0000001b	A1B04000		pull	r11
0000001c	A1A04000		pull	r10
0000001d	A1904000		pull	r9
0000001e	A1804000		pull	r8
0000001f	A1704000		pull	PC

;
; outHexCharToScreen
; hex digit to print is in the bottom nibble of r8
;

outHexCharToScreen:
00000020	A0408000		push	r8
00000021	A0409000		push	r9
00000022	42503000		lix		PAR,0x3000	; seven seg display
00000023	85508000		spl		r8
00000024	4290000A		lix		r9,0x0A
00000025	38398000		cmp		r9,r8
00000026	CC000005		blt		nibbleIsNumber
00000027	42900037		lix		r9,55
00000028	20898000		add		r8,r9,r8
00000029	D40000A9		bsr		putCharToANSIScreen
0000002a	C0000004		bra		doneHexChar
nibbleIsNumber:
0000002b	42900030		lix		r9,0x30
0000002c	20898000		add		r8,r9,r8
0000002d	D40000A5		bsr		putCharToANSIScreen
doneHexChar:
0000002e	A1904000		pull	r9
0000002f	A1804000		pull	r8
00000030	A1704000		pull	PC
	
;
; hexToSevenSeg - Convert a two ASCII digit value into a hex byte
; r8 points to the start of the hex string
;

hexToSevenSeg:
00000031	A0408000		push	r8
00000032	A0409000		push	r9
00000033	A040A000		push	r10
00000034	A0406000		push	DAR
00000035	A0405000		push	PAR
00000036	42900000		lix		r9,0
00000037	20680000		add		DAR,r8,ZERO
00000038	60806000		ldb		r8
00000039	D4000012		bsr		asciiToHex
0000003a	24998000		or		r9,r9,r8
0000003b	30909000		sl1		r9,r9
0000003c	30909000		sl1		r9,r9
0000003d	30909000		sl1		r9,r9
0000003e	30909000		sl1		r9,r9
0000003f	20661000		add		DAR,DAR,ONE
00000040	60806000		ldb		r8
00000041	D400000A		bsr		asciiToHex
00000042	24998000		or		r9,r9,r8
00000043	42503000		lix		PAR,0x3000		; seven segment display
00000044	85509000		spl		r9
00000045	A1504000		pull	PAR
00000046	A1604000		pull	DAR
00000047	A1A04000		pull	r10
00000048	A1904000		pull	r9
00000049	A1804000		pull	r8
0000004a	A1704000		pull	PC

;
; asciiToHex - Convert a single ASCII hex character into a nibble
; Make conversion case insensitive
; Character to convert is passed in r8
; Result is returned in r8
;	'0' = 0x30
;	'9' = 0x39
;	'A' = 0x41
;	'F' = 0x46
;	'a' = 0x61
;	'f' = 0x66
;

asciiToHex:
0000004b	A0409000		push	r9
0000004c	42900066		lix		r9,0x66		; check if letter is > 'f'
0000004d	38398000		cmp		r9,r8
0000004e	CF000025		bgt		a2h_Error
0000004f	42900030		lix		r9,0x30		; check if letter is < '0'
00000050	38398000		cmp		r9,r8	
00000051	CC000022		blt		a2h_Error
00000052	4290003A		lix		r9,0x3A		; check if letter is between '0' and '9' inclusively
00000053	38398000		cmp		r9,r8
00000054	CC000011		blt		gotDigit
00000055	42900041		lix		r9,0x41		; check if letter is between '9' and 'A' exclusively
00000056	38398000		cmp		r9,r8
00000057	CC00001C		blt		a2h_Error
00000058	42900047		lix		r9,0x47		; check if letter is between 'A' and F' inclusively
00000059	38398000		cmp		r9,r8
0000005a	CC000012		blt		gotUpperLetter
0000005b	42900061		lix		r9,0x61		; check if between 'F' and 'a' exclusively
0000005c	38398000		cmp		r9,r8
0000005d	CC000016		blt		a2h_Error
; Lower case letter
0000005e	42900057		lix		r9,0x57
0000005f	26992000		xor		r9,r9,MINUS1
00000060	20991000		add		r9,r9,ONE
00000061	20889000		add		r8,r8,r9
00000062	4290000F		lix		r9,0x0F
00000063	25889000		and		r8,r8,r9
00000064	C0000012		bra		doneConvA2H
gotDigit:
00000065	42900030		lix		r9,0x30
00000066	26992000		xor		r9,r9,MINUS1
00000067	20991000		add		r9,r9,ONE
00000068	20889000		add		r8,r8,r9
00000069	4290000F		lix		r9,0x0F
0000006a	25889000		and		r8,r8,r9
0000006b	C000000B		bra		doneConvA2H
gotUpperLetter:
0000006c	42900037		lix		r9,0x37
0000006d	26992000		xor		r9,r9,MINUS1
0000006e	20991000		add		r9,r9,ONE
0000006f	20889000		add		r8,r8,r9
00000070	4290000F		lix		r9,0x0F
00000071	25889000		and		r8,r8,r9
00000072	C0000004		bra		doneConvA2H
a2h_Error:
00000073	42800064		lix		r8,syntaxError.lower
00000074	D4000043		bsr		printString
00000075	4280DEAD		lix		r8,0xDEAD
doneConvA2H:
00000076	A1904000		pull	r9
00000077	A1704000		pull	PC
;
; getLine - Reads the UART and fills a buffer with the characters received
; r8 received character - Character received from the UART
; r9 is constant - ENTER key on keyboard
; r10 is the input buffer length
; r11 is the BACK key on keyboard
; r12 used to test the backspace doesn't go past the start of the buffer
; DAR points to lineBuff current character position
;

getLine:
00000078	A0408000		push	r8
00000079	A0409000		push	r9
0000007a	A040A000		push	r10
0000007b	A040B000		push	r11
0000007c	A040C000		push	r12
0000007d	A0406000		push	DAR
0000007e	4260000C		lix		DAR,lineBuff.lower	; DAR pointer = start of line buffer
0000007f	42B0007F		lix		r11,0x7F			; BACK key - rubout
00000080	42A0004F		lix		r10,79				; number of chars in the line buffer
00000081	4290000D		lix		r9,0x0D				; ENTER key - ends the line
loopReadLine:
00000082	D400001E		bsr		waitGetCharFromUART	; Get a character from the UART
00000083	D400004F		bsr		putCharToANSIScreen	; Put the character to the screen
00000084	D4000025		bsr		putCharToUART		; Echo character back to the UART
00000085	38389000		cmp		r8,r9				; check if received char was end of line
00000086	D1000007		beq		gotEOL
00000087	3838B000		cmp		r8,r11
00000088	D100000A		beq		gotBackspace
00000089	61608000		sdb		r8
0000008a	20661000		add		DAR,DAR,ONE			; increment to next long in buffer
0000008b	20AA2000		add		r10,r10,MINUS1
0000008c	C7FFFFF6		bnz		loopReadLine		; Next char would overflow
	; tbd add code for line too long	
gotEOL:
0000008d	4280000A		lix		r8,0x0A				; Echo line feed after CR
0000008e	D4000044		bsr		putCharToANSIScreen	; Put the character to the screen
0000008f	D400001A		bsr		putCharToUART		; Echo character back to the UART
00000090	61600000		sdb		r0					; null at end of line read
00000091	C0000007		bra		doneHandlingLine
gotBackspace:
00000092	20662000		add		DAR,DAR,MINUS1
00000093	42C0000C		lix		r12,lineBuff.lower	; r12 pointer = start of line buffer
00000094	383C6000		cmp		r12,DAR
00000095	CFFFFFED		bgt		loopReadLine
00000096	206C0000		add		DAR,r12,r0
00000097	C0FFFFEB		bra		loopReadLine
doneHandlingLine:
00000098	A1604000		pull	DAR
00000099	A1C04000		pull	r12
0000009a	A1B04000		pull	r11
0000009b	A1A04000		pull	r10
0000009c	A1904000		pull	r9
0000009d	A1804000		pull	r8
0000009e	A1704000		pull	PC

;
;
;
	
parseLine:
0000009f	A1704000		pull	PC
	
;
; waitGetCharFromUART
; returns character received in r8
; function is blocking until a character is received from the UART
;

waitGetCharFromUART:
000000a0	A0405000		push	PAR
000000a1	42501800		lix		PAR,0x1800	; UART Status
waitUartRxStat:
000000a2	84805000		lpl		r8			; Read Status into r8
000000a3	25881000		and 	r8,r8,ONE
000000a4	C3FFFFFE		bez 	waitUartRxStat
000000a5	42501801		lix 	PAR,0x1801
000000a6	84805000		lpl		r8
000000a7	A1504000		pull	PAR
000000a8	A1704000		pull	PC

;
; putCharToUART - Put a character to the UART
; passed character in r8 is sent out the UART
;

putCharToUART:
000000a9	A0409000		push	r9
000000aa	A0405000		push	PAR
000000ab	A040A000		push	r10
000000ac	42A00002		lix		r10,0x2
000000ad	42501800		lix		PAR,0x1800	; UART Status
waitUartTxStat:
000000ae	84905000		lpl		r9			; Read Status into r9
000000af	2599A000		and 	r9,r9,r10
000000b0	C3FFFFFE		bez 	waitUartTxStat
000000b1	42501801		lix 	PAR,0x1801
000000b2	85508000		spl		r8			; echo the character
000000b3	A1A04000		pull	r10
000000b4	A1504000		pull	PAR
000000b5	A1904000		pull	r9
000000b6	A1704000		pull	PC
	
;
; printString - Print a screen to the current screen position
; pass value : r8 points to the start of the string in Data memory
; strings are bytes packed into long words
; strings are null terminated
;

printString:
000000b7	A0408000		push	r8				; save r8
000000b8	A0406000		push	DAR
000000b9	20680000		add		DAR,r8,ZERO		; set the start of the string
nextChar:
000000ba	60806000		ldb		r8				; get the character
000000bb	38380000		cmp		r8,ZERO			; Null terminated string
000000bc	D1000004		beq		donePrStr		; done if null
000000bd	D4000015		bsr		putCharToANSIScreen	; write out the character
000000be	20661000		add		DAR,DAR,r1		; Point to next character
000000bf	C0FFFFFB		bra		nextChar
donePrStr:
000000c0	A1604000		pull	DAR				; restore DAR
000000c1	A1804000		pull	r8				; restore r8
000000c2	A1704000		pull	PC				; rts
	
;
; clearScreen - Clear the screen routine
; ANSI Terminal has an escape sequence which clears the screen and homes cursor
;

clearScreen:
000000c3	A0408000		push	r8				; save r8
000000c4	4280001B		lix		r8,0x1b			; ESC
000000c5	D400000D		bsr		putCharToANSIScreen
000000c6	D4FFFFE3		bsr		putCharToUART
000000c7	4280005B		lix		r8,0x5b			; [
000000c8	D400000A		bsr		putCharToANSIScreen
000000c9	D4FFFFE0		bsr		putCharToUART
000000ca	42800032		lix		r8,0x32			; 2
000000cb	D4000007		bsr		putCharToANSIScreen
000000cc	D4FFFFDD		bsr		putCharToUART
000000cd	4280004A		lix		r8,0x4A			; J
000000ce	D4000004		bsr		putCharToANSIScreen
000000cf	D4FFFFDA		bsr		putCharToUART
000000d0	A1804000		pull	r8
000000d1	A1704000		pull	PC				; rts

;
; putCharToANSIScreen - Put a character to the screen
; Character to put to screen is in r8
;

putCharToANSIScreen:
000000d2	A0409000		push	r9
000000d3	A0405000		push	PAR
000000d4	A040A000		push	r10
000000d5	42A00002		lix		r10,0x2		; TxReady bit
000000d6	42500000		lix		PAR,0x0		; UART Status
waitScreenTxStat:
000000d7	84905000		lpl		r9			; Read Status into r9
000000d8	2599A000		and 	r9,r9,r10
000000d9	C3FFFFFE		bez 	waitScreenTxStat
000000da	42500001		lix 	PAR,0x1
000000db	85508000		spl		r8			; echo the character
000000dc	A1A04000		pull	r10
000000dd	A1504000		pull	PAR
000000de	A1904000		pull	r9
000000df	A1704000		pull	PC
	
;
; makeBuzz - Make the buzzer buzz
;

makeBuzz:
000000e0	A0408000		push	r8
000000e1	42800000		lix		r8,0			; first note is 0
000000e2	D4000007		bsr 	setNote
000000e3	D400000D		bsr		enableBuzzer
000000e4	428000FA		lix		r8,250			; count for 1 Sec
000000e5	D4000023		bsr		delay_mS		; call delay_ms
000000e6	D4000016		bsr		disableBuzzer
000000e7	A1804000		pull	r8
000000e8	A1704000		pull	PC

;
; setNote - Set the note
; pass note in r8
;

setNote:
000000e9	A0408000		push	r8
000000ea	A0405000		push	PAR
000000eb	42504000		lix		PAR,0x4000
000000ec	85508000		spl		r8
000000ed	A1504000		pull	PAR
000000ee	A1804000		pull	r8
000000ef	A1704000		pull	PC

;
; enableBuzzer
;

enableBuzzer:
000000f0	A0409000		push	r9
000000f1	A0408000		push	r8
000000f2	A0405000		push	PAR
000000f3	42900010		lix		r9,0x0010		; Buzzer Enable line
000000f4	42502800		lix		PAR,0x2800
000000f5	84805000		lpl		r8
000000f6	24889000		or		r8,r8,r9
000000f7	85508000		spl		r8
000000f8	A1504000		pull	PAR
000000f9	A1804000		pull	r8
000000fa	A1904000		pull	r9
000000fb	A1704000		pull	PC

;
; disableBuzzer
;

disableBuzzer:
000000fc	A0409000		push	r9
000000fd	A0408000		push	r8
000000fe	A0405000		push	PAR
000000ff	4290FFEF		lix		r9,0xffef		; Buzzer Disable line
00000100	42502800		lix		PAR,0x2800
00000101	84805000		lpl		r8
00000102	25889000		and		r8,r8,r9
00000103	85508000		spl		r8
00000104	A1504000		pull	PAR
00000105	A1804000		pull	r8
00000106	A1904000		pull	r9
00000107	A1704000		pull	PC
	
; delay_mS - delay for the number of mSecs passed in r8
; pass mSec delay in r8
; Routine uses r9

delay_mS:
00000108	A0409000		push	r9
00000109	42503802		lix		PAR,0x3802		; address of the mSec counter
0000010a	84905000		lpl		r9				; read the peripheral counter into r9
0000010b	20898000		add		r8,r9,r8		; terminal counter to wait until is in r8
loop_delay_mS:
0000010c	84905000		lpl		r9				; check the elapsed time counter
0000010d	38389000		cmp		r8,r9
0000010e	CCFFFFFE		blt		loop_delay_mS
0000010f	A1904000		pull	r9
00000110	A1704000		pull	PC

; wr7Seg8Dig
; passed r8 - value to send to the 7 seg display

wr7Seg8Dig:
00000111	A0405000		push	PAR
00000112	42503000		lix		PAR,0x3000		; Seven Segment LED lines
00000113	85508000		spl		r8				; Write out LED bits
00000114	A1504000		pull	PAR
00000115	A1704000		pull	PC
